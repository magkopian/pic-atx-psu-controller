

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Jun  4 14:18:53 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000D                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0013                     	;# 
    63  0014                     	;# 
    64  0015                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001B                     	;# 
    72  001B                     	;# 
    73  001C                     	;# 
    74  001D                     	;# 
    75  001E                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  0087                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  010F                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000D                     	;# 
   112  000E                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0014                     	;# 
   120  0015                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0017                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  001B                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001D                     	;# 
   131  001E                     	;# 
   132  001F                     	;# 
   133  0081                     	;# 
   134  0085                     	;# 
   135  0086                     	;# 
   136  0087                     	;# 
   137  008C                     	;# 
   138  008D                     	;# 
   139  008E                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0094                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009E                     	;# 
   149  009F                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  010E                     	;# 
   153  010F                     	;# 
   154  018C                     	;# 
   155  018D                     	;# 
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000E                     	;# 
   170  000F                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001D                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  0087                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  009F                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212                           
   213                           	psect	idataBANK3
   214  0004                     __pidataBANK3:	
   215                           
   216                           ;initializer for main@F1209
   217  0004  3407               	retlw	7
   218  0005  3400               	retlw	0
   219  0006  341A               	retlw	26
   220  0007  342C               	retlw	44
   221  0008  343E               	retlw	62
   222                           
   223                           	psect	strings
   224  1000                     __pstrings:	
   225  1000                     stringtab:	
   226  1000                     __stringtab:	
   227  1000                     stringcode:	
   228                           ;	String table - string pointers are 1 byte each
   229                           
   230  1000                     stringdir:	
   231  1000  3010               	movlw	high stringdir
   232  1001  008A               	movwf	10
   233  1002  0804               	movf	4,w
   234  1003  0A84               	incf	4,f
   235  1004  0782               	addwf	2,f
   236  1005                     __stringbase:	
   237  1005  3400               	retlw	0
   238  1006                     __end_of__stringtab:	
   239  1006                     _dpowers:	
   240  1006  3401               	retlw	1
   241  1007  3400               	retlw	0
   242  1008  3400               	retlw	0
   243  1009  3400               	retlw	0
   244  100A  340A               	retlw	10
   245  100B  3400               	retlw	0
   246  100C  3400               	retlw	0
   247  100D  3400               	retlw	0
   248  100E  3464               	retlw	100
   249  100F  3400               	retlw	0
   250  1010  3400               	retlw	0
   251  1011  3400               	retlw	0
   252  1012  34E8               	retlw	232
   253  1013  3403               	retlw	3
   254  1014  3400               	retlw	0
   255  1015  3400               	retlw	0
   256  1016  3410               	retlw	16
   257  1017  3427               	retlw	39
   258  1018  3400               	retlw	0
   259  1019  3400               	retlw	0
   260  101A  34A0               	retlw	160
   261  101B  3486               	retlw	134
   262  101C  3401               	retlw	1
   263  101D  3400               	retlw	0
   264  101E  3440               	retlw	64
   265  101F  3442               	retlw	66
   266  1020  340F               	retlw	15
   267  1021  3400               	retlw	0
   268  1022  3480               	retlw	128
   269  1023  3496               	retlw	150
   270  1024  3498               	retlw	152
   271  1025  3400               	retlw	0
   272  1026  3400               	retlw	0
   273  1027  34E1               	retlw	225
   274  1028  34F5               	retlw	245
   275  1029  3405               	retlw	5
   276  102A  3400               	retlw	0
   277  102B  34CA               	retlw	202
   278  102C  349A               	retlw	154
   279  102D  343B               	retlw	59
   280  102E                     __end_of_dpowers:	
   281  102E                     __npowers_:	
   282  102E  3400               	retlw	0
   283  102F  3480               	retlw	128
   284  1030  343F               	retlw	63
   285  1031  34CD               	retlw	205
   286  1032  34CC               	retlw	204
   287  1033  343D               	retlw	61
   288  1034  34D7               	retlw	215
   289  1035  3423               	retlw	35
   290  1036  343C               	retlw	60
   291  1037  3412               	retlw	18
   292  1038  3483               	retlw	131
   293  1039  343A               	retlw	58
   294  103A  34B7               	retlw	183
   295  103B  34D1               	retlw	209
   296  103C  3438               	retlw	56
   297  103D  34C6               	retlw	198
   298  103E  3427               	retlw	39
   299  103F  3437               	retlw	55
   300  1040  3438               	retlw	56
   301  1041  3486               	retlw	134
   302  1042  3435               	retlw	53
   303  1043  34C0               	retlw	192
   304  1044  34D6               	retlw	214
   305  1045  3433               	retlw	51
   306  1046  34CC               	retlw	204
   307  1047  342B               	retlw	43
   308  1048  3432               	retlw	50
   309  1049  3470               	retlw	112
   310  104A  3489               	retlw	137
   311  104B  3430               	retlw	48
   312  104C  34E7               	retlw	231
   313  104D  34DB               	retlw	219
   314  104E  342E               	retlw	46
   315  104F  34E5               	retlw	229
   316  1050  343C               	retlw	60
   317  1051  341E               	retlw	30
   318  1052  3442               	retlw	66
   319  1053  34A2               	retlw	162
   320  1054  340D               	retlw	13
   321  1055                     __end_of__npowers_:	
   322  1055                     __powers_:	
   323  1055  3400               	retlw	0
   324  1056  3480               	retlw	128
   325  1057  343F               	retlw	63
   326  1058  3400               	retlw	0
   327  1059  3420               	retlw	32
   328  105A  3441               	retlw	65
   329  105B  3400               	retlw	0
   330  105C  34C8               	retlw	200
   331  105D  3442               	retlw	66
   332  105E  3400               	retlw	0
   333  105F  347A               	retlw	122
   334  1060  3444               	retlw	68
   335  1061  3440               	retlw	64
   336  1062  341C               	retlw	28
   337  1063  3446               	retlw	70
   338  1064  3450               	retlw	80
   339  1065  34C3               	retlw	195
   340  1066  3447               	retlw	71
   341  1067  3424               	retlw	36
   342  1068  3474               	retlw	116
   343  1069  3449               	retlw	73
   344  106A  3497               	retlw	151
   345  106B  3418               	retlw	24
   346  106C  344B               	retlw	75
   347  106D  34BC               	retlw	188
   348  106E  34BE               	retlw	190
   349  106F  344C               	retlw	76
   350  1070  346B               	retlw	107
   351  1071  346E               	retlw	110
   352  1072  344E               	retlw	78
   353  1073  3403               	retlw	3
   354  1074  3415               	retlw	21
   355  1075  3450               	retlw	80
   356  1076  3479               	retlw	121
   357  1077  34AD               	retlw	173
   358  1078  3460               	retlw	96
   359  1079  34F3               	retlw	243
   360  107A  3449               	retlw	73
   361  107B  3471               	retlw	113
   362  107C                     __end_of__powers_:	
   363  107C                     __stringdata:	
   364  107C                     STR_2:	
   365  107C  3420               	retlw	32	;' '
   366  107D  3420               	retlw	32	;' '
   367  107E  3420               	retlw	32	;' '
   368  107F  3420               	retlw	32	;' '
   369  1080  3420               	retlw	32	;' '
   370  1081  3420               	retlw	32	;' '
   371  1082  3420               	retlw	32	;' '
   372  1083  3420               	retlw	32	;' '
   373  1084  342A               	retlw	42	;'*'
   374  1085  342A               	retlw	42	;'*'
   375  1086  342A               	retlw	42	;'*'
   376  1087  342A               	retlw	42	;'*'
   377  1088  3420               	retlw	32	;' '
   378  1089  3420               	retlw	32	;' '
   379  108A  3420               	retlw	32	;' '
   380  108B  3420               	retlw	32	;' '
   381  108C  3420               	retlw	32	;' '
   382  108D  3420               	retlw	32	;' '
   383  108E  3420               	retlw	32	;' '
   384  108F  3420               	retlw	32	;' '
   385  1090  3400               	retlw	0
   386  1091                     STR_6:	
   387  1091  3420               	retlw	32	;' '
   388  1092  3420               	retlw	32	;' '
   389  1093  3420               	retlw	32	;' '
   390  1094  3420               	retlw	32	;' '
   391  1095  3420               	retlw	32	;' '
   392  1096  3420               	retlw	32	;' '
   393  1097  3420               	retlw	32	;' '
   394  1098  3420               	retlw	32	;' '
   395  1099  3433               	retlw	51	;'3'
   396  109A  342E               	retlw	46	;'.'
   397  109B  3433               	retlw	51	;'3'
   398  109C  3456               	retlw	86	;'V'
   399  109D  3420               	retlw	32	;' '
   400  109E  3420               	retlw	32	;' '
   401  109F  3420               	retlw	32	;' '
   402  10A0  3420               	retlw	32	;' '
   403  10A1  3420               	retlw	32	;' '
   404  10A2  3420               	retlw	32	;' '
   405  10A3  3420               	retlw	32	;' '
   406  10A4  3420               	retlw	32	;' '
   407  10A5  3400               	retlw	0
   408  10A6                     STR_5:	
   409  10A6  3420               	retlw	32	;' '
   410  10A7  3420               	retlw	32	;' '
   411  10A8  3420               	retlw	32	;' '
   412  10A9  3420               	retlw	32	;' '
   413  10AA  3435               	retlw	53	;'5'
   414  10AB  3456               	retlw	86	;'V'
   415  10AC  3420               	retlw	32	;' '
   416  10AD  3420               	retlw	32	;' '
   417  10AE  3420               	retlw	32	;' '
   418  10AF  3420               	retlw	32	;' '
   419  10B0  3420               	retlw	32	;' '
   420  10B1  3420               	retlw	32	;' '
   421  10B2  3420               	retlw	32	;' '
   422  10B3  342D               	retlw	45	;'-'
   423  10B4  3435               	retlw	53	;'5'
   424  10B5  3456               	retlw	86	;'V'
   425  10B6  3420               	retlw	32	;' '
   426  10B7  3420               	retlw	32	;' '
   427  10B8  3420               	retlw	32	;' '
   428  10B9  3420               	retlw	32	;' '
   429  10BA  3400               	retlw	0
   430  10BB                     STR_7:	
   431  10BB  3420               	retlw	32	;' '
   432  10BC  3420               	retlw	32	;' '
   433  10BD  3420               	retlw	32	;' '
   434  10BE  3420               	retlw	32	;' '
   435  10BF  3431               	retlw	49	;'1'
   436  10C0  3432               	retlw	50	;'2'
   437  10C1  3456               	retlw	86	;'V'
   438  10C2  3420               	retlw	32	;' '
   439  10C3  3420               	retlw	32	;' '
   440  10C4  3420               	retlw	32	;' '
   441  10C5  3420               	retlw	32	;' '
   442  10C6  3420               	retlw	32	;' '
   443  10C7  3420               	retlw	32	;' '
   444  10C8  342D               	retlw	45	;'-'
   445  10C9  3431               	retlw	49	;'1'
   446  10CA  3432               	retlw	50	;'2'
   447  10CB  3456               	retlw	86	;'V'
   448  10CC  3420               	retlw	32	;' '
   449  10CD  3420               	retlw	32	;' '
   450  10CE  3420               	retlw	32	;' '
   451  10CF  3400               	retlw	0
   452  10D0                     STR_1:	
   453  10D0  3420               	retlw	32	;' '
   454  10D1  342A               	retlw	42	;'*'
   455  10D2  342A               	retlw	42	;'*'
   456  10D3  342A               	retlw	42	;'*'
   457  10D4  3420               	retlw	32	;' '
   458  10D5  3420               	retlw	32	;' '
   459  10D6  3453               	retlw	83	;'S'
   460  10D7  3454               	retlw	84	;'T'
   461  10D8  3441               	retlw	65	;'A'
   462  10D9  344E               	retlw	78	;'N'
   463  10DA  3444               	retlw	68	;'D'
   464  10DB  3420               	retlw	32	;' '
   465  10DC  3442               	retlw	66	;'B'
   466  10DD  3459               	retlw	89	;'Y'
   467  10DE  3420               	retlw	32	;' '
   468  10DF  3420               	retlw	32	;' '
   469  10E0  342A               	retlw	42	;'*'
   470  10E1  342A               	retlw	42	;'*'
   471  10E2  342A               	retlw	42	;'*'
   472  10E3  3420               	retlw	32	;' '
   473  10E4  3400               	retlw	0
   474  10E5                     STR_3:	
   475  10E5  3425               	retlw	37	;'%'
   476  10E6  3436               	retlw	54	;'6'
   477  10E7  342E               	retlw	46	;'.'
   478  10E8  3433               	retlw	51	;'3'
   479  10E9  3466               	retlw	102	;'f'
   480  10EA  3441               	retlw	65	;'A'
   481  10EB  3400               	retlw	0
   482  10EC                     STR_4:	
   483  10EC  3425               	retlw	37	;'%'
   484  10ED  3437               	retlw	55	;'7'
   485  10EE  342E               	retlw	46	;'.'
   486  10EF  3433               	retlw	51	;'3'
   487  10F0  3466               	retlw	102	;'f'
   488  10F1  3441               	retlw	65	;'A'
   489  10F2  3400               	retlw	0
   490  10F3                     __end_of__stringdata:	
   491                           
   492                           ; #config settings
   493  0000                     
   494                           	psect	nvBANK1
   495  00CA                     __pnvBANK1:	
   496  00CA                     _lcd:	
   497  00CA                     	ds	5
   498  001F                     _ADCON0bits	set	31
   499  001E                     _ADRESH	set	30
   500  0005                     _PORTA	set	5
   501  0006                     _PORTB	set	6
   502  0006                     _PORTBbits	set	6
   503  0007                     _PORTCbits	set	7
   504  0007                     _PORTC	set	7
   505  009F                     _ADCON1bits	set	159
   506  009E                     _ADRESL	set	158
   507  0081                     _OPTION_REGbits	set	129
   508  0085                     _TRISA	set	133
   509  0086                     _TRISB	set	134
   510  0086                     _TRISBbits	set	134
   511  0087                     _TRISC	set	135
   512  0087                     _TRISCbits	set	135
   513                           
   514                           	psect	cinit
   515  07DE                     start_initialization:	
   516  07DE                     __initialization:	
   517                           
   518                           ; Initialize objects allocated to BANK3
   519  07DE  1683               	bsf	3,5	;RP0=1, select bank3
   520  07DF  1703               	bsf	3,6	;RP1=1, select bank3
   521  07E0  120A  118A  2004  120A  118A  	fcall	__pidataBANK3	;fetch initializer
   522  07E5  00DD               	movwf	__pdataBANK3& (0+127)
   523  07E6  120A  118A  2005  120A  118A  	fcall	__pidataBANK3+1	;fetch initializer
   524  07EB  00DE               	movwf	(__pdataBANK3+1)& (0+127)
   525  07EC  120A  118A  2006  120A  118A  	fcall	__pidataBANK3+2	;fetch initializer
   526  07F1  00DF               	movwf	(__pdataBANK3+2)& (0+127)
   527  07F2  120A  118A  2007  120A  118A  	fcall	__pidataBANK3+3	;fetch initializer
   528  07F7  00E0               	movwf	(__pdataBANK3+3)& (0+127)
   529  07F8  120A  118A  2008   	fcall	__pidataBANK3+4	;fetch initializer
   530  07FB  00E1               	movwf	(__pdataBANK3+4)& (0+127)
   531  07FC                     end_of_initialization:	
   532                           ;End of C runtime variable initialization code
   533                           
   534  07FC                     __end_of__initialization:	
   535  07FC  0183               	clrf	3
   536  07FD  120A  158A  2CFB   	ljmp	_main	;jump to C main() function
   537                           
   538                           	psect	dataBANK3
   539  01DD                     __pdataBANK3:	
   540  01DD                     main@F1209:	
   541  01DD                     	ds	5
   542                           
   543                           	psect	cstackBANK3
   544  0190                     __pcstackBANK3:	
   545  0190                     main@current_str:	
   546                           
   547                           ; 45 bytes @ 0x0
   548  0190                     	ds	45
   549  01BD                     main@current:	
   550                           
   551                           ; 15 bytes @ 0x2D
   552  01BD                     	ds	15
   553  01CC                     main@lcd:	
   554                           
   555                           ; 5 bytes @ 0x3C
   556  01CC                     	ds	5
   557  01D1                     main@toggled_screen:	
   558                           
   559                           ; 1 bytes @ 0x41
   560  01D1                     	ds	1
   561  01D2                     main@toggled_backlight:	
   562                           
   563                           ; 1 bytes @ 0x42
   564  01D2                     	ds	1
   565  01D3                     main@toggled_power:	
   566                           
   567                           ; 1 bytes @ 0x43
   568  01D3                     	ds	1
   569  01D4                     main@start_channel:	
   570                           
   571                           ; 1 bytes @ 0x44
   572  01D4                     	ds	1
   573  01D5                     main@stop_channel:	
   574                           
   575                           ; 1 bytes @ 0x45
   576  01D5                     	ds	1
   577  01D6                     _main$877:	
   578                           
   579                           ; 3 bytes @ 0x46
   580  01D6                     	ds	3
   581  01D9                     _main$878:	
   582                           
   583                           ; 1 bytes @ 0x49
   584  01D9                     	ds	1
   585  01DA                     main@screen_id:	
   586                           
   587                           ; 1 bytes @ 0x4A
   588  01DA                     	ds	1
   589  01DB                     main@i:	
   590                           
   591                           ; 2 bytes @ 0x4B
   592  01DB                     	ds	2
   593                           
   594                           	psect	cstackBANK1
   595  00A0                     __pcstackBANK1:	
   596  00A0                     ??_sprintf:	
   597                           
   598                           ; 0 bytes @ 0x0
   599  00A0                     	ds	6
   600  00A6                     _sprintf$876:	
   601                           
   602                           ; 3 bytes @ 0x6
   603  00A6                     	ds	3
   604  00A9                     _sprintf$463:	
   605                           
   606                           ; 4 bytes @ 0x9
   607  00A9                     	ds	4
   608  00AD                     sprintf@ap:	
   609                           
   610                           ; 1 bytes @ 0xD
   611  00AD                     	ds	1
   612  00AE                     sprintf@vd:	
   613                           
   614                           ; 4 bytes @ 0xE
   615  00AE                     	ds	4
   616  00B2                     sprintf@vd_465:	
   617                           
   618                           ; 4 bytes @ 0x12
   619  00B2                     	ds	4
   620  00B6                     sprintf@integ:	
   621                           
   622                           ; 3 bytes @ 0x16
   623  00B6                     	ds	3
   624  00B9                     sprintf@_val:	
   625                           
   626                           ; 4 bytes @ 0x19
   627  00B9                     	ds	4
   628  00BD                     sprintf@flag:	
   629                           
   630                           ; 2 bytes @ 0x1D
   631  00BD                     	ds	2
   632  00BF                     sprintf@width:	
   633                           
   634                           ; 2 bytes @ 0x1F
   635  00BF                     	ds	2
   636  00C1                     sprintf@exp:	
   637                           
   638                           ; 2 bytes @ 0x21
   639  00C1                     	ds	2
   640  00C3                     sprintf@fval:	
   641                           
   642                           ; 3 bytes @ 0x23
   643  00C3                     	ds	3
   644  00C6                     sprintf@sp:	
   645                           
   646                           ; 1 bytes @ 0x26
   647  00C6                     	ds	1
   648  00C7                     sprintf@prec:	
   649                           
   650                           ; 2 bytes @ 0x27
   651  00C7                     	ds	2
   652  00C9                     sprintf@c:	
   653                           
   654                           ; 1 bytes @ 0x29
   655  00C9                     	ds	1
   656                           
   657                           	psect	cstackCOMMON
   658  0070                     __pcstackCOMMON:	
   659  0070                     ?_ADC_Init:	
   660  0070                     ??_ADC_Init:	
   661                           ; 0 bytes @ 0x0
   662                           
   663  0070                     ?_IO_Init:	
   664                           ; 0 bytes @ 0x0
   665                           
   666  0070                     ??_IO_Init:	
   667                           ; 0 bytes @ 0x0
   668                           
   669  0070                     ?_LCD_Write:	
   670                           ; 0 bytes @ 0x0
   671                           
   672  0070                     ?_LCD_putrs:	
   673                           ; 0 bytes @ 0x0
   674                           
   675  0070                     ?_LCD_puts:	
   676                           ; 0 bytes @ 0x0
   677                           
   678  0070                     ?_isdigit:	
   679                           ; 0 bytes @ 0x0
   680                           
   681  0070                     ??_isdigit:	
   682                           ; 1 bit 
   683                           
   684  0070                     ?_LCD_Out:	
   685                           ; 0 bytes @ 0x0
   686                           
   687  0070                     ??_LCD_Out:	
   688                           ; 0 bytes @ 0x0
   689                           
   690  0070                     ?_LCD_putc:	
   691                           ; 0 bytes @ 0x0
   692                           
   693  0070                     ?_main:	
   694                           ; 0 bytes @ 0x0
   695                           
   696  0070                     ?___wmul:	
   697                           ; 2 bytes @ 0x0
   698                           
   699  0070                     ?___awmod:	
   700                           ; 2 bytes @ 0x0
   701                           
   702  0070                     ?___ftpack:	
   703                           ; 2 bytes @ 0x0
   704                           
   705  0070                     ?___ftneg:	
   706                           ; 3 bytes @ 0x0
   707                           
   708  0070                     ?__tdiv_to_l_:	
   709                           ; 3 bytes @ 0x0
   710                           
   711  0070                     ?__div_to_l_:	
   712                           ; 4 bytes @ 0x0
   713                           
   714  0070                     ?___lldiv:	
   715                           ; 4 bytes @ 0x0
   716                           
   717  0070                     ?___llmod:	
   718                           ; 4 bytes @ 0x0
   719                           
   720  0070                     _isdigit$663:	
   721                           ; 4 bytes @ 0x0
   722                           
   723  0070                     ___wmul@multiplier:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ___awmod@divisor:	
   727                           ; 2 bytes @ 0x0
   728                           
   729  0070                     __div_to_l_@f1:	
   730                           ; 2 bytes @ 0x0
   731                           
   732  0070                     ___ftpack@arg:	
   733                           ; 3 bytes @ 0x0
   734                           
   735  0070                     __tdiv_to_l_@f1:	
   736                           ; 3 bytes @ 0x0
   737                           
   738  0070                     ___ftneg@f1:	
   739                           ; 3 bytes @ 0x0
   740                           
   741  0070                     ___lldiv@divisor:	
   742                           ; 3 bytes @ 0x0
   743                           
   744  0070                     ___llmod@divisor:	
   745                           ; 4 bytes @ 0x0
   746                           
   747                           
   748                           ; 4 bytes @ 0x0
   749  0070                     	ds	1
   750  0071                     isdigit@c:	
   751                           
   752                           ; 1 bytes @ 0x1
   753  0071                     	ds	1
   754  0072                     ___wmul@multiplicand:	
   755  0072                     ___awmod@dividend:	
   756                           ; 2 bytes @ 0x2
   757                           
   758                           
   759                           ; 2 bytes @ 0x2
   760  0072                     	ds	1
   761  0073                     ??___ftneg:	
   762  0073                     LCD_Out@c:	
   763                           ; 0 bytes @ 0x3
   764                           
   765  0073                     ___ftpack@exp:	
   766                           ; 1 bytes @ 0x3
   767                           
   768  0073                     __div_to_l_@f2:	
   769                           ; 1 bytes @ 0x3
   770                           
   771  0073                     __tdiv_to_l_@f2:	
   772                           ; 3 bytes @ 0x3
   773                           
   774                           
   775                           ; 3 bytes @ 0x3
   776  0073                     	ds	1
   777  0074                     ??_LCD_Write:	
   778  0074                     ??_LCD_putc:	
   779                           ; 0 bytes @ 0x4
   780                           
   781  0074                     ??___wmul:	
   782                           ; 0 bytes @ 0x4
   783                           
   784  0074                     ??___awmod:	
   785                           ; 0 bytes @ 0x4
   786                           
   787  0074                     ___ftpack@sign:	
   788                           ; 0 bytes @ 0x4
   789                           
   790  0074                     ___wmul@product:	
   791                           ; 1 bytes @ 0x4
   792                           
   793  0074                     ___lldiv@dividend:	
   794                           ; 2 bytes @ 0x4
   795                           
   796  0074                     ___llmod@dividend:	
   797                           ; 4 bytes @ 0x4
   798                           
   799                           
   800                           ; 4 bytes @ 0x4
   801  0074                     	ds	1
   802  0075                     ??___ftpack:	
   803  0075                     ___awmod@counter:	
   804                           ; 0 bytes @ 0x5
   805                           
   806                           
   807                           ; 1 bytes @ 0x5
   808  0075                     	ds	1
   809  0076                     ??__tdiv_to_l_:	
   810  0076                     ??__div_to_l_:	
   811                           ; 0 bytes @ 0x6
   812                           
   813  0076                     ___awmod@sign:	
   814                           ; 0 bytes @ 0x6
   815                           
   816                           
   817                           ; 1 bytes @ 0x6
   818  0076                     	ds	1
   819  0077                     ?___awdiv:	
   820  0077                     LCD_Write@c:	
   821                           ; 2 bytes @ 0x7
   822                           
   823  0077                     LCD_putc@c:	
   824                           ; 1 bytes @ 0x7
   825                           
   826  0077                     ___awdiv@divisor:	
   827                           ; 1 bytes @ 0x7
   828                           
   829                           
   830                           ; 2 bytes @ 0x7
   831  0077                     	ds	1
   832  0078                     ??_LCD_putrs:	
   833  0078                     ??_LCD_puts:	
   834                           ; 0 bytes @ 0x8
   835                           
   836  0078                     ??___lldiv:	
   837                           ; 0 bytes @ 0x8
   838                           
   839  0078                     ??___llmod:	
   840                           ; 0 bytes @ 0x8
   841                           
   842  0078                     ?_LCD_Init:	
   843                           ; 0 bytes @ 0x8
   844                           
   845  0078                     LCD_putrs@i:	
   846                           ; 1 bytes @ 0x8
   847                           
   848  0078                     LCD_Init@display:	
   849                           ; 2 bytes @ 0x8
   850                           
   851                           
   852                           ; 5 bytes @ 0x8
   853  0078                     	ds	1
   854  0079                     ___llmod@counter:	
   855  0079                     LCD_puts@i:	
   856                           ; 1 bytes @ 0x9
   857                           
   858  0079                     ___awdiv@dividend:	
   859                           ; 2 bytes @ 0x9
   860                           
   861  0079                     ___lldiv@quotient:	
   862                           ; 2 bytes @ 0x9
   863                           
   864                           
   865                           ; 4 bytes @ 0x9
   866  0079                     	ds	1
   867  007A                     LCD_putrs@a:	
   868                           
   869                           ; 1 bytes @ 0xA
   870  007A                     	ds	1
   871  007B                     ??___awdiv:	
   872  007B                     LCD_puts@a:	
   873                           ; 0 bytes @ 0xB
   874                           
   875                           
   876                           ; 1 bytes @ 0xB
   877  007B                     	ds	1
   878  007C                     ??___bmul:	
   879                           
   880                           ; 0 bytes @ 0xC
   881  007C                     	ds	1
   882  007D                     LCD_Init@cmd:	
   883  007D                     ___lldiv@counter:	
   884                           ; 1 bytes @ 0xD
   885                           
   886                           
   887                           ; 1 bytes @ 0xD
   888  007D                     	ds	1
   889  007E                     ??___ftsub:	
   890                           
   891                           	psect	cstackBANK0
   892  0020                     __pcstackBANK0:	
   893                           ; 0 bytes @ 0xE
   894                           
   895  0020                     ??_LCD_Init:	
   896  0020                     ?_ADC_Read:	
   897                           ; 0 bytes @ 0x0
   898                           
   899  0020                     ___awdiv@counter:	
   900                           ; 4 bytes @ 0x0
   901                           
   902  0020                     ADC_Read@samples:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0020                     __div_to_l_@quot:	
   906                           ; 2 bytes @ 0x0
   907                           
   908  0020                     __tdiv_to_l_@quot:	
   909                           ; 4 bytes @ 0x0
   910                           
   911                           
   912                           ; 4 bytes @ 0x0
   913  0020                     	ds	1
   914  0021                     ___awdiv@sign:	
   915                           
   916                           ; 1 bytes @ 0x1
   917  0021                     	ds	1
   918  0022                     ___awdiv@quotient:	
   919                           
   920                           ; 2 bytes @ 0x2
   921  0022                     	ds	2
   922  0024                     ??_ADC_Read:	
   923  0024                     ?___bmul:	
   924                           ; 0 bytes @ 0x4
   925                           
   926  0024                     ___bmul@multiplicand:	
   927                           ; 1 bytes @ 0x4
   928                           
   929  0024                     __div_to_l_@cntr:	
   930                           ; 1 bytes @ 0x4
   931                           
   932  0024                     __tdiv_to_l_@cntr:	
   933                           ; 1 bytes @ 0x4
   934                           
   935                           
   936                           ; 1 bytes @ 0x4
   937  0024                     	ds	1
   938  0025                     ___bmul@product:	
   939  0025                     __div_to_l_@exp1:	
   940                           ; 1 bytes @ 0x5
   941                           
   942  0025                     __tdiv_to_l_@exp1:	
   943                           ; 1 bytes @ 0x5
   944                           
   945                           
   946                           ; 1 bytes @ 0x5
   947  0025                     	ds	1
   948  0026                     ___bmul@multiplier:	
   949                           
   950                           ; 1 bytes @ 0x6
   951  0026                     	ds	1
   952  0027                     ?___ftge:	
   953  0027                     ___ftge@ff1:	
   954                           ; 1 bit 
   955                           
   956                           
   957                           ; 3 bytes @ 0x7
   958  0027                     	ds	1
   959  0028                     ADC_Read@ADCResult:	
   960                           
   961                           ; 4 bytes @ 0x8
   962  0028                     	ds	2
   963  002A                     ___ftge@ff2:	
   964                           
   965                           ; 3 bytes @ 0xA
   966  002A                     	ds	2
   967  002C                     ADC_Read@i:	
   968                           
   969                           ; 2 bytes @ 0xC
   970  002C                     	ds	1
   971  002D                     ??___ftge:	
   972                           
   973                           ; 0 bytes @ 0xD
   974  002D                     	ds	1
   975  002E                     ADC_Read@channel:	
   976                           
   977                           ; 1 bytes @ 0xE
   978  002E                     	ds	1
   979  002F                     ?___lltoft:	
   980  002F                     ___lltoft@c:	
   981                           ; 3 bytes @ 0xF
   982                           
   983                           
   984                           ; 4 bytes @ 0xF
   985  002F                     	ds	4
   986  0033                     ??___lltoft:	
   987                           
   988                           ; 0 bytes @ 0x13
   989  0033                     	ds	1
   990  0034                     ___lltoft@exp:	
   991                           
   992                           ; 1 bytes @ 0x14
   993  0034                     	ds	1
   994  0035                     ?___ftmul:	
   995  0035                     ___ftmul@f1:	
   996                           ; 3 bytes @ 0x15
   997                           
   998                           
   999                           ; 3 bytes @ 0x15
  1000  0035                     	ds	3
  1001  0038                     ___ftmul@f2:	
  1002                           
  1003                           ; 3 bytes @ 0x18
  1004  0038                     	ds	3
  1005  003B                     ??___ftmul:	
  1006                           
  1007                           ; 0 bytes @ 0x1B
  1008  003B                     	ds	4
  1009  003F                     ___ftmul@exp:	
  1010                           
  1011                           ; 1 bytes @ 0x1F
  1012  003F                     	ds	1
  1013  0040                     ___ftmul@f3_as_product:	
  1014                           
  1015                           ; 3 bytes @ 0x20
  1016  0040                     	ds	3
  1017  0043                     ___ftmul@cntr:	
  1018                           
  1019                           ; 1 bytes @ 0x23
  1020  0043                     	ds	1
  1021  0044                     ___ftmul@sign:	
  1022                           
  1023                           ; 1 bytes @ 0x24
  1024  0044                     	ds	1
  1025  0045                     ?_fround:	
  1026  0045                     ?_scale:	
  1027                           ; 3 bytes @ 0x25
  1028                           
  1029                           
  1030                           ; 3 bytes @ 0x25
  1031  0045                     	ds	3
  1032  0048                     ??_fround:	
  1033  0048                     ??_scale:	
  1034                           ; 0 bytes @ 0x28
  1035                           
  1036                           
  1037                           ; 0 bytes @ 0x28
  1038  0048                     	ds	2
  1039  004A                     _scale$875:	
  1040                           
  1041                           ; 3 bytes @ 0x2A
  1042  004A                     	ds	3
  1043  004D                     scale@scl:	
  1044                           
  1045                           ; 1 bytes @ 0x2D
  1046  004D                     	ds	1
  1047  004E                     ?___fttol:	
  1048  004E                     ___fttol@f1:	
  1049                           ; 4 bytes @ 0x2E
  1050                           
  1051  004E                     _fround$874:	
  1052                           ; 3 bytes @ 0x2E
  1053                           
  1054                           
  1055                           ; 3 bytes @ 0x2E
  1056  004E                     	ds	3
  1057  0051                     _fround$873:	
  1058                           
  1059                           ; 3 bytes @ 0x31
  1060  0051                     	ds	1
  1061  0052                     ??___fttol:	
  1062                           
  1063                           ; 0 bytes @ 0x32
  1064  0052                     	ds	2
  1065  0054                     fround@prec:	
  1066                           
  1067                           ; 1 bytes @ 0x34
  1068  0054                     	ds	1
  1069  0055                     ?___ftadd:	
  1070  0055                     ___ftadd@f1:	
  1071                           ; 3 bytes @ 0x35
  1072                           
  1073                           
  1074                           ; 3 bytes @ 0x35
  1075  0055                     	ds	1
  1076  0056                     ___fttol@sign1:	
  1077                           
  1078                           ; 1 bytes @ 0x36
  1079  0056                     	ds	1
  1080  0057                     ___fttol@lval:	
  1081                           
  1082                           ; 4 bytes @ 0x37
  1083  0057                     	ds	1
  1084  0058                     ___ftadd@f2:	
  1085                           
  1086                           ; 3 bytes @ 0x38
  1087  0058                     	ds	3
  1088  005B                     ??___ftadd:	
  1089  005B                     ___fttol@exp1:	
  1090                           ; 0 bytes @ 0x3B
  1091                           
  1092                           
  1093                           ; 1 bytes @ 0x3B
  1094  005B                     	ds	4
  1095  005F                     ___ftadd@sign:	
  1096                           
  1097                           ; 1 bytes @ 0x3F
  1098  005F                     	ds	1
  1099  0060                     ___ftadd@exp2:	
  1100                           
  1101                           ; 1 bytes @ 0x40
  1102  0060                     	ds	1
  1103  0061                     ___ftadd@exp1:	
  1104                           
  1105                           ; 1 bytes @ 0x41
  1106  0061                     	ds	1
  1107  0062                     ?___ftsub:	
  1108  0062                     ___ftsub@f2:	
  1109                           ; 3 bytes @ 0x42
  1110                           
  1111                           
  1112                           ; 3 bytes @ 0x42
  1113  0062                     	ds	3
  1114  0065                     ___ftsub@f1:	
  1115                           
  1116                           ; 3 bytes @ 0x45
  1117  0065                     	ds	3
  1118  0068                     ?_sprintf:	
  1119  0068                     sprintf@f:	
  1120                           ; 2 bytes @ 0x48
  1121                           
  1122                           
  1123                           ; 1 bytes @ 0x48
  1124  0068                     	ds	4
  1125  006C                     ??_main:	
  1126                           
  1127                           ; 0 bytes @ 0x4C
  1128  006C                     	ds	2
  1129                           
  1130                           	psect	maintext
  1131  0CFB                     __pmaintext:	
  1132 ;;
  1133 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1134 ;;
  1135 ;; *************** function _main *****************
  1136 ;; Defined at:
  1137 ;;		line 69 in file "main.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  i               2   75[BANK3 ] int 
  1142 ;;  current_str    45    0[BANK3 ] unsigned char [9][5]
  1143 ;;  current        15   45[BANK3 ] [5]
  1144 ;;  lcd             5   60[BANK3 ] struct .
  1145 ;;  screen_id       1   74[BANK3 ] unsigned char 
  1146 ;;  stop_channel    1   69[BANK3 ] unsigned char 
  1147 ;;  start_channe    1   68[BANK3 ] unsigned char 
  1148 ;;  toggled_powe    1   67[BANK3 ] unsigned char 
  1149 ;;  toggled_back    1   66[BANK3 ] unsigned char 
  1150 ;;  toggled_scre    1   65[BANK3 ] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  2   32[COMMON] int 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 17F/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1160 ;;      Params:         0       0       0       0       0
  1161 ;;      Locals:         0       0       0      77       0
  1162 ;;      Temps:          0       2       0       0       0
  1163 ;;      Totals:         0       2       0      77       0
  1164 ;;Total ram usage:       79 bytes
  1165 ;; Hardware stack levels required when called:    4
  1166 ;; This function calls:
  1167 ;;		_ADC_Init
  1168 ;;		_ADC_Read
  1169 ;;		_IO_Init
  1170 ;;		_LCD_Init
  1171 ;;		_LCD_Write
  1172 ;;		_LCD_putrs
  1173 ;;		_LCD_puts
  1174 ;;		___bmul
  1175 ;;		___ftadd
  1176 ;;		___ftge
  1177 ;;		___ftmul
  1178 ;;		___lltoft
  1179 ;;		_sprintf
  1180 ;; This function is called by:
  1181 ;;		Startup code after reset
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           
  1186                           ;psect for function _main
  1187  0CFB                     _main:	
  1188                           
  1189                           ;main.c: 70: bool toggled_screen = 0, toggled_backlight = 0, toggled_power = 0;
  1190                           
  1191                           ;incstack = 0
  1192                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1193  0CFB  1683               	bsf	3,5	;RP0=1, select bank3
  1194  0CFC  1703               	bsf	3,6	;RP1=1, select bank3
  1195  0CFD  01D1               	clrf	main@toggled_screen^(0+384)
  1196  0CFE  01D2               	clrf	main@toggled_backlight^(0+384)
  1197  0CFF  01D3               	clrf	main@toggled_power^(0+384)
  1198                           
  1199                           ;main.c: 71: double current[5];
  1200                           ;main.c: 72: char current_str[5][9];
  1201                           ;main.c: 73: unsigned char screen_id = 0, start_channel = 0, stop_channel = 0;
  1202  0D00  01DA               	clrf	main@screen_id^(0+384)
  1203  0D01  01D4               	clrf	main@start_channel^(0+384)
  1204  0D02  01D5               	clrf	main@stop_channel^(0+384)
  1205                           
  1206                           ;main.c: 74: LCD lcd = { &PORTC, 2, 3, 4, 5, 6, 7 };
  1207  0D03  30CC               	movlw	main@lcd& (0+255)
  1208  0D04  0084               	movwf	4
  1209  0D05  085D               	movf	main@F1209^(0+384),w
  1210  0D06  1783               	bsf	3,7	;select IRP bank3
  1211  0D07  0080               	movwf	0
  1212  0D08  0A84               	incf	4,f
  1213  0D09  085E               	movf	(main@F1209^(0+384)+1),w
  1214  0D0A  0080               	movwf	0
  1215  0D0B  0A84               	incf	4,f
  1216  0D0C  085F               	movf	(main@F1209^(0+384)+2),w
  1217  0D0D  0080               	movwf	0
  1218  0D0E  0A84               	incf	4,f
  1219  0D0F  0860               	movf	(main@F1209^(0+384)+3),w
  1220  0D10  0080               	movwf	0
  1221  0D11  0A84               	incf	4,f
  1222  0D12  0861               	movf	(main@F1209^(0+384)+4),w
  1223  0D13  0080               	movwf	0
  1224                           
  1225                           ;main.c: 76: LCD_Init(lcd);
  1226  0D14  3078               	movlw	LCD_Init@display& (0+255)
  1227  0D15  0084               	movwf	4
  1228  0D16  084C               	movf	main@lcd^(0+384),w
  1229  0D17  0080               	movwf	0
  1230  0D18  0A84               	incf	4,f
  1231  0D19  084D               	movf	(main@lcd^(0+384)+1),w
  1232  0D1A  0080               	movwf	0
  1233  0D1B  0A84               	incf	4,f
  1234  0D1C  084E               	movf	(main@lcd^(0+384)+2),w
  1235  0D1D  0080               	movwf	0
  1236  0D1E  0A84               	incf	4,f
  1237  0D1F  084F               	movf	(main@lcd^(0+384)+3),w
  1238  0D20  0080               	movwf	0
  1239  0D21  0A84               	incf	4,f
  1240  0D22  0850               	movf	(main@lcd^(0+384)+4),w
  1241  0D23  0080               	movwf	0
  1242  0D24  120A  158A  2017  120A  158A  	fcall	_LCD_Init
  1243                           
  1244                           ;main.c: 77: ADC_Init();
  1245  0D29  160A  158A  267D  120A  158A  	fcall	_ADC_Init
  1246                           
  1247                           ;main.c: 78: IO_Init();
  1248  0D2E  160A  158A  2645  120A  158A  	fcall	_IO_Init
  1249  0D33                     l3124:	
  1250                           ;main.c: 80: for ( ;; ) {
  1251                           
  1252                           
  1253                           ;main.c: 83: if ( PORTBbits.RB0 == 0 && toggled_power == 0 ) {
  1254  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  1255  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  1256  0D35  1806               	btfsc	6,0	;volatile
  1257  0D36  2D5F               	goto	l36
  1258  0D37  1683               	bsf	3,5	;RP0=1, select bank3
  1259  0D38  1703               	bsf	3,6	;RP1=1, select bank3
  1260  0D39  08D3               	movf	main@toggled_power^(0+384),f
  1261  0D3A  1D03               	skipz
  1262  0D3B  2D5F               	goto	l36
  1263                           
  1264                           ;main.c: 84: _delay((unsigned long)((1)*(8000000/4000.0)));
  1265  0D3C  3003               	movlw	3
  1266  0D3D  1283               	bcf	3,5	;RP0=0, select bank0
  1267  0D3E  1303               	bcf	3,6	;RP1=0, select bank0
  1268  0D3F  00ED               	movwf	??_main+1
  1269  0D40  3097               	movlw	151
  1270  0D41  00EC               	movwf	??_main
  1271  0D42                     u4797:	
  1272  0D42  0BEC               	decfsz	??_main,f
  1273  0D43  2D42               	goto	u4797
  1274  0D44  0BED               	decfsz	??_main+1,f
  1275  0D45  2D42               	goto	u4797
  1276  0D46  2D47               	nop2
  1277                           
  1278                           ;main.c: 86: if ( PORTBbits.RB3 == 0 ) {
  1279  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  1280  0D48  1303               	bcf	3,6	;RP1=0, select bank0
  1281  0D49  1986               	btfsc	6,3	;volatile
  1282  0D4A  2D4D               	goto	l37
  1283                           
  1284                           ;main.c: 87: PORTBbits.RB3 = 1;
  1285  0D4B  1586               	bsf	6,3	;volatile
  1286                           
  1287                           ;main.c: 88: }
  1288  0D4C  2D4E               	goto	l3134
  1289  0D4D                     l37:	
  1290                           
  1291                           ;main.c: 89: else {
  1292                           ;main.c: 90: PORTBbits.RB3 = 0;
  1293  0D4D  1186               	bcf	6,3	;volatile
  1294  0D4E                     l3134:	
  1295                           ;main.c: 91: }
  1296                           ;main.c: 93: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0 
      +                          );
  1297                           
  1298  0D4E  3000               	movlw	0
  1299  0D4F  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1300  0D54  3001               	movlw	1
  1301  0D55  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1302                           
  1303                           ;main.c: 94: toggled_power = 1;
  1304  0D5A  1683               	bsf	3,5	;RP0=1, select bank3
  1305  0D5B  1703               	bsf	3,6	;RP1=1, select bank3
  1306  0D5C  01D3               	clrf	main@toggled_power^(0+384)
  1307  0D5D  0AD3               	incf	main@toggled_power^(0+384),f
  1308                           
  1309                           ;main.c: 95: }
  1310  0D5E  2D66               	goto	l3140
  1311  0D5F                     l36:	
  1312                           
  1313                           ;main.c: 96: else if ( PORTBbits.RB0 == 1 ) {
  1314  0D5F  1283               	bcf	3,5	;RP0=0, select bank0
  1315  0D60  1303               	bcf	3,6	;RP1=0, select bank0
  1316  0D61  1C06               	btfss	6,0	;volatile
  1317  0D62  2D66               	goto	l3140
  1318                           
  1319                           ;main.c: 97: toggled_power = 0;
  1320  0D63  1683               	bsf	3,5	;RP0=1, select bank3
  1321  0D64  1703               	bsf	3,6	;RP1=1, select bank3
  1322  0D65  01D3               	clrf	main@toggled_power^(0+384)
  1323  0D66                     l3140:	
  1324                           
  1325                           ;main.c: 98: }
  1326                           ;main.c: 101: if ( PORTBbits.RB2 == 0 && toggled_backlight == 0 ) {
  1327  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0D68  1906               	btfsc	6,2	;volatile
  1330  0D69  2D86               	goto	l43
  1331  0D6A  1683               	bsf	3,5	;RP0=1, select bank3
  1332  0D6B  1703               	bsf	3,6	;RP1=1, select bank3
  1333  0D6C  08D2               	movf	main@toggled_backlight^(0+384),f
  1334  0D6D  1D03               	skipz
  1335  0D6E  2D86               	goto	l43
  1336                           
  1337                           ;main.c: 102: _delay((unsigned long)((1)*(8000000/4000.0)));
  1338  0D6F  3003               	movlw	3
  1339  0D70  1283               	bcf	3,5	;RP0=0, select bank0
  1340  0D71  1303               	bcf	3,6	;RP1=0, select bank0
  1341  0D72  00ED               	movwf	??_main+1
  1342  0D73  3097               	movlw	151
  1343  0D74  00EC               	movwf	??_main
  1344  0D75                     u4807:	
  1345  0D75  0BEC               	decfsz	??_main,f
  1346  0D76  2D75               	goto	u4807
  1347  0D77  0BED               	decfsz	??_main+1,f
  1348  0D78  2D75               	goto	u4807
  1349  0D79  2D7A               	nop2
  1350                           
  1351                           ;main.c: 104: if ( PORTCbits.RC1 == 0 ) {
  1352  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  1353  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  1354  0D7C  1887               	btfsc	7,1	;volatile
  1355  0D7D  2D80               	goto	l44
  1356                           
  1357                           ;main.c: 105: PORTCbits.RC1 = 1;
  1358  0D7E  1487               	bsf	7,1	;volatile
  1359                           
  1360                           ;main.c: 106: }
  1361  0D7F  2D81               	goto	l45
  1362  0D80                     l44:	
  1363                           
  1364                           ;main.c: 107: else {
  1365                           ;main.c: 108: PORTCbits.RC1 = 0;
  1366  0D80  1087               	bcf	7,1	;volatile
  1367  0D81                     l45:	
  1368                           
  1369                           ;main.c: 109: }
  1370                           ;main.c: 111: toggled_backlight = 1;
  1371  0D81  1683               	bsf	3,5	;RP0=1, select bank3
  1372  0D82  1703               	bsf	3,6	;RP1=1, select bank3
  1373  0D83  01D2               	clrf	main@toggled_backlight^(0+384)
  1374  0D84  0AD2               	incf	main@toggled_backlight^(0+384),f
  1375                           
  1376                           ;main.c: 112: }
  1377  0D85  2D8D               	goto	l3152
  1378  0D86                     l43:	
  1379                           
  1380                           ;main.c: 113: else if ( PORTBbits.RB2 == 1 ) {
  1381  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  1382  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  1383  0D88  1D06               	btfss	6,2	;volatile
  1384  0D89  2D8D               	goto	l3152
  1385                           
  1386                           ;main.c: 114: toggled_backlight = 0;
  1387  0D8A  1683               	bsf	3,5	;RP0=1, select bank3
  1388  0D8B  1703               	bsf	3,6	;RP1=1, select bank3
  1389  0D8C  01D2               	clrf	main@toggled_backlight^(0+384)
  1390  0D8D                     l3152:	
  1391                           
  1392                           ;main.c: 115: }
  1393                           ;main.c: 118: if ( PORTBbits.RB3 == 0 ) {
  1394  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  1395  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  1396  0D8F  1986               	btfsc	6,3	;volatile
  1397  0D90  2DA4               	goto	l48
  1398                           
  1399                           ;main.c: 119: do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Write( 
      +                          0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0xF0
      +                          ) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 2 ) { do { LCD_Wr
  1400  0D91  300C               	movlw	12
  1401  0D92  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1402  0D97  3000               	movlw	0
  1403  0D98  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1404                           
  1405                           ;main.c: 120: LCD_putrs(" ***  STAND BY  *** ");
  1406  0D9D  30CB               	movlw	(STR_1-__stringbase)& (0+255)
  1407  0D9E  160A  158A  26BB  120A  158A  	fcall	_LCD_putrs
  1408                           
  1409                           ;main.c: 121: continue;
  1410  0DA3  2D33               	goto	l3124
  1411  0DA4                     l48:	
  1412                           ;main.c: 122: }
  1413                           
  1414                           
  1415                           ;main.c: 123: else if ( PORTBbits.RB4 == 1 ) {
  1416  0DA4  1E06               	btfss	6,4	;volatile
  1417  0DA5  2DDD               	goto	l3180
  1418                           
  1419                           ;main.c: 124: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0
      +                           );
  1420  0DA6  3000               	movlw	0
  1421  0DA7  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1422  0DAC  3001               	movlw	1
  1423  0DAD  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1424                           
  1425                           ;main.c: 125: do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Write( 
      +                          0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0xF0
      +                          ) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 2 ) { do { LCD_Wr
  1426  0DB2  300C               	movlw	12
  1427  0DB3  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1428  0DB8  3000               	movlw	0
  1429  0DB9  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1430                           
  1431                           ;main.c: 126: LCD_putrs("        ****        ");
  1432  0DBE  3077               	movlw	(STR_2-__stringbase)& (0+255)
  1433  0DBF  160A  158A  26BB  120A  158A  	fcall	_LCD_putrs
  1434  0DC4                     l88:	
  1435                           ;main.c: 128: while ( PORTBbits.RB4 == 1 );
  1436                           
  1437  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0DC5  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0DC6  1A06               	btfsc	6,4	;volatile
  1440  0DC7  2DC4               	goto	l88
  1441                           
  1442                           ;main.c: 129: _delay((unsigned long)((1)*(8000000/4000.0)));
  1443  0DC8  3003               	movlw	3
  1444  0DC9  00ED               	movwf	??_main+1
  1445  0DCA  3097               	movlw	151
  1446  0DCB  00EC               	movwf	??_main
  1447  0DCC                     u4817:	
  1448  0DCC  0BEC               	decfsz	??_main,f
  1449  0DCD  2DCC               	goto	u4817
  1450  0DCE  0BED               	decfsz	??_main+1,f
  1451  0DCF  2DCC               	goto	u4817
  1452  0DD0  2DD1               	nop2
  1453                           
  1454                           ;main.c: 130: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0
      +                           );
  1455  0DD1  3000               	movlw	0
  1456  0DD2  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1457  0DD7  3001               	movlw	1
  1458  0DD8  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1459  0DDD                     l3180:	
  1460                           
  1461                           ;main.c: 131: }
  1462                           ;main.c: 134: if ( screen_id == 0 ) {
  1463  0DDD  1683               	bsf	3,5	;RP0=1, select bank3
  1464  0DDE  1703               	bsf	3,6	;RP1=1, select bank3
  1465  0DDF  08DA               	movf	main@screen_id^(0+384),f
  1466  0DE0  1D03               	skipz
  1467  0DE1  2DE5               	goto	l3186
  1468                           
  1469                           ;main.c: 135: start_channel = 0;
  1470  0DE2  01D4               	clrf	main@start_channel^(0+384)
  1471                           
  1472                           ;main.c: 136: stop_channel = 2;
  1473  0DE3  3002               	movlw	2
  1474  0DE4  2DEE               	goto	L1
  1475  0DE5                     l3186:	
  1476                           ;main.c: 137: }
  1477                           
  1478                           
  1479                           ;main.c: 138: else {
  1480                           ;main.c: 139: start_channel = 3;
  1481  0DE5  3003               	movlw	3
  1482  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  1483  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  1484  0DE8  00EC               	movwf	??_main
  1485  0DE9  086C               	movf	??_main,w
  1486  0DEA  1683               	bsf	3,5	;RP0=1, select bank3
  1487  0DEB  1703               	bsf	3,6	;RP1=1, select bank3
  1488  0DEC  00D4               	movwf	main@start_channel^(0+384)
  1489                           
  1490                           ;main.c: 140: stop_channel = 4;
  1491  0DED  3004               	movlw	4
  1492  0DEE                     L1:	
  1493  0DEE  1283               	bcf	3,5	;RP0=0, select bank0
  1494  0DEF  1303               	bcf	3,6	;RP1=0, select bank0
  1495  0DF0  00EC               	movwf	??_main
  1496  0DF1  086C               	movf	??_main,w
  1497  0DF2  1683               	bsf	3,5	;RP0=1, select bank3
  1498  0DF3  1703               	bsf	3,6	;RP1=1, select bank3
  1499  0DF4  00D5               	movwf	main@stop_channel^(0+384)
  1500                           
  1501                           ;main.c: 141: }
  1502                           ;main.c: 143: for ( int i = start_channel; i <= stop_channel; ++i ) {
  1503  0DF5  0854               	movf	main@start_channel^(0+384),w
  1504  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  1506  0DF8  00EC               	movwf	??_main
  1507  0DF9  01ED               	clrf	??_main+1
  1508  0DFA  086C               	movf	??_main,w
  1509  0DFB  1683               	bsf	3,5	;RP0=1, select bank3
  1510  0DFC  1703               	bsf	3,6	;RP1=1, select bank3
  1511  0DFD  00DB               	movwf	main@i^(0+384)
  1512  0DFE  1283               	bcf	3,5	;RP0=0, select bank0
  1513  0DFF  1303               	bcf	3,6	;RP1=0, select bank0
  1514  0E00  086D               	movf	??_main+1,w
  1515  0E01  1683               	bsf	3,5	;RP0=1, select bank3
  1516  0E02  1703               	bsf	3,6	;RP1=1, select bank3
  1517  0E03  00DC               	movwf	(main@i+1)^(0+384)
  1518  0E04                     l3204:	
  1519  0E04  085C               	movf	(main@i+1)^(0+384),w
  1520  0E05  3A80               	xorlw	128
  1521  0E06  3C80               	sublw	128
  1522  0E07  1D03               	skipz
  1523  0E08  2E0B               	goto	u4735
  1524  0E09  085B               	movf	main@i^(0+384),w
  1525  0E0A  0255               	subwf	main@stop_channel^(0+384),w
  1526  0E0B                     u4735:	
  1527  0E0B  1C03               	btfss	3,0
  1528  0E0C  2F34               	goto	l99
  1529                           
  1530                           ;main.c: 144: current[i] = ( 0.0367 * ADC_Read(i, 1000) - 18.644);
  1531  0E0D  3003               	movlw	3
  1532  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  1533  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  1534  0E10  00EC               	movwf	??_main
  1535  0E11  086C               	movf	??_main,w
  1536  0E12  00A4               	movwf	___bmul@multiplicand
  1537  0E13  1683               	bsf	3,5	;RP0=1, select bank3
  1538  0E14  1703               	bsf	3,6	;RP1=1, select bank3
  1539  0E15  085B               	movf	main@i^(0+384),w
  1540  0E16  120A  158A  2004  120A  158A  	fcall	___bmul
  1541  0E1B  3EBD               	addlw	main@current& (0+255)
  1542  0E1C  0084               	movwf	4
  1543  0E1D  3027               	movlw	39
  1544  0E1E  1283               	bcf	3,5	;RP0=0, select bank0
  1545  0E1F  1303               	bcf	3,6	;RP1=0, select bank0
  1546  0E20  00D5               	movwf	___ftadd@f1
  1547  0E21  3095               	movlw	149
  1548  0E22  00D6               	movwf	___ftadd@f1+1
  1549  0E23  30C1               	movlw	193
  1550  0E24  00D7               	movwf	___ftadd@f1+2
  1551  0E25  3053               	movlw	83
  1552  0E26  00B5               	movwf	___ftmul@f1
  1553  0E27  3016               	movlw	22
  1554  0E28  00B6               	movwf	___ftmul@f1+1
  1555  0E29  303D               	movlw	61
  1556  0E2A  00B7               	movwf	___ftmul@f1+2
  1557  0E2B  30E8               	movlw	232
  1558  0E2C  00A0               	movwf	ADC_Read@samples
  1559  0E2D  3003               	movlw	3
  1560  0E2E  00A1               	movwf	ADC_Read@samples+1
  1561  0E2F  1683               	bsf	3,5	;RP0=1, select bank3
  1562  0E30  1703               	bsf	3,6	;RP1=1, select bank3
  1563  0E31  085B               	movf	main@i^(0+384),w
  1564  0E32  160A  118A  229B  120A  158A  	fcall	_ADC_Read
  1565  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  1566  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  1567  0E39  0823               	movf	?_ADC_Read+3,w
  1568  0E3A  00B2               	movwf	___lltoft@c+3
  1569  0E3B  0822               	movf	?_ADC_Read+2,w
  1570  0E3C  00B1               	movwf	___lltoft@c+2
  1571  0E3D  0821               	movf	?_ADC_Read+1,w
  1572  0E3E  00B0               	movwf	___lltoft@c+1
  1573  0E3F  0820               	movf	?_ADC_Read,w
  1574  0E40  00AF               	movwf	___lltoft@c
  1575  0E41  160A  158A  26DD  120A  158A  	fcall	___lltoft
  1576  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  1577  0E47  1303               	bcf	3,6	;RP1=0, select bank0
  1578  0E48  082F               	movf	?___lltoft,w
  1579  0E49  00B8               	movwf	___ftmul@f2
  1580  0E4A  0830               	movf	?___lltoft+1,w
  1581  0E4B  00B9               	movwf	___ftmul@f2+1
  1582  0E4C  0831               	movf	?___lltoft+2,w
  1583  0E4D  00BA               	movwf	___ftmul@f2+2
  1584  0E4E  120A  118A  2009  120A  158A  	fcall	___ftmul
  1585  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  1586  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  1587  0E55  0835               	movf	?___ftmul,w
  1588  0E56  00D8               	movwf	___ftadd@f2
  1589  0E57  0836               	movf	?___ftmul+1,w
  1590  0E58  00D9               	movwf	___ftadd@f2+1
  1591  0E59  0837               	movf	?___ftmul+2,w
  1592  0E5A  00DA               	movwf	___ftadd@f2+2
  1593  0E5B  160A  118A  25C5  120A  158A  	fcall	___ftadd
  1594  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  1595  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  1596  0E62  0855               	movf	?___ftadd,w
  1597  0E63  1783               	bsf	3,7	;select IRP bank3
  1598  0E64  0080               	movwf	0
  1599  0E65  0A84               	incf	4,f
  1600  0E66  0856               	movf	?___ftadd+1,w
  1601  0E67  0080               	movwf	0
  1602  0E68  0A84               	incf	4,f
  1603  0E69  0857               	movf	?___ftadd+2,w
  1604  0E6A  0080               	movwf	0
  1605                           
  1606                           ;main.c: 146: if ( current[i] >= 0 ) {
  1607  0E6B  3003               	movlw	3
  1608  0E6C  00EC               	movwf	??_main
  1609  0E6D  086C               	movf	??_main,w
  1610  0E6E  00A4               	movwf	___bmul@multiplicand
  1611  0E6F  1683               	bsf	3,5	;RP0=1, select bank3
  1612  0E70  1703               	bsf	3,6	;RP1=1, select bank3
  1613  0E71  085B               	movf	main@i^(0+384),w
  1614  0E72  120A  158A  2004  120A  158A  	fcall	___bmul
  1615  0E77  3EBD               	addlw	main@current& (0+255)
  1616  0E78  0084               	movwf	4
  1617  0E79  1783               	bsf	3,7	;select IRP bank3
  1618  0E7A  0800               	movf	0,w
  1619  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  1620  0E7C  1303               	bcf	3,6	;RP1=0, select bank0
  1621  0E7D  00A7               	movwf	___ftge@ff1
  1622  0E7E  0A84               	incf	4,f
  1623  0E7F  0800               	movf	0,w
  1624  0E80  00A8               	movwf	___ftge@ff1+1
  1625  0E81  0A84               	incf	4,f
  1626  0E82  0800               	movf	0,w
  1627  0E83  00A9               	movwf	___ftge@ff1+2
  1628  0E84  3000               	movlw	0
  1629  0E85  00AA               	movwf	___ftge@ff2
  1630  0E86  3000               	movlw	0
  1631  0E87  00AB               	movwf	___ftge@ff2+1
  1632  0E88  3000               	movlw	0
  1633  0E89  00AC               	movwf	___ftge@ff2+2
  1634  0E8A  160A  118A  21D4  120A  158A  	fcall	___ftge
  1635  0E8F  1C03               	btfss	3,0
  1636  0E90  2EDA               	goto	l3196
  1637                           
  1638                           ;main.c: 147: current_str[i][0] = ' ';
  1639  0E91  3020               	movlw	32
  1640  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  1641  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  1642  0E94  00EC               	movwf	??_main
  1643  0E95  3009               	movlw	9
  1644  0E96  00ED               	movwf	??_main+1
  1645  0E97  086D               	movf	??_main+1,w
  1646  0E98  00A4               	movwf	___bmul@multiplicand
  1647  0E99  1683               	bsf	3,5	;RP0=1, select bank3
  1648  0E9A  1703               	bsf	3,6	;RP1=1, select bank3
  1649  0E9B  085B               	movf	main@i^(0+384),w
  1650  0E9C  120A  158A  2004  120A  158A  	fcall	___bmul
  1651  0EA1  3E90               	addlw	main@current_str& (0+255)
  1652  0EA2  0084               	movwf	4
  1653  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  1654  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  1655  0EA5  086C               	movf	??_main,w
  1656  0EA6  1783               	bsf	3,7	;select IRP bank3
  1657  0EA7  0080               	movwf	0
  1658                           
  1659                           ;main.c: 148: sprintf(&current_str[i][1], "%6.3fA", current[i]);
  1660  0EA8  3003               	movlw	3
  1661  0EA9  00EC               	movwf	??_main
  1662  0EAA  086C               	movf	??_main,w
  1663  0EAB  00A4               	movwf	___bmul@multiplicand
  1664  0EAC  1683               	bsf	3,5	;RP0=1, select bank3
  1665  0EAD  1703               	bsf	3,6	;RP1=1, select bank3
  1666  0EAE  085B               	movf	main@i^(0+384),w
  1667  0EAF  120A  158A  2004  120A  158A  	fcall	___bmul
  1668  0EB4  3EBD               	addlw	main@current& (0+255)
  1669  0EB5  0084               	movwf	4
  1670  0EB6  1783               	bsf	3,7	;select IRP bank3
  1671  0EB7  0800               	movf	0,w
  1672  0EB8  1683               	bsf	3,5	;RP0=1, select bank3
  1673  0EB9  1703               	bsf	3,6	;RP1=1, select bank3
  1674  0EBA  00D6               	movwf	_main$877^(0+384)
  1675  0EBB  0A84               	incf	4,f
  1676  0EBC  0800               	movf	0,w
  1677  0EBD  00D7               	movwf	(_main$877+1)^(0+384)
  1678  0EBE  0A84               	incf	4,f
  1679  0EBF  0800               	movf	0,w
  1680  0EC0  00D8               	movwf	(_main$877+2)^(0+384)
  1681                           
  1682                           ;main.c: 148: sprintf(&current_str[i][1], "%6.3fA", current[i]);
  1683  0EC1  3009               	movlw	9
  1684  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  1685  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  1686  0EC4  00EC               	movwf	??_main
  1687  0EC5  086C               	movf	??_main,w
  1688  0EC6  00A4               	movwf	___bmul@multiplicand
  1689  0EC7  1683               	bsf	3,5	;RP0=1, select bank3
  1690  0EC8  1703               	bsf	3,6	;RP1=1, select bank3
  1691  0EC9  085B               	movf	main@i^(0+384),w
  1692  0ECA  120A  158A  2004  120A  158A  	fcall	___bmul
  1693  0ECF  3E01               	addlw	1
  1694  0ED0  3E90               	addlw	main@current_str& (0+255)
  1695  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0ED3  00ED               	movwf	??_main+1
  1698  0ED4  086D               	movf	??_main+1,w
  1699  0ED5  1683               	bsf	3,5	;RP0=1, select bank3
  1700  0ED6  1703               	bsf	3,6	;RP1=1, select bank3
  1701  0ED7  00D9               	movwf	_main$878^(0+384)
  1702                           
  1703                           ;main.c: 148: sprintf(&current_str[i][1], "%6.3fA", current[i]);
  1704  0ED8  30E0               	movlw	(STR_3-__stringbase)& (0+255)
  1705  0ED9  2F0C               	goto	L2
  1706  0EDA                     l3196:	
  1707                           ;main.c: 149: }
  1708                           
  1709                           
  1710                           ;main.c: 150: else {
  1711                           ;main.c: 151: sprintf(current_str[i], "%7.3fA", current[i]);
  1712  0EDA  3003               	movlw	3
  1713  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  1715  0EDD  00EC               	movwf	??_main
  1716  0EDE  086C               	movf	??_main,w
  1717  0EDF  00A4               	movwf	___bmul@multiplicand
  1718  0EE0  1683               	bsf	3,5	;RP0=1, select bank3
  1719  0EE1  1703               	bsf	3,6	;RP1=1, select bank3
  1720  0EE2  085B               	movf	main@i^(0+384),w
  1721  0EE3  120A  158A  2004  120A  158A  	fcall	___bmul
  1722  0EE8  3EBD               	addlw	main@current& (0+255)
  1723  0EE9  0084               	movwf	4
  1724  0EEA  1783               	bsf	3,7	;select IRP bank3
  1725  0EEB  0800               	movf	0,w
  1726  0EEC  1683               	bsf	3,5	;RP0=1, select bank3
  1727  0EED  1703               	bsf	3,6	;RP1=1, select bank3
  1728  0EEE  00D6               	movwf	_main$877^(0+384)
  1729  0EEF  0A84               	incf	4,f
  1730  0EF0  0800               	movf	0,w
  1731  0EF1  00D7               	movwf	(_main$877+1)^(0+384)
  1732  0EF2  0A84               	incf	4,f
  1733  0EF3  0800               	movf	0,w
  1734  0EF4  00D8               	movwf	(_main$877+2)^(0+384)
  1735                           
  1736                           ;main.c: 150: else {
  1737                           ;main.c: 151: sprintf(current_str[i], "%7.3fA", current[i]);
  1738  0EF5  3009               	movlw	9
  1739  0EF6  1283               	bcf	3,5	;RP0=0, select bank0
  1740  0EF7  1303               	bcf	3,6	;RP1=0, select bank0
  1741  0EF8  00EC               	movwf	??_main
  1742  0EF9  086C               	movf	??_main,w
  1743  0EFA  00A4               	movwf	___bmul@multiplicand
  1744  0EFB  1683               	bsf	3,5	;RP0=1, select bank3
  1745  0EFC  1703               	bsf	3,6	;RP1=1, select bank3
  1746  0EFD  085B               	movf	main@i^(0+384),w
  1747  0EFE  120A  158A  2004  120A  158A  	fcall	___bmul
  1748  0F03  3E90               	addlw	main@current_str& (0+255)
  1749  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  1750  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  1751  0F06  00ED               	movwf	??_main+1
  1752  0F07  086D               	movf	??_main+1,w
  1753  0F08  1683               	bsf	3,5	;RP0=1, select bank3
  1754  0F09  1703               	bsf	3,6	;RP1=1, select bank3
  1755  0F0A  00D9               	movwf	_main$878^(0+384)
  1756                           
  1757                           ;main.c: 150: else {
  1758                           ;main.c: 151: sprintf(current_str[i], "%7.3fA", current[i]);
  1759  0F0B  30E7               	movlw	(STR_4-__stringbase)& (0+255)
  1760  0F0C                     L2:	
  1761  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  1762  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  1763  0F0E  00EC               	movwf	??_main
  1764  0F0F  086C               	movf	??_main,w
  1765  0F10  00E8               	movwf	sprintf@f
  1766  0F11  1683               	bsf	3,5	;RP0=1, select bank3
  1767  0F12  1703               	bsf	3,6	;RP1=1, select bank3
  1768  0F13  0856               	movf	_main$877^(0+384),w
  1769  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  1770  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  1771  0F16  00E9               	movwf	?_sprintf+1
  1772  0F17  1683               	bsf	3,5	;RP0=1, select bank3
  1773  0F18  1703               	bsf	3,6	;RP1=1, select bank3
  1774  0F19  0857               	movf	(_main$877+1)^(0+384),w
  1775  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  1776  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  1777  0F1C  00EA               	movwf	?_sprintf+2
  1778  0F1D  1683               	bsf	3,5	;RP0=1, select bank3
  1779  0F1E  1703               	bsf	3,6	;RP1=1, select bank3
  1780  0F1F  0858               	movf	(_main$877+2)^(0+384),w
  1781  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  1782  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  1783  0F22  00EB               	movwf	?_sprintf+3
  1784  0F23  1683               	bsf	3,5	;RP0=1, select bank3
  1785  0F24  1703               	bsf	3,6	;RP1=1, select bank3
  1786  0F25  0859               	movf	_main$878^(0+384),w
  1787  0F26  120A  118A  20DC  120A  158A  	fcall	_sprintf
  1788  0F2B  3001               	movlw	1
  1789  0F2C  1683               	bsf	3,5	;RP0=1, select bank3
  1790  0F2D  1703               	bsf	3,6	;RP1=1, select bank3
  1791  0F2E  07DB               	addwf	main@i^(0+384),f
  1792  0F2F  1803               	skipnc
  1793  0F30  0ADC               	incf	(main@i+1)^(0+384),f
  1794  0F31  3000               	movlw	0
  1795  0F32  07DC               	addwf	(main@i+1)^(0+384),f
  1796  0F33  2E04               	goto	l3204
  1797  0F34                     l99:	
  1798                           
  1799                           ;main.c: 152: }
  1800                           ;main.c: 153: }
  1801                           ;main.c: 157: if ( PORTBbits.RB1 == 0 && toggled_screen == 0 ) {
  1802  0F34  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0F35  1303               	bcf	3,6	;RP1=0, select bank0
  1804  0F36  1886               	btfsc	6,1	;volatile
  1805  0F37  2F62               	goto	l100
  1806  0F38  1683               	bsf	3,5	;RP0=1, select bank3
  1807  0F39  1703               	bsf	3,6	;RP1=1, select bank3
  1808  0F3A  08D1               	movf	main@toggled_screen^(0+384),f
  1809  0F3B  1D03               	skipz
  1810  0F3C  2F62               	goto	l100
  1811                           
  1812                           ;main.c: 158: _delay((unsigned long)((1)*(8000000/4000.0)));
  1813  0F3D  3003               	movlw	3
  1814  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  1815  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  1816  0F40  00ED               	movwf	??_main+1
  1817  0F41  3097               	movlw	151
  1818  0F42  00EC               	movwf	??_main
  1819  0F43                     u4827:	
  1820  0F43  0BEC               	decfsz	??_main,f
  1821  0F44  2F43               	goto	u4827
  1822  0F45  0BED               	decfsz	??_main+1,f
  1823  0F46  2F43               	goto	u4827
  1824  0F47  2F48               	nop2
  1825                           
  1826                           ;main.c: 160: if ( screen_id == 0 ) {
  1827  0F48  1683               	bsf	3,5	;RP0=1, select bank3
  1828  0F49  1703               	bsf	3,6	;RP1=1, select bank3
  1829  0F4A  08DA               	movf	main@screen_id^(0+384),f
  1830  0F4B  1D03               	skipz
  1831  0F4C  2F50               	goto	l3214
  1832                           
  1833                           ;main.c: 161: screen_id = 1;
  1834  0F4D  01DA               	clrf	main@screen_id^(0+384)
  1835  0F4E  0ADA               	incf	main@screen_id^(0+384),f
  1836                           
  1837                           ;main.c: 162: }
  1838  0F4F  2F51               	goto	l3216
  1839  0F50                     l3214:	
  1840                           
  1841                           ;main.c: 163: else {
  1842                           ;main.c: 164: screen_id = 0;
  1843  0F50  01DA               	clrf	main@screen_id^(0+384)
  1844  0F51                     l3216:	
  1845                           ;main.c: 165: }
  1846                           ;main.c: 167: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0
      +                           );
  1847                           
  1848  0F51  3000               	movlw	0
  1849  0F52  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1850  0F57  3001               	movlw	1
  1851  0F58  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1852                           
  1853                           ;main.c: 168: toggled_screen = 1;
  1854  0F5D  1683               	bsf	3,5	;RP0=1, select bank3
  1855  0F5E  1703               	bsf	3,6	;RP1=1, select bank3
  1856  0F5F  01D1               	clrf	main@toggled_screen^(0+384)
  1857  0F60  0AD1               	incf	main@toggled_screen^(0+384),f
  1858                           
  1859                           ;main.c: 169: }
  1860  0F61  2F69               	goto	l3224
  1861  0F62                     l100:	
  1862                           
  1863                           ;main.c: 170: else if ( PORTBbits.RB1 == 1 ) {
  1864  0F62  1283               	bcf	3,5	;RP0=0, select bank0
  1865  0F63  1303               	bcf	3,6	;RP1=0, select bank0
  1866  0F64  1C86               	btfss	6,1	;volatile
  1867  0F65  2F69               	goto	l3224
  1868                           
  1869                           ;main.c: 171: toggled_screen = 0;
  1870  0F66  1683               	bsf	3,5	;RP0=1, select bank3
  1871  0F67  1703               	bsf	3,6	;RP1=1, select bank3
  1872  0F68  01D1               	clrf	main@toggled_screen^(0+384)
  1873  0F69                     l3224:	
  1874                           ;main.c: 172: }
  1875                           ;main.c: 175: do { if ( screen_id == 0 ) { do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 
      +                          0 & 0xF0) >> 4 ); LCD_Write( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do 
      +                          { LCD_Write( (0xC0 + 0 & 0xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } els
  1876                           
  1877  0F69  1683               	bsf	3,5	;RP0=1, select bank3
  1878  0F6A  1703               	bsf	3,6	;RP1=1, select bank3
  1879  0F6B  08DA               	movf	main@screen_id^(0+384),f
  1880  0F6C  1D03               	skipz
  1881  0F6D  2FC9               	goto	l3268
  1882  0F6E  3008               	movlw	8
  1883  0F6F  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1884  0F74  3000               	movlw	0
  1885  0F75  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1886  0F7A  30A1               	movlw	(STR_5-__stringbase)& (0+255)
  1887  0F7B  160A  158A  26BB  120A  158A  	fcall	_LCD_putrs
  1888  0F80  300C               	movlw	12
  1889  0F81  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1890  0F86  3000               	movlw	0
  1891  0F87  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1892  0F8C  3090               	movlw	main@current_str& (0+255)
  1893  0F8D  160A  158A  269C  120A  158A  	fcall	_LCD_puts
  1894  0F92  300C               	movlw	12
  1895  0F93  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1896  0F98  300A               	movlw	10
  1897  0F99  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1898  0F9E  3099               	movlw	(main@current_str+9)& (0+255)
  1899  0F9F  160A  158A  269C  120A  158A  	fcall	_LCD_puts
  1900  0FA4  3009               	movlw	9
  1901  0FA5  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1902  0FAA  3004               	movlw	4
  1903  0FAB  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1904  0FB0  308C               	movlw	(STR_6-__stringbase)& (0+255)
  1905  0FB1  160A  158A  26BB  120A  158A  	fcall	_LCD_putrs
  1906  0FB6  300D               	movlw	13
  1907  0FB7  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1908  0FBC  3009               	movlw	9
  1909  0FBD  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1910  0FC2  30A2               	movlw	(main@current_str+18)& (0+255)
  1911  0FC3  160A  158A  269C  120A  158A  	fcall	_LCD_puts
  1912  0FC8  2D33               	goto	l3124
  1913  0FC9                     l3268:	
  1914  0FC9  300C               	movlw	12
  1915  0FCA  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1916  0FCF  3000               	movlw	0
  1917  0FD0  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1918  0FD5  30B6               	movlw	(STR_7-__stringbase)& (0+255)
  1919  0FD6  160A  158A  26BB  120A  158A  	fcall	_LCD_putrs
  1920  0FDB  3009               	movlw	9
  1921  0FDC  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1922  0FE1  3004               	movlw	4
  1923  0FE2  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1924  0FE7  30AB               	movlw	(main@current_str+27)& (0+255)
  1925  0FE8  160A  158A  269C  120A  158A  	fcall	_LCD_puts
  1926  0FED  3009               	movlw	9
  1927  0FEE  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1928  0FF3  300E               	movlw	14
  1929  0FF4  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  1930  0FF9  30B4               	movlw	(main@current_str+36)& (0+255)
  1931  0FFA  160A  158A  269C  120A  158A  	fcall	_LCD_puts
  1932                           
  1933                           ;main.c: 177: }
  1934  0FFF  2D33               	goto	l3124
  1935  1000                     __end_of_main:	
  1936                           ;main.c: 179: return (0);
  1937                           ;	Return value of _main is never used
  1938                           
  1939                           
  1940                           	psect	text1
  1941  00DC                     __ptext1:	
  1942 ;; *************** function _sprintf *****************
  1943 ;; Defined at:
  1944 ;;		line 492 in file "/opt/microchip/xc8/v1.33/sources/common/doprnt.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  sp              1    wreg     PTR unsigned char 
  1947 ;;		 -> main@current_str(45), 
  1948 ;;  f               1   72[BANK0 ] PTR const unsigned char 
  1949 ;;		 -> STR_4(7), STR_3(7), 
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  sp              1   38[BANK1 ] PTR unsigned char 
  1952 ;;		 -> main@current_str(45), 
  1953 ;;  vd              4   14[BANK1 ] unsigned long 
  1954 ;;  vd              4   18[BANK1 ] unsigned long 
  1955 ;;  _val            4   25[BANK1 ] struct .
  1956 ;;  fval            3   35[BANK1 ] struct .
  1957 ;;  integ           3   22[BANK1 ] struct .
  1958 ;;  ival            3    0        struct .
  1959 ;;  prec            2   39[BANK1 ] int 
  1960 ;;  exp             2   33[BANK1 ] int 
  1961 ;;  width           2   31[BANK1 ] int 
  1962 ;;  flag            2   29[BANK1 ] unsigned short 
  1963 ;;  c               1   41[BANK1 ] char 
  1964 ;;  ap              1   13[BANK1 ] PTR void [1]
  1965 ;;		 -> ?_sprintf(2), 
  1966 ;;  d               1    0        unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  2   72[BANK0 ] int 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1976 ;;      Params:         0       4       0       0       0
  1977 ;;      Locals:         0       0      36       0       0
  1978 ;;      Temps:          0       0       6       0       0
  1979 ;;      Totals:         0       4      42       0       0
  1980 ;;Total ram usage:       46 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    3
  1983 ;; This function calls:
  1984 ;;		___awdiv
  1985 ;;		___ftadd
  1986 ;;		___ftge
  1987 ;;		___ftmul
  1988 ;;		___ftneg
  1989 ;;		___ftsub
  1990 ;;		___fttol
  1991 ;;		___lldiv
  1992 ;;		___llmod
  1993 ;;		___lltoft
  1994 ;;		___wmul
  1995 ;;		__div_to_l_
  1996 ;;		__tdiv_to_l_
  1997 ;;		_fround
  1998 ;;		_isdigit
  1999 ;;		_scale
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           
  2006                           ;psect for function _sprintf
  2007  00DC                     _sprintf:	
  2008                           
  2009                           ;incstack = 0
  2010                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2011                           ;sprintf@sp stored from wreg
  2012  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  2013  00DD  1303               	bcf	3,6	;RP1=0, select bank1
  2014  00DE  00C6               	movwf	sprintf@sp^(0+128)
  2015                           
  2016                           ;doprnt.c: 494: va_list ap;
  2017                           ;doprnt.c: 499: signed char c;
  2018                           ;doprnt.c: 501: int width;
  2019                           ;doprnt.c: 504: int prec;
  2020                           ;doprnt.c: 508: unsigned short flag;
  2021                           ;doprnt.c: 515: char d;
  2022                           ;doprnt.c: 516: double fval, integ;
  2023                           ;doprnt.c: 517: int exp;
  2024                           ;doprnt.c: 518: double ival;
  2025                           ;doprnt.c: 519: union {
  2026                           ;doprnt.c: 520: unsigned long _val;
  2027                           ;doprnt.c: 521: struct {
  2028                           ;doprnt.c: 522: const char * _cp;
  2029                           ;doprnt.c: 523: unsigned _len;
  2030                           ;doprnt.c: 524: } _str;
  2031                           ;doprnt.c: 525: } _val;
  2032                           ;doprnt.c: 542: *ap = __va_start();
  2033  00DF  3069               	movlw	(?_sprintf+1)& (0+255)
  2034  00E0  00A0               	movwf	??_sprintf^(0+128)
  2035  00E1  0820               	movf	??_sprintf^(0+128),w
  2036  00E2  00AD               	movwf	sprintf@ap^(0+128)
  2037  00E3                     l3100:	
  2038                           ;doprnt.c: 545: while(c = *f++) {
  2039                           
  2040  00E3  3001               	movlw	1
  2041  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  2042  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  2043  00E6  07E8               	addwf	sprintf@f,f
  2044  00E7  30FF               	movlw	-1
  2045  00E8  0768               	addwf	sprintf@f,w
  2046  00E9  0084               	movwf	4
  2047  00EA  160A  118A  2000  120A  118A  	fcall	stringdir
  2048  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  2049  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  2050  00F1  00A0               	movwf	??_sprintf^(0+128)
  2051  00F2  0820               	movf	??_sprintf^(0+128),w
  2052  00F3  00C9               	movwf	sprintf@c^(0+128)
  2053  00F4  08C9               	movf	sprintf@c^(0+128),f
  2054  00F5  1903               	btfsc	3,2
  2055  00F6  2FD9               	goto	l3102
  2056                           
  2057                           ;doprnt.c: 547: if(c != '%')
  2058  00F7  0849               	movf	sprintf@c^(0+128),w
  2059  00F8  3A25               	xorlw	37
  2060  00F9  1903               	skipnz
  2061  00FA  28FD               	goto	l2860
  2062                           
  2063                           ;doprnt.c: 549: {
  2064                           ;doprnt.c: 550: ((*sp++ = (c)));
  2065  00FB  0849               	movf	sprintf@c^(0+128),w
  2066  00FC  2FCE               	goto	L8
  2067  00FD                     l2860:	
  2068                           ;doprnt.c: 551: continue;
  2069                           
  2070                           
  2071                           ;doprnt.c: 552: }
  2072                           ;doprnt.c: 555: width = 0;
  2073  00FD  01BF               	clrf	sprintf@width^(0+128)
  2074  00FE  01C0               	clrf	(sprintf@width+1)^(0+128)
  2075                           
  2076                           ;doprnt.c: 557: flag = 0;
  2077  00FF  01BD               	clrf	sprintf@flag^(0+128)
  2078  0100  01BE               	clrf	(sprintf@flag+1)^(0+128)
  2079                           
  2080                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2081  0101  1283               	bcf	3,5	;RP0=0, select bank0
  2082  0102  1303               	bcf	3,6	;RP1=0, select bank0
  2083  0103  0868               	movf	sprintf@f,w
  2084  0104  0084               	movwf	4
  2085  0105  160A  118A  2000  120A  118A  	fcall	stringdir
  2086  010A  160A  158A  2653  120A  118A  	fcall	_isdigit
  2087  010F  1C03               	btfss	3,0
  2088  0110  2959               	goto	l2874
  2089                           
  2090                           ;doprnt.c: 607: width = 0;
  2091  0111  1683               	bsf	3,5	;RP0=1, select bank1
  2092  0112  1303               	bcf	3,6	;RP1=0, select bank1
  2093  0113  01BF               	clrf	sprintf@width^(0+128)
  2094  0114  01C0               	clrf	(sprintf@width+1)^(0+128)
  2095  0115                     l2866:	
  2096                           ;doprnt.c: 608: do {
  2097                           
  2098                           
  2099                           ;doprnt.c: 609: width *= 10;
  2100  0115  300A               	movlw	10
  2101  0116  00F0               	movwf	___wmul@multiplier
  2102  0117  3000               	movlw	0
  2103  0118  00F1               	movwf	___wmul@multiplier+1
  2104  0119  1683               	bsf	3,5	;RP0=1, select bank1
  2105  011A  1303               	bcf	3,6	;RP1=0, select bank1
  2106  011B  0840               	movf	(sprintf@width+1)^(0+128),w
  2107  011C  01F3               	clrf	___wmul@multiplicand+1
  2108  011D  07F3               	addwf	___wmul@multiplicand+1,f
  2109  011E  083F               	movf	sprintf@width^(0+128),w
  2110  011F  01F2               	clrf	___wmul@multiplicand
  2111  0120  07F2               	addwf	___wmul@multiplicand,f
  2112  0121  160A  118A  20F6  120A  118A  	fcall	___wmul
  2113  0126  0871               	movf	?___wmul+1,w
  2114  0127  1683               	bsf	3,5	;RP0=1, select bank1
  2115  0128  1303               	bcf	3,6	;RP1=0, select bank1
  2116  0129  01C0               	clrf	(sprintf@width+1)^(0+128)
  2117  012A  07C0               	addwf	(sprintf@width+1)^(0+128),f
  2118  012B  0870               	movf	?___wmul,w
  2119  012C  01BF               	clrf	sprintf@width^(0+128)
  2120  012D  07BF               	addwf	sprintf@width^(0+128),f
  2121                           
  2122                           ;doprnt.c: 610: width += *f++ - '0';
  2123  012E  1283               	bcf	3,5	;RP0=0, select bank0
  2124  012F  1303               	bcf	3,6	;RP1=0, select bank0
  2125  0130  0868               	movf	sprintf@f,w
  2126  0131  0084               	movwf	4
  2127  0132  160A  118A  2000  120A  118A  	fcall	stringdir
  2128  0137  3ED0               	addlw	208
  2129  0138  1683               	bsf	3,5	;RP0=1, select bank1
  2130  0139  1303               	bcf	3,6	;RP1=0, select bank1
  2131  013A  00A0               	movwf	??_sprintf^(0+128)
  2132  013B  30FF               	movlw	255
  2133  013C  1803               	skipnc
  2134  013D  3000               	movlw	0
  2135  013E  00A1               	movwf	(??_sprintf^(0+128)+1)
  2136  013F  0820               	movf	??_sprintf^(0+128),w
  2137  0140  07BF               	addwf	sprintf@width^(0+128),f
  2138  0141  1803               	skipnc
  2139  0142  0AC0               	incf	(sprintf@width+1)^(0+128),f
  2140  0143  0821               	movf	(??_sprintf+1)^(0+128),w
  2141  0144  07C0               	addwf	(sprintf@width+1)^(0+128),f
  2142  0145  3001               	movlw	1
  2143  0146  00A0               	movwf	??_sprintf^(0+128)
  2144  0147  0820               	movf	??_sprintf^(0+128),w
  2145  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2146  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2147  014A  07E8               	addwf	sprintf@f,f
  2148                           
  2149                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2150  014B  0868               	movf	sprintf@f,w
  2151  014C  0084               	movwf	4
  2152  014D  160A  118A  2000  120A  118A  	fcall	stringdir
  2153  0152  160A  158A  2653  120A  118A  	fcall	_isdigit
  2154  0157  1803               	btfsc	3,0
  2155  0158  2915               	goto	l2866
  2156  0159                     l2874:	
  2157                           
  2158                           ;doprnt.c: 617: }
  2159                           ;doprnt.c: 620: if(*f == '.') {
  2160  0159  1283               	bcf	3,5	;RP0=0, select bank0
  2161  015A  1303               	bcf	3,6	;RP1=0, select bank0
  2162  015B  0868               	movf	sprintf@f,w
  2163  015C  0084               	movwf	4
  2164  015D  160A  118A  2000  120A  118A  	fcall	stringdir
  2165  0162  3A2E               	xorlw	46
  2166  0163  1D03               	skipz
  2167  0164  29B3               	goto	l2888
  2168                           
  2169                           ;doprnt.c: 621: flag |= 0x4000;
  2170  0165  1683               	bsf	3,5	;RP0=1, select bank1
  2171  0166  1303               	bcf	3,6	;RP1=0, select bank1
  2172  0167  173E               	bsf	(sprintf@flag^(0+128)+1),6
  2173                           
  2174                           ;doprnt.c: 622: f++;
  2175  0168  3001               	movlw	1
  2176  0169  00A0               	movwf	??_sprintf^(0+128)
  2177  016A  0820               	movf	??_sprintf^(0+128),w
  2178  016B  1283               	bcf	3,5	;RP0=0, select bank0
  2179  016C  1303               	bcf	3,6	;RP1=0, select bank0
  2180  016D  07E8               	addwf	sprintf@f,f
  2181                           
  2182                           ;doprnt.c: 629: {
  2183                           ;doprnt.c: 630: prec = 0;
  2184  016E  1683               	bsf	3,5	;RP0=1, select bank1
  2185  016F  1303               	bcf	3,6	;RP1=0, select bank1
  2186  0170  01C7               	clrf	sprintf@prec^(0+128)
  2187  0171  01C8               	clrf	(sprintf@prec+1)^(0+128)
  2188  0172                     l2886:	
  2189                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  2190                           
  2191  0172  1283               	bcf	3,5	;RP0=0, select bank0
  2192  0173  0868               	movf	sprintf@f,w
  2193  0174  0084               	movwf	4
  2194  0175  160A  118A  2000  120A  118A  	fcall	stringdir
  2195  017A  160A  158A  2653  120A  118A  	fcall	_isdigit
  2196  017F  1C03               	btfss	3,0
  2197  0180  29BB               	goto	l2894
  2198                           
  2199                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  2200  0181  1683               	bsf	3,5	;RP0=1, select bank1
  2201  0182  1303               	bcf	3,6	;RP1=0, select bank1
  2202  0183  0848               	movf	(sprintf@prec+1)^(0+128),w
  2203  0184  01F1               	clrf	___wmul@multiplier+1
  2204  0185  07F1               	addwf	___wmul@multiplier+1,f
  2205  0186  0847               	movf	sprintf@prec^(0+128),w
  2206  0187  01F0               	clrf	___wmul@multiplier
  2207  0188  07F0               	addwf	___wmul@multiplier,f
  2208  0189  300A               	movlw	10
  2209  018A  00F2               	movwf	___wmul@multiplicand
  2210  018B  3000               	movlw	0
  2211  018C  00F3               	movwf	___wmul@multiplicand+1
  2212  018D  160A  118A  20F6  120A  118A  	fcall	___wmul
  2213  0192  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0193  1303               	bcf	3,6	;RP1=0, select bank0
  2215  0194  0868               	movf	sprintf@f,w
  2216  0195  0084               	movwf	4
  2217  0196  160A  118A  2000  120A  118A  	fcall	stringdir
  2218  019B  0770               	addwf	?___wmul,w
  2219  019C  1683               	bsf	3,5	;RP0=1, select bank1
  2220  019D  1303               	bcf	3,6	;RP1=0, select bank1
  2221  019E  00A0               	movwf	??_sprintf^(0+128)
  2222  019F  3000               	movlw	0
  2223  01A0  1803               	skipnc
  2224  01A1  3001               	movlw	1
  2225  01A2  0771               	addwf	?___wmul+1,w
  2226  01A3  00A1               	movwf	(??_sprintf+1)^(0+128)
  2227  01A4  0820               	movf	??_sprintf^(0+128),w
  2228  01A5  3ED0               	addlw	208
  2229  01A6  00C7               	movwf	sprintf@prec^(0+128)
  2230  01A7  0821               	movf	(??_sprintf+1)^(0+128),w
  2231  01A8  1803               	skipnc
  2232  01A9  3E01               	addlw	1
  2233  01AA  3EFF               	addlw	255
  2234  01AB  00C8               	movwf	(sprintf@prec+1)^(0+128)
  2235  01AC  3001               	movlw	1
  2236  01AD  00A0               	movwf	??_sprintf^(0+128)
  2237  01AE  0820               	movf	??_sprintf^(0+128),w
  2238  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  2239  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  2240  01B1  07E8               	addwf	sprintf@f,f
  2241  01B2  2972               	goto	l2886
  2242  01B3                     l2888:	
  2243                           ;doprnt.c: 633: }
  2244                           ;doprnt.c: 634: } else {
  2245                           
  2246                           
  2247                           ;doprnt.c: 635: prec = 0;
  2248  01B3  1683               	bsf	3,5	;RP0=1, select bank1
  2249  01B4  1303               	bcf	3,6	;RP1=0, select bank1
  2250  01B5  01C7               	clrf	sprintf@prec^(0+128)
  2251  01B6  01C8               	clrf	(sprintf@prec+1)^(0+128)
  2252                           
  2253                           ;doprnt.c: 637: flag |= 0x1000;
  2254  01B7  163E               	bsf	(sprintf@flag^(0+128)+1),4
  2255                           
  2256                           ;doprnt.c: 639: }
  2257                           ;doprnt.c: 644: switch(c = *f++) {
  2258  01B8  29BB               	goto	l2894
  2259  01B9                     l393:	
  2260                           ;doprnt.c: 671: case 'f':
  2261                           
  2262                           ;doprnt.c: 647: goto alldone;
  2263                           
  2264                           ;doprnt.c: 646: case 0:
  2265                           
  2266                           
  2267                           ;doprnt.c: 672: flag |= 0x400;
  2268  01B9  153E               	bsf	(sprintf@flag^(0+128)+1),2
  2269                           
  2270                           ;doprnt.c: 673: break;
  2271  01BA  29D1               	goto	l2896
  2272  01BB                     l2894:	
  2273                           ;doprnt.c: 831: }
  2274                           
  2275                           ;doprnt.c: 822: continue;
  2276                           
  2277                           ;doprnt.c: 811: default:
  2278                           
  2279  01BB  3001               	movlw	1
  2280  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  2281  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  2282  01BE  07E8               	addwf	sprintf@f,f
  2283  01BF  30FF               	movlw	-1
  2284  01C0  0768               	addwf	sprintf@f,w
  2285  01C1  0084               	movwf	4
  2286  01C2  160A  118A  2000  120A  118A  	fcall	stringdir
  2287  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  2288  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  2289  01C9  00C9               	movwf	sprintf@c^(0+128)
  2290                           
  2291                           ; Switch size 1, requested type "space"
  2292                           ; Number of cases is 2, Range of values is 0 to 102
  2293                           ; switch strategies available:
  2294                           ; Name         Instructions Cycles
  2295                           ; simple_byte            7     4 (average)
  2296                           ; jumptable            260     6 (fixed)
  2297                           ;	Chosen strategy is simple_byte
  2298  01CA  3A00               	xorlw	0	; case 0
  2299  01CB  1903               	skipnz
  2300  01CC  2FD9               	goto	l3102
  2301  01CD  3A66               	xorlw	102	; case 102
  2302  01CE  1903               	skipnz
  2303  01CF  29B9               	goto	l393
  2304  01D0  28E3               	goto	l3100
  2305  01D1                     l2896:	
  2306                           
  2307                           ;doprnt.c: 834: if(flag & (0x700)) {
  2308  01D1  3000               	movlw	0
  2309  01D2  053D               	andwf	sprintf@flag^(0+128),w
  2310  01D3  00A0               	movwf	??_sprintf^(0+128)
  2311  01D4  3007               	movlw	7
  2312  01D5  053E               	andwf	(sprintf@flag+1)^(0+128),w
  2313  01D6  00A1               	movwf	(??_sprintf+1)^(0+128)
  2314  01D7  0821               	movf	(??_sprintf+1)^(0+128),w
  2315  01D8  0420               	iorwf	??_sprintf^(0+128),w
  2316  01D9  1903               	skipnz
  2317  01DA  2F14               	goto	l3054
  2318                           
  2319                           ;doprnt.c: 836: if(flag & 0x1000)
  2320  01DB  1E3E               	btfss	(sprintf@flag+1)^(0+128),4
  2321  01DC  29E1               	goto	l2902
  2322                           
  2323                           ;doprnt.c: 838: prec = 6;
  2324  01DD  3006               	movlw	6
  2325  01DE  00C7               	movwf	sprintf@prec^(0+128)
  2326  01DF  3000               	movlw	0
  2327  01E0  00C8               	movwf	(sprintf@prec^(0+128)+1)
  2328  01E1                     l2902:	
  2329                           
  2330                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2331  01E1  082D               	movf	sprintf@ap^(0+128),w
  2332  01E2  0084               	movwf	4
  2333  01E3  1383               	bcf	3,7	;select IRP bank0
  2334  01E4  0800               	movf	0,w
  2335  01E5  00C3               	movwf	sprintf@fval^(0+128)
  2336  01E6  0A84               	incf	4,f
  2337  01E7  0800               	movf	0,w
  2338  01E8  00C4               	movwf	(sprintf@fval+1)^(0+128)
  2339  01E9  0A84               	incf	4,f
  2340  01EA  0800               	movf	0,w
  2341  01EB  00C5               	movwf	(sprintf@fval+2)^(0+128)
  2342  01EC  3003               	movlw	3
  2343  01ED  00A0               	movwf	??_sprintf^(0+128)
  2344  01EE  0820               	movf	??_sprintf^(0+128),w
  2345  01EF  07AD               	addwf	sprintf@ap^(0+128),f
  2346                           
  2347                           ;doprnt.c: 840: if(fval < 0.0) {
  2348  01F0  0843               	movf	sprintf@fval^(0+128),w
  2349  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  2350  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  2351  01F3  00A7               	movwf	___ftge@ff1
  2352  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  2353  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  2354  01F6  0844               	movf	(sprintf@fval+1)^(0+128),w
  2355  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2356  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  2357  01F9  00A8               	movwf	___ftge@ff1+1
  2358  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  2359  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  2360  01FC  0845               	movf	(sprintf@fval+2)^(0+128),w
  2361  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2362  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2363  01FF  00A9               	movwf	___ftge@ff1+2
  2364  0200  3000               	movlw	0
  2365  0201  00AA               	movwf	___ftge@ff2
  2366  0202  3000               	movlw	0
  2367  0203  00AB               	movwf	___ftge@ff2+1
  2368  0204  3000               	movlw	0
  2369  0205  00AC               	movwf	___ftge@ff2+2
  2370  0206  160A  118A  21D4  120A  118A  	fcall	___ftge
  2371  020B  1803               	btfsc	3,0
  2372  020C  2A26               	goto	l2912
  2373                           
  2374                           ;doprnt.c: 841: fval = -fval;
  2375  020D  1683               	bsf	3,5	;RP0=1, select bank1
  2376  020E  1303               	bcf	3,6	;RP1=0, select bank1
  2377  020F  0843               	movf	sprintf@fval^(0+128),w
  2378  0210  00F0               	movwf	___ftneg@f1
  2379  0211  0844               	movf	(sprintf@fval+1)^(0+128),w
  2380  0212  00F1               	movwf	___ftneg@f1+1
  2381  0213  0845               	movf	(sprintf@fval+2)^(0+128),w
  2382  0214  00F2               	movwf	___ftneg@f1+2
  2383  0215  160A  158A  263D  120A  118A  	fcall	___ftneg
  2384  021A  0870               	movf	?___ftneg,w
  2385  021B  1683               	bsf	3,5	;RP0=1, select bank1
  2386  021C  1303               	bcf	3,6	;RP1=0, select bank1
  2387  021D  00C3               	movwf	sprintf@fval^(0+128)
  2388  021E  0871               	movf	?___ftneg+1,w
  2389  021F  00C4               	movwf	(sprintf@fval+1)^(0+128)
  2390  0220  0872               	movf	?___ftneg+2,w
  2391  0221  00C5               	movwf	(sprintf@fval+2)^(0+128)
  2392                           
  2393                           ;doprnt.c: 842: flag |= 0x03;
  2394  0222  3003               	movlw	3
  2395  0223  04BD               	iorwf	sprintf@flag^(0+128),f
  2396  0224  3000               	movlw	0
  2397  0225  04BE               	iorwf	(sprintf@flag+1)^(0+128),f
  2398  0226                     l2912:	
  2399                           
  2400                           ;doprnt.c: 843: }
  2401                           ;doprnt.c: 844: exp = 0;
  2402  0226  1683               	bsf	3,5	;RP0=1, select bank1
  2403  0227  1303               	bcf	3,6	;RP1=0, select bank1
  2404  0228  01C1               	clrf	sprintf@exp^(0+128)
  2405  0229  01C2               	clrf	(sprintf@exp+1)^(0+128)
  2406                           
  2407                           ;doprnt.c: 845: if( fval!=0) {
  2408  022A  0845               	movf	(sprintf@fval+2)^(0+128),w
  2409  022B  0444               	iorwf	(sprintf@fval+1)^(0+128),w
  2410  022C  0443               	iorwf	sprintf@fval^(0+128),w
  2411  022D  1903               	skipnz
  2412  022E  2B2E               	goto	l2940
  2413                           
  2414                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2415  022F  30C3               	movlw	low sprintf@fval
  2416  0230  0084               	movwf	4
  2417  0231  1383               	bcf	3,7	;select IRP bank1
  2418  0232  0800               	movf	0,w
  2419  0233  00A0               	movwf	??_sprintf^(0+128)
  2420  0234  0A84               	incf	4,f
  2421  0235  0800               	movf	0,w
  2422  0236  00A1               	movwf	(??_sprintf^(0+128)+1)
  2423  0237  0A84               	incf	4,f
  2424  0238  0800               	movf	0,w
  2425  0239  00A2               	movwf	(??_sprintf^(0+128)+2)
  2426  023A  0A84               	incf	4,f
  2427  023B  0800               	movf	0,w
  2428  023C  00A3               	movwf	(??_sprintf^(0+128)+3)
  2429  023D  300F               	movlw	15
  2430  023E                     u4195:	
  2431  023E  1003               	clrc
  2432  023F  0CA3               	rrf	(??_sprintf^(0+128)+3),f
  2433  0240  0CA2               	rrf	(??_sprintf^(0+128)+2),f
  2434  0241  0CA1               	rrf	(??_sprintf^(0+128)+1),f
  2435  0242  0CA0               	rrf	??_sprintf^(0+128),f
  2436  0243  3EFF               	addlw	-1
  2437  0244  1D03               	skipz
  2438  0245  2A3E               	goto	u4195
  2439  0246  30FF               	movlw	255
  2440  0247  0520               	andwf	??_sprintf^(0+128),w
  2441  0248  00A4               	movwf	(??_sprintf+4)^(0+128)
  2442  0249  3000               	movlw	0
  2443  024A  0521               	andwf	(??_sprintf+1)^(0+128),w
  2444  024B  00A5               	movwf	(??_sprintf+5)^(0+128)
  2445  024C  0824               	movf	(??_sprintf+4)^(0+128),w
  2446  024D  3E82               	addlw	130
  2447  024E  00C1               	movwf	sprintf@exp^(0+128)
  2448  024F  0825               	movf	(??_sprintf+5)^(0+128),w
  2449  0250  1803               	skipnc
  2450  0251  3E01               	addlw	1
  2451  0252  3EFF               	addlw	255
  2452  0253  00C2               	movwf	(sprintf@exp+1)^(0+128)
  2453                           
  2454                           ;doprnt.c: 847: exp--;
  2455  0254  30FF               	movlw	255
  2456  0255  07C1               	addwf	sprintf@exp^(0+128),f
  2457  0256  1803               	skipnc
  2458  0257  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  2459  0258  30FF               	movlw	255
  2460  0259  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2461                           
  2462                           ;doprnt.c: 848: exp *= 3;
  2463  025A  3003               	movlw	3
  2464  025B  00F0               	movwf	___wmul@multiplier
  2465  025C  3000               	movlw	0
  2466  025D  00F1               	movwf	___wmul@multiplier+1
  2467  025E  0842               	movf	(sprintf@exp+1)^(0+128),w
  2468  025F  01F3               	clrf	___wmul@multiplicand+1
  2469  0260  07F3               	addwf	___wmul@multiplicand+1,f
  2470  0261  0841               	movf	sprintf@exp^(0+128),w
  2471  0262  01F2               	clrf	___wmul@multiplicand
  2472  0263  07F2               	addwf	___wmul@multiplicand,f
  2473  0264  160A  118A  20F6  120A  118A  	fcall	___wmul
  2474  0269  0871               	movf	?___wmul+1,w
  2475  026A  1683               	bsf	3,5	;RP0=1, select bank1
  2476  026B  1303               	bcf	3,6	;RP1=0, select bank1
  2477  026C  01C2               	clrf	(sprintf@exp+1)^(0+128)
  2478  026D  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2479  026E  0870               	movf	?___wmul,w
  2480  026F  01C1               	clrf	sprintf@exp^(0+128)
  2481  0270  07C1               	addwf	sprintf@exp^(0+128),f
  2482                           
  2483                           ;doprnt.c: 849: exp /= 10;
  2484  0271  300A               	movlw	10
  2485  0272  00F7               	movwf	___awdiv@divisor
  2486  0273  3000               	movlw	0
  2487  0274  00F8               	movwf	___awdiv@divisor+1
  2488  0275  0842               	movf	(sprintf@exp+1)^(0+128),w
  2489  0276  01FA               	clrf	___awdiv@dividend+1
  2490  0277  07FA               	addwf	___awdiv@dividend+1,f
  2491  0278  0841               	movf	sprintf@exp^(0+128),w
  2492  0279  01F9               	clrf	___awdiv@dividend
  2493  027A  07F9               	addwf	___awdiv@dividend,f
  2494  027B  160A  118A  2119  120A  118A  	fcall	___awdiv
  2495  0280  0878               	movf	?___awdiv+1,w
  2496  0281  1683               	bsf	3,5	;RP0=1, select bank1
  2497  0282  1303               	bcf	3,6	;RP1=0, select bank1
  2498  0283  01C2               	clrf	(sprintf@exp+1)^(0+128)
  2499  0284  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2500  0285  0877               	movf	?___awdiv,w
  2501  0286  01C1               	clrf	sprintf@exp^(0+128)
  2502  0287  07C1               	addwf	sprintf@exp^(0+128),f
  2503                           
  2504                           ;doprnt.c: 850: if(exp < 0)
  2505  0288  1FC2               	btfss	(sprintf@exp+1)^(0+128),7
  2506  0289  2A90               	goto	l2928
  2507                           
  2508                           ;doprnt.c: 851: exp--;
  2509  028A  30FF               	movlw	255
  2510  028B  07C1               	addwf	sprintf@exp^(0+128),f
  2511  028C  1803               	skipnc
  2512  028D  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  2513  028E  30FF               	movlw	255
  2514  028F  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2515  0290                     l2928:	
  2516                           
  2517                           ;doprnt.c: 855: integ = scale(-exp);
  2518  0290  0341               	decf	sprintf@exp^(0+128),w
  2519  0291  3AFF               	xorlw	255
  2520  0292  120A  158A  225C  120A  118A  	fcall	_scale
  2521  0297  1283               	bcf	3,5	;RP0=0, select bank0
  2522  0298  1303               	bcf	3,6	;RP1=0, select bank0
  2523  0299  0845               	movf	?_scale,w
  2524  029A  1683               	bsf	3,5	;RP0=1, select bank1
  2525  029B  1303               	bcf	3,6	;RP1=0, select bank1
  2526  029C  00B6               	movwf	sprintf@integ^(0+128)
  2527  029D  1283               	bcf	3,5	;RP0=0, select bank0
  2528  029E  1303               	bcf	3,6	;RP1=0, select bank0
  2529  029F  0846               	movf	?_scale+1,w
  2530  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  2531  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  2532  02A2  00B7               	movwf	(sprintf@integ+1)^(0+128)
  2533  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  2534  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  2535  02A5  0847               	movf	?_scale+2,w
  2536  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  2537  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  2538  02A8  00B8               	movwf	(sprintf@integ+2)^(0+128)
  2539                           
  2540                           ;doprnt.c: 856: integ *= fval;
  2541  02A9  0843               	movf	sprintf@fval^(0+128),w
  2542  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2543  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2544  02AC  00B5               	movwf	___ftmul@f1
  2545  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2546  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  2547  02AF  0844               	movf	(sprintf@fval+1)^(0+128),w
  2548  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  2549  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  2550  02B2  00B6               	movwf	___ftmul@f1+1
  2551  02B3  1683               	bsf	3,5	;RP0=1, select bank1
  2552  02B4  1303               	bcf	3,6	;RP1=0, select bank1
  2553  02B5  0845               	movf	(sprintf@fval+2)^(0+128),w
  2554  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  2555  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  2556  02B8  00B7               	movwf	___ftmul@f1+2
  2557  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2558  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  2559  02BB  0836               	movf	sprintf@integ^(0+128),w
  2560  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  2561  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  2562  02BE  00B8               	movwf	___ftmul@f2
  2563  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  2564  02C0  1303               	bcf	3,6	;RP1=0, select bank1
  2565  02C1  0837               	movf	(sprintf@integ+1)^(0+128),w
  2566  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2567  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2568  02C4  00B9               	movwf	___ftmul@f2+1
  2569  02C5  1683               	bsf	3,5	;RP0=1, select bank1
  2570  02C6  1303               	bcf	3,6	;RP1=0, select bank1
  2571  02C7  0838               	movf	(sprintf@integ+2)^(0+128),w
  2572  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  2573  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  2574  02CA  00BA               	movwf	___ftmul@f2+2
  2575  02CB  120A  118A  2009  120A  118A  	fcall	___ftmul
  2576  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2577  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  2578  02D2  0835               	movf	?___ftmul,w
  2579  02D3  1683               	bsf	3,5	;RP0=1, select bank1
  2580  02D4  1303               	bcf	3,6	;RP1=0, select bank1
  2581  02D5  00B6               	movwf	sprintf@integ^(0+128)
  2582  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  2583  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  2584  02D8  0836               	movf	?___ftmul+1,w
  2585  02D9  1683               	bsf	3,5	;RP0=1, select bank1
  2586  02DA  1303               	bcf	3,6	;RP1=0, select bank1
  2587  02DB  00B7               	movwf	(sprintf@integ+1)^(0+128)
  2588  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2589  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2590  02DE  0837               	movf	?___ftmul+2,w
  2591  02DF  1683               	bsf	3,5	;RP0=1, select bank1
  2592  02E0  1303               	bcf	3,6	;RP1=0, select bank1
  2593  02E1  00B8               	movwf	(sprintf@integ+2)^(0+128)
  2594                           
  2595                           ;doprnt.c: 857: if(integ < 1.0)
  2596  02E2  0836               	movf	sprintf@integ^(0+128),w
  2597  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2598  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2599  02E5  00A7               	movwf	___ftge@ff1
  2600  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  2601  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  2602  02E8  0837               	movf	(sprintf@integ+1)^(0+128),w
  2603  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  2604  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  2605  02EB  00A8               	movwf	___ftge@ff1+1
  2606  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  2607  02ED  1303               	bcf	3,6	;RP1=0, select bank1
  2608  02EE  0838               	movf	(sprintf@integ+2)^(0+128),w
  2609  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  2610  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  2611  02F1  00A9               	movwf	___ftge@ff1+2
  2612  02F2  3000               	movlw	0
  2613  02F3  00AA               	movwf	___ftge@ff2
  2614  02F4  3080               	movlw	128
  2615  02F5  00AB               	movwf	___ftge@ff2+1
  2616  02F6  303F               	movlw	63
  2617  02F7  00AC               	movwf	___ftge@ff2+2
  2618  02F8  160A  118A  21D4  120A  118A  	fcall	___ftge
  2619  02FD  1803               	btfsc	3,0
  2620  02FE  2B07               	goto	l2936
  2621                           
  2622                           ;doprnt.c: 858: exp--;
  2623  02FF  30FF               	movlw	255
  2624  0300  1683               	bsf	3,5	;RP0=1, select bank1
  2625  0301  1303               	bcf	3,6	;RP1=0, select bank1
  2626  0302  07C1               	addwf	sprintf@exp^(0+128),f
  2627  0303  1803               	skipnc
  2628  0304  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  2629  0305  30FF               	movlw	255
  2630  0306  2B2D               	goto	L3
  2631  0307                     l2936:	
  2632                           
  2633                           ;doprnt.c: 859: else if(integ >= 10.0)
  2634  0307  1683               	bsf	3,5	;RP0=1, select bank1
  2635  0308  1303               	bcf	3,6	;RP1=0, select bank1
  2636  0309  0836               	movf	sprintf@integ^(0+128),w
  2637  030A  1283               	bcf	3,5	;RP0=0, select bank0
  2638  030B  1303               	bcf	3,6	;RP1=0, select bank0
  2639  030C  00A7               	movwf	___ftge@ff1
  2640  030D  1683               	bsf	3,5	;RP0=1, select bank1
  2641  030E  1303               	bcf	3,6	;RP1=0, select bank1
  2642  030F  0837               	movf	(sprintf@integ+1)^(0+128),w
  2643  0310  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0311  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0312  00A8               	movwf	___ftge@ff1+1
  2646  0313  1683               	bsf	3,5	;RP0=1, select bank1
  2647  0314  1303               	bcf	3,6	;RP1=0, select bank1
  2648  0315  0838               	movf	(sprintf@integ+2)^(0+128),w
  2649  0316  1283               	bcf	3,5	;RP0=0, select bank0
  2650  0317  1303               	bcf	3,6	;RP1=0, select bank0
  2651  0318  00A9               	movwf	___ftge@ff1+2
  2652  0319  3000               	movlw	0
  2653  031A  00AA               	movwf	___ftge@ff2
  2654  031B  3020               	movlw	32
  2655  031C  00AB               	movwf	___ftge@ff2+1
  2656  031D  3041               	movlw	65
  2657  031E  00AC               	movwf	___ftge@ff2+2
  2658  031F  160A  118A  21D4  120A  118A  	fcall	___ftge
  2659  0324  1C03               	btfss	3,0
  2660  0325  2B2E               	goto	l2940
  2661                           
  2662                           ;doprnt.c: 860: exp++;
  2663  0326  3001               	movlw	1
  2664  0327  1683               	bsf	3,5	;RP0=1, select bank1
  2665  0328  1303               	bcf	3,6	;RP1=0, select bank1
  2666  0329  07C1               	addwf	sprintf@exp^(0+128),f
  2667  032A  1803               	skipnc
  2668  032B  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  2669  032C  3000               	movlw	0
  2670  032D                     L3:	
  2671  032D  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2672  032E                     l2940:	
  2673                           
  2674                           ;doprnt.c: 861: }
  2675                           ;doprnt.c: 1121: if(prec <= 12)
  2676  032E  1683               	bsf	3,5	;RP0=1, select bank1
  2677  032F  1303               	bcf	3,6	;RP1=0, select bank1
  2678  0330  0848               	movf	(sprintf@prec+1)^(0+128),w
  2679  0331  3A80               	xorlw	128
  2680  0332  00FF               	movwf	127
  2681  0333  3080               	movlw	128
  2682  0334  027F               	subwf	127,w
  2683  0335  1D03               	skipz
  2684  0336  2B39               	goto	u4235
  2685  0337  300D               	movlw	13
  2686  0338  0247               	subwf	sprintf@prec^(0+128),w
  2687  0339                     u4235:	
  2688  0339  1803               	skipnc
  2689  033A  2B74               	goto	l2944
  2690                           
  2691                           ;doprnt.c: 1122: fval += fround(prec);
  2692  033B  1683               	bsf	3,5	;RP0=1, select bank1
  2693  033C  1303               	bcf	3,6	;RP1=0, select bank1
  2694  033D  0847               	movf	sprintf@prec^(0+128),w
  2695  033E  120A  158A  20C0  120A  118A  	fcall	_fround
  2696  0343  1283               	bcf	3,5	;RP0=0, select bank0
  2697  0344  1303               	bcf	3,6	;RP1=0, select bank0
  2698  0345  0845               	movf	?_fround,w
  2699  0346  00D5               	movwf	___ftadd@f1
  2700  0347  0846               	movf	?_fround+1,w
  2701  0348  00D6               	movwf	___ftadd@f1+1
  2702  0349  0847               	movf	?_fround+2,w
  2703  034A  00D7               	movwf	___ftadd@f1+2
  2704  034B  1683               	bsf	3,5	;RP0=1, select bank1
  2705  034C  1303               	bcf	3,6	;RP1=0, select bank1
  2706  034D  0843               	movf	sprintf@fval^(0+128),w
  2707  034E  1283               	bcf	3,5	;RP0=0, select bank0
  2708  034F  1303               	bcf	3,6	;RP1=0, select bank0
  2709  0350  00D8               	movwf	___ftadd@f2
  2710  0351  1683               	bsf	3,5	;RP0=1, select bank1
  2711  0352  1303               	bcf	3,6	;RP1=0, select bank1
  2712  0353  0844               	movf	(sprintf@fval+1)^(0+128),w
  2713  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2714  0355  1303               	bcf	3,6	;RP1=0, select bank0
  2715  0356  00D9               	movwf	___ftadd@f2+1
  2716  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2717  0358  1303               	bcf	3,6	;RP1=0, select bank1
  2718  0359  0845               	movf	(sprintf@fval+2)^(0+128),w
  2719  035A  1283               	bcf	3,5	;RP0=0, select bank0
  2720  035B  1303               	bcf	3,6	;RP1=0, select bank0
  2721  035C  00DA               	movwf	___ftadd@f2+2
  2722  035D  160A  118A  25C5  120A  118A  	fcall	___ftadd
  2723  0362  1283               	bcf	3,5	;RP0=0, select bank0
  2724  0363  1303               	bcf	3,6	;RP1=0, select bank0
  2725  0364  0855               	movf	?___ftadd,w
  2726  0365  1683               	bsf	3,5	;RP0=1, select bank1
  2727  0366  1303               	bcf	3,6	;RP1=0, select bank1
  2728  0367  00C3               	movwf	sprintf@fval^(0+128)
  2729  0368  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0369  1303               	bcf	3,6	;RP1=0, select bank0
  2731  036A  0856               	movf	?___ftadd+1,w
  2732  036B  1683               	bsf	3,5	;RP0=1, select bank1
  2733  036C  1303               	bcf	3,6	;RP1=0, select bank1
  2734  036D  00C4               	movwf	(sprintf@fval+1)^(0+128)
  2735  036E  1283               	bcf	3,5	;RP0=0, select bank0
  2736  036F  1303               	bcf	3,6	;RP1=0, select bank0
  2737  0370  0857               	movf	?___ftadd+2,w
  2738  0371  1683               	bsf	3,5	;RP0=1, select bank1
  2739  0372  1303               	bcf	3,6	;RP1=0, select bank1
  2740  0373  00C5               	movwf	(sprintf@fval+2)^(0+128)
  2741  0374                     l2944:	
  2742                           
  2743                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2744  0374  1683               	bsf	3,5	;RP0=1, select bank1
  2745  0375  1303               	bcf	3,6	;RP1=0, select bank1
  2746  0376  0842               	movf	(sprintf@exp+1)^(0+128),w
  2747  0377  3A80               	xorlw	128
  2748  0378  00FF               	movwf	127
  2749  0379  3080               	movlw	128
  2750  037A  027F               	subwf	127,w
  2751  037B  1D03               	skipz
  2752  037C  2B7F               	goto	u4245
  2753  037D  300A               	movlw	10
  2754  037E  0241               	subwf	sprintf@exp^(0+128),w
  2755  037F                     u4245:	
  2756  037F  1803               	skipnc
  2757  0380  2BB2               	goto	l2952
  2758  0381  1683               	bsf	3,5	;RP0=1, select bank1
  2759  0382  1303               	bcf	3,6	;RP1=0, select bank1
  2760  0383  0845               	movf	(sprintf@fval+2)^(0+128),w
  2761  0384  0444               	iorwf	(sprintf@fval+1)^(0+128),w
  2762  0385  0443               	iorwf	sprintf@fval^(0+128),w
  2763  0386  1903               	skipnz
  2764  0387  2C1D               	goto	l2968
  2765  0388  0843               	movf	sprintf@fval^(0+128),w
  2766  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2767  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2768  038B  00CE               	movwf	___fttol@f1
  2769  038C  1683               	bsf	3,5	;RP0=1, select bank1
  2770  038D  1303               	bcf	3,6	;RP1=0, select bank1
  2771  038E  0844               	movf	(sprintf@fval+1)^(0+128),w
  2772  038F  1283               	bcf	3,5	;RP0=0, select bank0
  2773  0390  1303               	bcf	3,6	;RP1=0, select bank0
  2774  0391  00CF               	movwf	___fttol@f1+1
  2775  0392  1683               	bsf	3,5	;RP0=1, select bank1
  2776  0393  1303               	bcf	3,6	;RP1=0, select bank1
  2777  0394  0845               	movf	(sprintf@fval+2)^(0+128),w
  2778  0395  1283               	bcf	3,5	;RP0=0, select bank0
  2779  0396  1303               	bcf	3,6	;RP1=0, select bank0
  2780  0397  00D0               	movwf	___fttol@f1+2
  2781  0398  160A  118A  2314  120A  118A  	fcall	___fttol
  2782  039D  1283               	bcf	3,5	;RP0=0, select bank0
  2783  039E  1303               	bcf	3,6	;RP1=0, select bank0
  2784  039F  0851               	movf	?___fttol+3,w
  2785  03A0  0450               	iorwf	?___fttol+2,w
  2786  03A1  044F               	iorwf	?___fttol+1,w
  2787  03A2  044E               	iorwf	?___fttol,w
  2788  03A3  1D03               	skipz
  2789  03A4  2C1D               	goto	l2968
  2790  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  2791  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  2792  03A7  0842               	movf	(sprintf@exp+1)^(0+128),w
  2793  03A8  3A80               	xorlw	128
  2794  03A9  00FF               	movwf	127
  2795  03AA  3080               	movlw	128
  2796  03AB  027F               	subwf	127,w
  2797  03AC  1D03               	skipz
  2798  03AD  2BB0               	goto	u4275
  2799  03AE  3002               	movlw	2
  2800  03AF  0241               	subwf	sprintf@exp^(0+128),w
  2801  03B0                     u4275:	
  2802  03B0  1C03               	skipc
  2803  03B1  2C1D               	goto	l2968
  2804  03B2                     l2952:	
  2805                           
  2806                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2807  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  2808  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  2809  03B4  0836               	movf	sprintf@integ^(0+128),w
  2810  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  2811  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  2812  03B7  00A7               	movwf	___ftge@ff1
  2813  03B8  1683               	bsf	3,5	;RP0=1, select bank1
  2814  03B9  1303               	bcf	3,6	;RP1=0, select bank1
  2815  03BA  0837               	movf	(sprintf@integ+1)^(0+128),w
  2816  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  2817  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  2818  03BD  00A8               	movwf	___ftge@ff1+1
  2819  03BE  1683               	bsf	3,5	;RP0=1, select bank1
  2820  03BF  1303               	bcf	3,6	;RP1=0, select bank1
  2821  03C0  0838               	movf	(sprintf@integ+2)^(0+128),w
  2822  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  2823  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  2824  03C3  00A9               	movwf	___ftge@ff1+2
  2825  03C4  3070               	movlw	112
  2826  03C5  00AA               	movwf	___ftge@ff2
  2827  03C6  3089               	movlw	137
  2828  03C7  00AB               	movwf	___ftge@ff2+1
  2829  03C8  3040               	movlw	64
  2830  03C9  00AC               	movwf	___ftge@ff2+2
  2831  03CA  160A  118A  21D4  120A  118A  	fcall	___ftge
  2832  03CF  1803               	btfsc	3,0
  2833  03D0  2BD3               	goto	l2956
  2834                           
  2835                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2836  03D1  30F7               	movlw	247
  2837  03D2  2BD4               	goto	L4
  2838  03D3                     l2956:	
  2839                           ;doprnt.c: 1131: }else{
  2840                           
  2841                           
  2842                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2843  03D3  30F8               	movlw	248
  2844  03D4                     L4:	
  2845  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  2846  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  2847  03D6  07C1               	addwf	sprintf@exp^(0+128),f
  2848  03D7  1803               	skipnc
  2849  03D8  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  2850  03D9  30FF               	movlw	255
  2851  03DA  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2852                           
  2853                           ;doprnt.c: 1133: }
  2854                           ;doprnt.c: 1134: integ = scale(exp);
  2855  03DB  0841               	movf	sprintf@exp^(0+128),w
  2856  03DC  120A  158A  225C  120A  118A  	fcall	_scale
  2857  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  2858  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  2859  03E3  0845               	movf	?_scale,w
  2860  03E4  1683               	bsf	3,5	;RP0=1, select bank1
  2861  03E5  1303               	bcf	3,6	;RP1=0, select bank1
  2862  03E6  00B6               	movwf	sprintf@integ^(0+128)
  2863  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  2864  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  2865  03E9  0846               	movf	?_scale+1,w
  2866  03EA  1683               	bsf	3,5	;RP0=1, select bank1
  2867  03EB  1303               	bcf	3,6	;RP1=0, select bank1
  2868  03EC  00B7               	movwf	(sprintf@integ+1)^(0+128)
  2869  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2870  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2871  03EF  0847               	movf	?_scale+2,w
  2872  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  2873  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  2874  03F2  00B8               	movwf	(sprintf@integ+2)^(0+128)
  2875                           
  2876                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2877  03F3  0843               	movf	sprintf@fval^(0+128),w
  2878  03F4  00F0               	movwf	__tdiv_to_l_@f1
  2879  03F5  0844               	movf	(sprintf@fval+1)^(0+128),w
  2880  03F6  00F1               	movwf	__tdiv_to_l_@f1+1
  2881  03F7  0845               	movf	(sprintf@fval+2)^(0+128),w
  2882  03F8  00F2               	movwf	__tdiv_to_l_@f1+2
  2883  03F9  0836               	movf	sprintf@integ^(0+128),w
  2884  03FA  00F3               	movwf	__tdiv_to_l_@f2
  2885  03FB  0837               	movf	(sprintf@integ+1)^(0+128),w
  2886  03FC  00F4               	movwf	__tdiv_to_l_@f2+1
  2887  03FD  0838               	movf	(sprintf@integ+2)^(0+128),w
  2888  03FE  00F5               	movwf	__tdiv_to_l_@f2+2
  2889  03FF  160A  118A  2502  120A  118A  	fcall	__tdiv_to_l_
  2890  0404  0873               	movf	?__tdiv_to_l_+3,w
  2891  0405  1683               	bsf	3,5	;RP0=1, select bank1
  2892  0406  1303               	bcf	3,6	;RP1=0, select bank1
  2893  0407  00AC               	movwf	(_sprintf$463+3)^(0+128)
  2894  0408  0872               	movf	?__tdiv_to_l_+2,w
  2895  0409  00AB               	movwf	(_sprintf$463+2)^(0+128)
  2896  040A  0871               	movf	?__tdiv_to_l_+1,w
  2897  040B  00AA               	movwf	(_sprintf$463+1)^(0+128)
  2898  040C  0870               	movf	?__tdiv_to_l_,w
  2899  040D  00A9               	movwf	_sprintf$463^(0+128)
  2900  040E  082C               	movf	(_sprintf$463+3)^(0+128),w
  2901  040F  00BC               	movwf	(sprintf@_val+3)^(0+128)
  2902  0410  082B               	movf	(_sprintf$463+2)^(0+128),w
  2903  0411  00BB               	movwf	(sprintf@_val+2)^(0+128)
  2904  0412  082A               	movf	(_sprintf$463+1)^(0+128),w
  2905  0413  00BA               	movwf	(sprintf@_val+1)^(0+128)
  2906  0414  0829               	movf	_sprintf$463^(0+128),w
  2907  0415  00B9               	movwf	sprintf@_val^(0+128)
  2908                           
  2909                           ;doprnt.c: 1138: fval = 0.0;
  2910  0416  3000               	movlw	0
  2911  0417  00C3               	movwf	sprintf@fval^(0+128)
  2912  0418  3000               	movlw	0
  2913  0419  00C4               	movwf	(sprintf@fval+1)^(0+128)
  2914  041A  3000               	movlw	0
  2915  041B  00C5               	movwf	(sprintf@fval+2)^(0+128)
  2916                           
  2917                           ;doprnt.c: 1139: } else {
  2918  041C  2C9A               	goto	l2972
  2919  041D                     l2968:	
  2920                           
  2921                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2922  041D  1683               	bsf	3,5	;RP0=1, select bank1
  2923  041E  1303               	bcf	3,6	;RP1=0, select bank1
  2924  041F  0843               	movf	sprintf@fval^(0+128),w
  2925  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2926  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2927  0422  00CE               	movwf	___fttol@f1
  2928  0423  1683               	bsf	3,5	;RP0=1, select bank1
  2929  0424  1303               	bcf	3,6	;RP1=0, select bank1
  2930  0425  0844               	movf	(sprintf@fval+1)^(0+128),w
  2931  0426  1283               	bcf	3,5	;RP0=0, select bank0
  2932  0427  1303               	bcf	3,6	;RP1=0, select bank0
  2933  0428  00CF               	movwf	___fttol@f1+1
  2934  0429  1683               	bsf	3,5	;RP0=1, select bank1
  2935  042A  1303               	bcf	3,6	;RP1=0, select bank1
  2936  042B  0845               	movf	(sprintf@fval+2)^(0+128),w
  2937  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2938  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2939  042E  00D0               	movwf	___fttol@f1+2
  2940  042F  160A  118A  2314  120A  118A  	fcall	___fttol
  2941  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0435  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0436  0851               	movf	?___fttol+3,w
  2944  0437  1683               	bsf	3,5	;RP0=1, select bank1
  2945  0438  1303               	bcf	3,6	;RP1=0, select bank1
  2946  0439  00BC               	movwf	(sprintf@_val+3)^(0+128)
  2947  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2948  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2949  043C  0850               	movf	?___fttol+2,w
  2950  043D  1683               	bsf	3,5	;RP0=1, select bank1
  2951  043E  1303               	bcf	3,6	;RP1=0, select bank1
  2952  043F  00BB               	movwf	(sprintf@_val+2)^(0+128)
  2953  0440  1283               	bcf	3,5	;RP0=0, select bank0
  2954  0441  1303               	bcf	3,6	;RP1=0, select bank0
  2955  0442  084F               	movf	?___fttol+1,w
  2956  0443  1683               	bsf	3,5	;RP0=1, select bank1
  2957  0444  1303               	bcf	3,6	;RP1=0, select bank1
  2958  0445  00BA               	movwf	(sprintf@_val+1)^(0+128)
  2959  0446  1283               	bcf	3,5	;RP0=0, select bank0
  2960  0447  1303               	bcf	3,6	;RP1=0, select bank0
  2961  0448  084E               	movf	?___fttol,w
  2962  0449  1683               	bsf	3,5	;RP0=1, select bank1
  2963  044A  1303               	bcf	3,6	;RP1=0, select bank1
  2964  044B  00B9               	movwf	sprintf@_val^(0+128)
  2965                           
  2966                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2967  044C  083C               	movf	(sprintf@_val+3)^(0+128),w
  2968  044D  1283               	bcf	3,5	;RP0=0, select bank0
  2969  044E  1303               	bcf	3,6	;RP1=0, select bank0
  2970  044F  00B2               	movwf	___lltoft@c+3
  2971  0450  1683               	bsf	3,5	;RP0=1, select bank1
  2972  0451  1303               	bcf	3,6	;RP1=0, select bank1
  2973  0452  083B               	movf	(sprintf@_val+2)^(0+128),w
  2974  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2975  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2976  0455  00B1               	movwf	___lltoft@c+2
  2977  0456  1683               	bsf	3,5	;RP0=1, select bank1
  2978  0457  1303               	bcf	3,6	;RP1=0, select bank1
  2979  0458  083A               	movf	(sprintf@_val+1)^(0+128),w
  2980  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2981  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2982  045B  00B0               	movwf	___lltoft@c+1
  2983  045C  1683               	bsf	3,5	;RP0=1, select bank1
  2984  045D  1303               	bcf	3,6	;RP1=0, select bank1
  2985  045E  0839               	movf	sprintf@_val^(0+128),w
  2986  045F  1283               	bcf	3,5	;RP0=0, select bank0
  2987  0460  1303               	bcf	3,6	;RP1=0, select bank0
  2988  0461  00AF               	movwf	___lltoft@c
  2989  0462  160A  158A  26DD  120A  118A  	fcall	___lltoft
  2990  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2992  0469  082F               	movf	?___lltoft,w
  2993  046A  00E2               	movwf	___ftsub@f2
  2994  046B  0830               	movf	?___lltoft+1,w
  2995  046C  00E3               	movwf	___ftsub@f2+1
  2996  046D  0831               	movf	?___lltoft+2,w
  2997  046E  00E4               	movwf	___ftsub@f2+2
  2998  046F  1683               	bsf	3,5	;RP0=1, select bank1
  2999  0470  1303               	bcf	3,6	;RP1=0, select bank1
  3000  0471  0843               	movf	sprintf@fval^(0+128),w
  3001  0472  1283               	bcf	3,5	;RP0=0, select bank0
  3002  0473  1303               	bcf	3,6	;RP1=0, select bank0
  3003  0474  00E5               	movwf	___ftsub@f1
  3004  0475  1683               	bsf	3,5	;RP0=1, select bank1
  3005  0476  1303               	bcf	3,6	;RP1=0, select bank1
  3006  0477  0844               	movf	(sprintf@fval+1)^(0+128),w
  3007  0478  1283               	bcf	3,5	;RP0=0, select bank0
  3008  0479  1303               	bcf	3,6	;RP1=0, select bank0
  3009  047A  00E6               	movwf	___ftsub@f1+1
  3010  047B  1683               	bsf	3,5	;RP0=1, select bank1
  3011  047C  1303               	bcf	3,6	;RP1=0, select bank1
  3012  047D  0845               	movf	(sprintf@fval+2)^(0+128),w
  3013  047E  1283               	bcf	3,5	;RP0=0, select bank0
  3014  047F  1303               	bcf	3,6	;RP1=0, select bank0
  3015  0480  00E7               	movwf	___ftsub@f1+2
  3016  0481  160A  158A  2661  120A  118A  	fcall	___ftsub
  3017  0486  1283               	bcf	3,5	;RP0=0, select bank0
  3018  0487  1303               	bcf	3,6	;RP1=0, select bank0
  3019  0488  0862               	movf	?___ftsub,w
  3020  0489  1683               	bsf	3,5	;RP0=1, select bank1
  3021  048A  1303               	bcf	3,6	;RP1=0, select bank1
  3022  048B  00C3               	movwf	sprintf@fval^(0+128)
  3023  048C  1283               	bcf	3,5	;RP0=0, select bank0
  3024  048D  1303               	bcf	3,6	;RP1=0, select bank0
  3025  048E  0863               	movf	?___ftsub+1,w
  3026  048F  1683               	bsf	3,5	;RP0=1, select bank1
  3027  0490  1303               	bcf	3,6	;RP1=0, select bank1
  3028  0491  00C4               	movwf	(sprintf@fval+1)^(0+128)
  3029  0492  1283               	bcf	3,5	;RP0=0, select bank0
  3030  0493  1303               	bcf	3,6	;RP1=0, select bank0
  3031  0494  0864               	movf	?___ftsub+2,w
  3032  0495  1683               	bsf	3,5	;RP0=1, select bank1
  3033  0496  1303               	bcf	3,6	;RP1=0, select bank1
  3034  0497  00C5               	movwf	(sprintf@fval+2)^(0+128)
  3035                           
  3036                           ;doprnt.c: 1142: exp = 0;
  3037  0498  01C1               	clrf	sprintf@exp^(0+128)
  3038  0499  01C2               	clrf	(sprintf@exp+1)^(0+128)
  3039  049A                     l2972:	
  3040                           
  3041                           ;doprnt.c: 1143: }
  3042                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3043  049A  01C9               	clrf	sprintf@c^(0+128)
  3044  049B  0AC9               	incf	sprintf@c^(0+128),f
  3045  049C  0849               	movf	sprintf@c^(0+128),w
  3046  049D  3A0A               	xorlw	10
  3047  049E  1903               	btfsc	3,2
  3048  049F  2CDC               	goto	l2986
  3049  04A0                     l2978:	
  3050                           
  3051                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  3052  04A0  0849               	movf	sprintf@c^(0+128),w
  3053  04A1  00A0               	movwf	??_sprintf^(0+128)
  3054  04A2  3001               	movlw	1
  3055  04A3                     u4305:	
  3056  04A3  1003               	clrc
  3057  04A4  0DA0               	rlf	??_sprintf^(0+128),f
  3058  04A5  3EFF               	addlw	-1
  3059  04A6  1D03               	skipz
  3060  04A7  2CA3               	goto	u4305
  3061  04A8  1003               	clrc
  3062  04A9  0D20               	rlf	??_sprintf^(0+128),w
  3063  04AA  3E01               	addlw	low (_dpowers-__stringbase)
  3064  04AB  0084               	movwf	4
  3065  04AC  160A  118A  2000  120A  118A  	fcall	stringdir
  3066  04B1  00A1               	movwf	(??_sprintf+1)^(0+128)
  3067  04B2  160A  118A  2000  120A  118A  	fcall	stringdir
  3068  04B7  00A2               	movwf	((??_sprintf+1)^(0+128)+1)
  3069  04B8  160A  118A  2000  120A  118A  	fcall	stringdir
  3070  04BD  00A3               	movwf	((??_sprintf+1)^(0+128)+2)
  3071  04BE  160A  118A  2000  120A  118A  	fcall	stringdir
  3072  04C3  00A4               	movwf	((??_sprintf+1)^(0+128)+3)
  3073  04C4  0824               	movf	(??_sprintf+4)^(0+128),w
  3074  04C5  023C               	subwf	(sprintf@_val+3)^(0+128),w
  3075  04C6  1D03               	skipz
  3076  04C7  2CD2               	goto	u4315
  3077  04C8  0823               	movf	(??_sprintf+3)^(0+128),w
  3078  04C9  023B               	subwf	(sprintf@_val+2)^(0+128),w
  3079  04CA  1D03               	skipz
  3080  04CB  2CD2               	goto	u4315
  3081  04CC  0822               	movf	(??_sprintf+2)^(0+128),w
  3082  04CD  023A               	subwf	(sprintf@_val+1)^(0+128),w
  3083  04CE  1D03               	skipz
  3084  04CF  2CD2               	goto	u4315
  3085  04D0  0821               	movf	(??_sprintf+1)^(0+128),w
  3086  04D1  0239               	subwf	sprintf@_val^(0+128),w
  3087  04D2                     u4315:	
  3088  04D2  1C03               	btfss	3,0
  3089  04D3  2CDC               	goto	l2986
  3090                           
  3091                           ;doprnt.c: 1147: break;
  3092  04D4  3001               	movlw	1
  3093  04D5  00A0               	movwf	??_sprintf^(0+128)
  3094  04D6  0820               	movf	??_sprintf^(0+128),w
  3095  04D7  07C9               	addwf	sprintf@c^(0+128),f
  3096  04D8  0849               	movf	sprintf@c^(0+128),w
  3097  04D9  3A0A               	xorlw	10
  3098  04DA  1D03               	skipz
  3099  04DB  2CA0               	goto	l2978
  3100  04DC                     l2986:	
  3101                           
  3102                           ;doprnt.c: 1151: width -= prec + c + exp;
  3103  04DC  0847               	movf	sprintf@prec^(0+128),w
  3104  04DD  0749               	addwf	sprintf@c^(0+128),w
  3105  04DE  00A0               	movwf	??_sprintf^(0+128)
  3106  04DF  0848               	movf	(sprintf@prec+1)^(0+128),w
  3107  04E0  1803               	skipnc
  3108  04E1  0A48               	incf	(sprintf@prec+1)^(0+128),w
  3109  04E2  3E00               	addlw	0
  3110  04E3  1BC9               	btfsc	sprintf@c^(0+128),7
  3111  04E4  3EFF               	addlw	255
  3112  04E5  00A1               	movwf	(??_sprintf^(0+128)+1)
  3113  04E6  0841               	movf	sprintf@exp^(0+128),w
  3114  04E7  0720               	addwf	??_sprintf^(0+128),w
  3115  04E8  00A2               	movwf	(??_sprintf+2)^(0+128)
  3116  04E9  0842               	movf	(sprintf@exp+1)^(0+128),w
  3117  04EA  1803               	skipnc
  3118  04EB  0A42               	incf	(sprintf@exp+1)^(0+128),w
  3119  04EC  0721               	addwf	(??_sprintf+1)^(0+128),w
  3120  04ED  00A3               	movwf	(??_sprintf+3)^(0+128)
  3121  04EE  0822               	movf	(??_sprintf+2)^(0+128),w
  3122  04EF  02BF               	subwf	sprintf@width^(0+128),f
  3123  04F0  0823               	movf	(??_sprintf+3)^(0+128),w
  3124  04F1  1C03               	skipc
  3125  04F2  03C0               	decf	(sprintf@width+1)^(0+128),f
  3126  04F3  02C0               	subwf	(sprintf@width+1)^(0+128),f
  3127                           
  3128                           ;doprnt.c: 1152: if(
  3129                           ;doprnt.c: 1156: prec)
  3130  04F4  0848               	movf	(sprintf@prec+1)^(0+128),w
  3131  04F5  0447               	iorwf	sprintf@prec^(0+128),w
  3132  04F6  1903               	skipnz
  3133  04F7  2CFE               	goto	l418
  3134                           
  3135                           ;doprnt.c: 1157: width--;
  3136  04F8  30FF               	movlw	255
  3137  04F9  07BF               	addwf	sprintf@width^(0+128),f
  3138  04FA  1803               	skipnc
  3139  04FB  0AC0               	incf	(sprintf@width+1)^(0+128),f
  3140  04FC  30FF               	movlw	255
  3141  04FD  07C0               	addwf	(sprintf@width+1)^(0+128),f
  3142  04FE                     l418:	
  3143                           
  3144                           ;doprnt.c: 1158: if(flag & 0x03)
  3145  04FE  3003               	movlw	3
  3146  04FF  053D               	andwf	sprintf@flag^(0+128),w
  3147  0500  00A0               	movwf	??_sprintf^(0+128)
  3148  0501  3000               	movlw	0
  3149  0502  053E               	andwf	(sprintf@flag+1)^(0+128),w
  3150  0503  00A1               	movwf	(??_sprintf+1)^(0+128)
  3151  0504  0821               	movf	(??_sprintf+1)^(0+128),w
  3152  0505  0420               	iorwf	??_sprintf^(0+128),w
  3153  0506  1903               	skipnz
  3154  0507  2D0E               	goto	l3000
  3155  0508                     l2998:	
  3156                           
  3157                           ;doprnt.c: 1191: width--;
  3158  0508  30FF               	movlw	255
  3159  0509  07BF               	addwf	sprintf@width^(0+128),f
  3160  050A  1803               	skipnc
  3161  050B  0AC0               	incf	(sprintf@width+1)^(0+128),f
  3162  050C  30FF               	movlw	255
  3163  050D  07C0               	addwf	(sprintf@width+1)^(0+128),f
  3164  050E                     l3000:	
  3165  050E  0840               	movf	(sprintf@width+1)^(0+128),w
  3166  050F  3A80               	xorlw	128
  3167  0510  00FF               	movwf	127
  3168  0511  3080               	movlw	128
  3169  0512  027F               	subwf	127,w
  3170  0513  1D03               	skipz
  3171  0514  2D17               	goto	u4355
  3172  0515  3001               	movlw	1
  3173  0516  023F               	subwf	sprintf@width^(0+128),w
  3174  0517                     u4355:	
  3175  0517  1C03               	btfss	3,0
  3176  0518  2D27               	goto	l3002
  3177                           
  3178                           ;doprnt.c: 1190: ((*sp++ = (' ')));
  3179                           
  3180                           ;doprnt.c: 1184: {
  3181                           ;doprnt.c: 1189: while(width > 0) {
  3182                           
  3183                           ;doprnt.c: 1159: width--;
  3184  0519  3020               	movlw	32
  3185  051A  1683               	bsf	3,5	;RP0=1, select bank1
  3186  051B  1303               	bcf	3,6	;RP1=0, select bank1
  3187  051C  00A0               	movwf	??_sprintf^(0+128)
  3188  051D  0846               	movf	sprintf@sp^(0+128),w
  3189  051E  0084               	movwf	4
  3190  051F  0820               	movf	??_sprintf^(0+128),w
  3191  0520  1783               	bsf	3,7	;select IRP bank2
  3192  0521  0080               	movwf	0
  3193  0522  3001               	movlw	1
  3194  0523  00A0               	movwf	??_sprintf^(0+128)
  3195  0524  0820               	movf	??_sprintf^(0+128),w
  3196  0525  07C6               	addwf	sprintf@sp^(0+128),f
  3197  0526  2D08               	goto	l2998
  3198  0527                     l3002:	
  3199                           
  3200                           ;doprnt.c: 1192: }
  3201                           ;doprnt.c: 1197: if(flag & 0x03)
  3202  0527  3003               	movlw	3
  3203  0528  1683               	bsf	3,5	;RP0=1, select bank1
  3204  0529  1303               	bcf	3,6	;RP1=0, select bank1
  3205  052A  053D               	andwf	sprintf@flag^(0+128),w
  3206  052B  00A0               	movwf	??_sprintf^(0+128)
  3207  052C  3000               	movlw	0
  3208  052D  053E               	andwf	(sprintf@flag+1)^(0+128),w
  3209  052E  00A1               	movwf	(??_sprintf+1)^(0+128)
  3210  052F  0821               	movf	(??_sprintf+1)^(0+128),w
  3211  0530  0420               	iorwf	??_sprintf^(0+128),w
  3212  0531  1903               	skipnz
  3213  0532  2D3E               	goto	l424
  3214                           
  3215                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  3216  0533  302D               	movlw	45
  3217  0534                     L5:	
  3218  0534  00A0               	movwf	??_sprintf^(0+128)
  3219  0535  0846               	movf	sprintf@sp^(0+128),w
  3220  0536  0084               	movwf	4
  3221  0537  0820               	movf	??_sprintf^(0+128),w
  3222  0538  1783               	bsf	3,7	;select IRP bank2
  3223  0539  0080               	movwf	0
  3224  053A  3001               	movlw	1
  3225  053B  00A0               	movwf	??_sprintf^(0+128)
  3226  053C  0820               	movf	??_sprintf^(0+128),w
  3227  053D  07C6               	addwf	sprintf@sp^(0+128),f
  3228  053E                     l424:	
  3229  053E  30FF               	movlw	-1
  3230  053F  00A0               	movwf	??_sprintf^(0+128)
  3231  0540  0820               	movf	??_sprintf^(0+128),w
  3232  0541  07C9               	addwf	sprintf@c^(0+128),f
  3233  0542  0849               	movf	sprintf@c^(0+128),w
  3234  0543  3AFF               	xorlw	-1
  3235  0544  1903               	btfsc	3,2
  3236  0545  2DB6               	goto	l3020
  3237                           
  3238                           ;doprnt.c: 1209: {
  3239                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  3240                           
  3241                           ;doprnt.c: 1204: }
  3242                           ;doprnt.c: 1205: while(c--) {
  3243  0546  0849               	movf	sprintf@c^(0+128),w
  3244  0547  00A0               	movwf	??_sprintf^(0+128)
  3245  0548  3001               	movlw	1
  3246  0549                     u4375:	
  3247  0549  1003               	clrc
  3248  054A  0DA0               	rlf	??_sprintf^(0+128),f
  3249  054B  3EFF               	addlw	-1
  3250  054C  1D03               	skipz
  3251  054D  2D49               	goto	u4375
  3252  054E  1003               	clrc
  3253  054F  0D20               	rlf	??_sprintf^(0+128),w
  3254  0550  3E01               	addlw	low (_dpowers-__stringbase)
  3255  0551  0084               	movwf	4
  3256  0552  160A  118A  2000  120A  118A  	fcall	stringdir
  3257  0557  00F0               	movwf	___lldiv@divisor
  3258  0558  160A  118A  2000  120A  118A  	fcall	stringdir
  3259  055D  00F1               	movwf	___lldiv@divisor+1
  3260  055E  160A  118A  2000  120A  118A  	fcall	stringdir
  3261  0563  00F2               	movwf	___lldiv@divisor+2
  3262  0564  160A  118A  2000  120A  118A  	fcall	stringdir
  3263  0569  00F3               	movwf	___lldiv@divisor+3
  3264  056A  083C               	movf	(sprintf@_val+3)^(0+128),w
  3265  056B  00F7               	movwf	___lldiv@dividend+3
  3266  056C  083B               	movf	(sprintf@_val+2)^(0+128),w
  3267  056D  00F6               	movwf	___lldiv@dividend+2
  3268  056E  083A               	movf	(sprintf@_val+1)^(0+128),w
  3269  056F  00F5               	movwf	___lldiv@dividend+1
  3270  0570  0839               	movf	sprintf@_val^(0+128),w
  3271  0571  00F4               	movwf	___lldiv@dividend
  3272  0572  160A  118A  2176  120A  118A  	fcall	___lldiv
  3273  0577  0873               	movf	?___lldiv+3,w
  3274  0578  1683               	bsf	3,5	;RP0=1, select bank1
  3275  0579  1303               	bcf	3,6	;RP1=0, select bank1
  3276  057A  00B1               	movwf	(sprintf@vd+3)^(0+128)
  3277  057B  0872               	movf	?___lldiv+2,w
  3278  057C  00B0               	movwf	(sprintf@vd+2)^(0+128)
  3279  057D  0871               	movf	?___lldiv+1,w
  3280  057E  00AF               	movwf	(sprintf@vd+1)^(0+128)
  3281  057F  0870               	movf	?___lldiv,w
  3282  0580  00AE               	movwf	sprintf@vd^(0+128)
  3283                           
  3284                           ;doprnt.c: 1211: vd %= 10;
  3285  0581  3000               	movlw	0
  3286  0582  00F3               	movwf	___llmod@divisor+3
  3287  0583  3000               	movlw	0
  3288  0584  00F2               	movwf	___llmod@divisor+2
  3289  0585  3000               	movlw	0
  3290  0586  00F1               	movwf	___llmod@divisor+1
  3291  0587  300A               	movlw	10
  3292  0588  00F0               	movwf	___llmod@divisor
  3293  0589  0831               	movf	(sprintf@vd+3)^(0+128),w
  3294  058A  00F7               	movwf	___llmod@dividend+3
  3295  058B  0830               	movf	(sprintf@vd+2)^(0+128),w
  3296  058C  00F6               	movwf	___llmod@dividend+2
  3297  058D  082F               	movf	(sprintf@vd+1)^(0+128),w
  3298  058E  00F5               	movwf	___llmod@dividend+1
  3299  058F  082E               	movf	sprintf@vd^(0+128),w
  3300  0590  00F4               	movwf	___llmod@dividend
  3301  0591  160A  158A  270C  120A  118A  	fcall	___llmod
  3302  0596  0873               	movf	?___llmod+3,w
  3303  0597  1683               	bsf	3,5	;RP0=1, select bank1
  3304  0598  1303               	bcf	3,6	;RP1=0, select bank1
  3305  0599  00B1               	movwf	(sprintf@vd+3)^(0+128)
  3306  059A  0872               	movf	?___llmod+2,w
  3307  059B  00B0               	movwf	(sprintf@vd+2)^(0+128)
  3308  059C  0871               	movf	?___llmod+1,w
  3309  059D  00AF               	movwf	(sprintf@vd+1)^(0+128)
  3310  059E  0870               	movf	?___llmod,w
  3311  059F  00AE               	movwf	sprintf@vd^(0+128)
  3312                           
  3313                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  3314  05A0  082E               	movf	sprintf@vd^(0+128),w
  3315  05A1  3E30               	addlw	48
  3316  05A2  2D34               	goto	L5
  3317  05A3                     l3014:	
  3318                           ;doprnt.c: 1213: }
  3319                           ;doprnt.c: 1215: }
  3320                           ;doprnt.c: 1216: while(exp > 0) {
  3321                           
  3322                           
  3323                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  3324  05A3  3030               	movlw	48
  3325  05A4  1683               	bsf	3,5	;RP0=1, select bank1
  3326  05A5  1303               	bcf	3,6	;RP1=0, select bank1
  3327  05A6  00A0               	movwf	??_sprintf^(0+128)
  3328  05A7  0846               	movf	sprintf@sp^(0+128),w
  3329  05A8  0084               	movwf	4
  3330  05A9  0820               	movf	??_sprintf^(0+128),w
  3331  05AA  1783               	bsf	3,7	;select IRP bank2
  3332  05AB  0080               	movwf	0
  3333  05AC  3001               	movlw	1
  3334  05AD  00A0               	movwf	??_sprintf^(0+128)
  3335  05AE  0820               	movf	??_sprintf^(0+128),w
  3336  05AF  07C6               	addwf	sprintf@sp^(0+128),f
  3337                           
  3338                           ;doprnt.c: 1218: exp--;
  3339  05B0  30FF               	movlw	255
  3340  05B1  07C1               	addwf	sprintf@exp^(0+128),f
  3341  05B2  1803               	skipnc
  3342  05B3  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  3343  05B4  30FF               	movlw	255
  3344  05B5  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  3345  05B6                     l3020:	
  3346  05B6  0842               	movf	(sprintf@exp+1)^(0+128),w
  3347  05B7  3A80               	xorlw	128
  3348  05B8  00FF               	movwf	127
  3349  05B9  3080               	movlw	128
  3350  05BA  027F               	subwf	127,w
  3351  05BB  1D03               	skipz
  3352  05BC  2DBF               	goto	u4395
  3353  05BD  3001               	movlw	1
  3354  05BE  0241               	subwf	sprintf@exp^(0+128),w
  3355  05BF                     u4395:	
  3356  05BF  1803               	skipnc
  3357  05C0  2DA3               	goto	l3014
  3358                           
  3359                           ;doprnt.c: 1219: }
  3360                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3361  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  3362  05C2  1303               	bcf	3,6	;RP1=0, select bank1
  3363  05C3  0848               	movf	(sprintf@prec+1)^(0+128),w
  3364  05C4  3A80               	xorlw	128
  3365  05C5  00FF               	movwf	127
  3366  05C6  3080               	movlw	128
  3367  05C7  027F               	subwf	127,w
  3368  05C8  1D03               	skipz
  3369  05C9  2DCC               	goto	u4405
  3370  05CA  3009               	movlw	9
  3371  05CB  0247               	subwf	sprintf@prec^(0+128),w
  3372  05CC                     u4405:	
  3373  05CC  1C03               	skipc
  3374  05CD  2DD2               	goto	l3026
  3375                           
  3376                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3377  05CE  3008               	movlw	8
  3378  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  3379  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  3380  05D1  2DD5               	goto	L6
  3381  05D2                     l3026:	
  3382                           
  3383                           ;doprnt.c: 1222: else
  3384                           ;doprnt.c: 1223: c = prec;
  3385  05D2  1683               	bsf	3,5	;RP0=1, select bank1
  3386  05D3  1303               	bcf	3,6	;RP1=0, select bank1
  3387  05D4  0847               	movf	sprintf@prec^(0+128),w
  3388  05D5                     L6:	
  3389  05D5  00A0               	movwf	??_sprintf^(0+128)
  3390  05D6  0820               	movf	??_sprintf^(0+128),w
  3391  05D7  00C9               	movwf	sprintf@c^(0+128)
  3392                           
  3393                           ;doprnt.c: 1224: prec -= c;
  3394  05D8  0849               	movf	sprintf@c^(0+128),w
  3395  05D9  00A0               	movwf	??_sprintf^(0+128)
  3396  05DA  01A1               	clrf	(??_sprintf^(0+128)+1)
  3397  05DB  1BA0               	btfsc	??_sprintf^(0+128),7
  3398  05DC  03A1               	decf	(??_sprintf^(0+128)+1),f
  3399  05DD  0820               	movf	??_sprintf^(0+128),w
  3400  05DE  02C7               	subwf	sprintf@prec^(0+128),f
  3401  05DF  0821               	movf	(??_sprintf+1)^(0+128),w
  3402  05E0  1C03               	skipc
  3403  05E1  03C8               	decf	(sprintf@prec+1)^(0+128),f
  3404  05E2  02C8               	subwf	(sprintf@prec+1)^(0+128),f
  3405                           
  3406                           ;doprnt.c: 1228: if(c)
  3407  05E3  0849               	movf	sprintf@c^(0+128),w
  3408  05E4  1903               	btfsc	3,2
  3409  05E5  2DF1               	goto	l3032
  3410                           
  3411                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  3412  05E6  302E               	movlw	46
  3413  05E7  00A0               	movwf	??_sprintf^(0+128)
  3414  05E8  0846               	movf	sprintf@sp^(0+128),w
  3415  05E9  0084               	movwf	4
  3416  05EA  0820               	movf	??_sprintf^(0+128),w
  3417  05EB  1783               	bsf	3,7	;select IRP bank2
  3418  05EC  0080               	movwf	0
  3419  05ED  3001               	movlw	1
  3420  05EE  00A0               	movwf	??_sprintf^(0+128)
  3421  05EF  0820               	movf	??_sprintf^(0+128),w
  3422  05F0  07C6               	addwf	sprintf@sp^(0+128),f
  3423  05F1                     l3032:	
  3424                           
  3425                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3426  05F1  0849               	movf	sprintf@c^(0+128),w
  3427  05F2  120A  158A  225C  120A  118A  	fcall	_scale
  3428  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  3429  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  3430  05F9  0845               	movf	?_scale,w
  3431  05FA  1683               	bsf	3,5	;RP0=1, select bank1
  3432  05FB  1303               	bcf	3,6	;RP1=0, select bank1
  3433  05FC  00A6               	movwf	_sprintf$876^(0+128)
  3434  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  3435  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  3436  05FF  0846               	movf	?_scale+1,w
  3437  0600  1683               	bsf	3,5	;RP0=1, select bank1
  3438  0601  1303               	bcf	3,6	;RP1=0, select bank1
  3439  0602  00A7               	movwf	(_sprintf$876+1)^(0+128)
  3440  0603  1283               	bcf	3,5	;RP0=0, select bank0
  3441  0604  1303               	bcf	3,6	;RP1=0, select bank0
  3442  0605  0847               	movf	?_scale+2,w
  3443  0606  1683               	bsf	3,5	;RP0=1, select bank1
  3444  0607  1303               	bcf	3,6	;RP1=0, select bank1
  3445  0608  00A8               	movwf	(_sprintf$876+2)^(0+128)
  3446                           
  3447                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3448  0609  0826               	movf	_sprintf$876^(0+128),w
  3449  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3450  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3451  060C  00B8               	movwf	___ftmul@f2
  3452  060D  1683               	bsf	3,5	;RP0=1, select bank1
  3453  060E  1303               	bcf	3,6	;RP1=0, select bank1
  3454  060F  0827               	movf	(_sprintf$876+1)^(0+128),w
  3455  0610  1283               	bcf	3,5	;RP0=0, select bank0
  3456  0611  1303               	bcf	3,6	;RP1=0, select bank0
  3457  0612  00B9               	movwf	___ftmul@f2+1
  3458  0613  1683               	bsf	3,5	;RP0=1, select bank1
  3459  0614  1303               	bcf	3,6	;RP1=0, select bank1
  3460  0615  0828               	movf	(_sprintf$876+2)^(0+128),w
  3461  0616  1283               	bcf	3,5	;RP0=0, select bank0
  3462  0617  1303               	bcf	3,6	;RP1=0, select bank0
  3463  0618  00BA               	movwf	___ftmul@f2+2
  3464  0619  1683               	bsf	3,5	;RP0=1, select bank1
  3465  061A  1303               	bcf	3,6	;RP1=0, select bank1
  3466  061B  0843               	movf	sprintf@fval^(0+128),w
  3467  061C  1283               	bcf	3,5	;RP0=0, select bank0
  3468  061D  1303               	bcf	3,6	;RP1=0, select bank0
  3469  061E  00B5               	movwf	___ftmul@f1
  3470  061F  1683               	bsf	3,5	;RP0=1, select bank1
  3471  0620  1303               	bcf	3,6	;RP1=0, select bank1
  3472  0621  0844               	movf	(sprintf@fval+1)^(0+128),w
  3473  0622  1283               	bcf	3,5	;RP0=0, select bank0
  3474  0623  1303               	bcf	3,6	;RP1=0, select bank0
  3475  0624  00B6               	movwf	___ftmul@f1+1
  3476  0625  1683               	bsf	3,5	;RP0=1, select bank1
  3477  0626  1303               	bcf	3,6	;RP1=0, select bank1
  3478  0627  0845               	movf	(sprintf@fval+2)^(0+128),w
  3479  0628  1283               	bcf	3,5	;RP0=0, select bank0
  3480  0629  1303               	bcf	3,6	;RP1=0, select bank0
  3481  062A  00B7               	movwf	___ftmul@f1+2
  3482  062B  120A  118A  2009  120A  118A  	fcall	___ftmul
  3483  0630  1283               	bcf	3,5	;RP0=0, select bank0
  3484  0631  1303               	bcf	3,6	;RP1=0, select bank0
  3485  0632  0835               	movf	?___ftmul,w
  3486  0633  00CE               	movwf	___fttol@f1
  3487  0634  0836               	movf	?___ftmul+1,w
  3488  0635  00CF               	movwf	___fttol@f1+1
  3489  0636  0837               	movf	?___ftmul+2,w
  3490  0637  00D0               	movwf	___fttol@f1+2
  3491  0638  160A  118A  2314  120A  118A  	fcall	___fttol
  3492  063D  1283               	bcf	3,5	;RP0=0, select bank0
  3493  063E  1303               	bcf	3,6	;RP1=0, select bank0
  3494  063F  0851               	movf	?___fttol+3,w
  3495  0640  1683               	bsf	3,5	;RP0=1, select bank1
  3496  0641  1303               	bcf	3,6	;RP1=0, select bank1
  3497  0642  00BC               	movwf	(sprintf@_val+3)^(0+128)
  3498  0643  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0644  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0645  0850               	movf	?___fttol+2,w
  3501  0646  1683               	bsf	3,5	;RP0=1, select bank1
  3502  0647  1303               	bcf	3,6	;RP1=0, select bank1
  3503  0648  00BB               	movwf	(sprintf@_val+2)^(0+128)
  3504  0649  1283               	bcf	3,5	;RP0=0, select bank0
  3505  064A  1303               	bcf	3,6	;RP1=0, select bank0
  3506  064B  084F               	movf	?___fttol+1,w
  3507  064C  1683               	bsf	3,5	;RP0=1, select bank1
  3508  064D  1303               	bcf	3,6	;RP1=0, select bank1
  3509  064E  00BA               	movwf	(sprintf@_val+1)^(0+128)
  3510  064F  1283               	bcf	3,5	;RP0=0, select bank0
  3511  0650  1303               	bcf	3,6	;RP1=0, select bank0
  3512  0651  084E               	movf	?___fttol,w
  3513  0652  1683               	bsf	3,5	;RP0=1, select bank1
  3514  0653  1303               	bcf	3,6	;RP1=0, select bank1
  3515  0654                     L7:	
  3516  0654  00B9               	movwf	sprintf@_val^(0+128)
  3517  0655  30FF               	movlw	-1
  3518  0656  00A0               	movwf	??_sprintf^(0+128)
  3519  0657  0820               	movf	??_sprintf^(0+128),w
  3520  0658  07C9               	addwf	sprintf@c^(0+128),f
  3521  0659  0849               	movf	sprintf@c^(0+128),w
  3522  065A  3AFF               	xorlw	-1
  3523  065B  1903               	btfsc	3,2
  3524  065C  2F0F               	goto	l3052
  3525                           
  3526                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  3527                           
  3528                           ;doprnt.c: 1237: while(c--) {
  3529  065D  0849               	movf	sprintf@c^(0+128),w
  3530  065E  00A0               	movwf	??_sprintf^(0+128)
  3531  065F  3001               	movlw	1
  3532  0660                     u4425:	
  3533  0660  1003               	clrc
  3534  0661  0DA0               	rlf	??_sprintf^(0+128),f
  3535  0662  3EFF               	addlw	-1
  3536  0663  1D03               	skipz
  3537  0664  2E60               	goto	u4425
  3538  0665  1003               	clrc
  3539  0666  0D20               	rlf	??_sprintf^(0+128),w
  3540  0667  3E01               	addlw	low (_dpowers-__stringbase)
  3541  0668  0084               	movwf	4
  3542  0669  160A  118A  2000  120A  118A  	fcall	stringdir
  3543  066E  00F0               	movwf	___lldiv@divisor
  3544  066F  160A  118A  2000  120A  118A  	fcall	stringdir
  3545  0674  00F1               	movwf	___lldiv@divisor+1
  3546  0675  160A  118A  2000  120A  118A  	fcall	stringdir
  3547  067A  00F2               	movwf	___lldiv@divisor+2
  3548  067B  160A  118A  2000  120A  118A  	fcall	stringdir
  3549  0680  00F3               	movwf	___lldiv@divisor+3
  3550  0681  083C               	movf	(sprintf@_val+3)^(0+128),w
  3551  0682  00F7               	movwf	___lldiv@dividend+3
  3552  0683  083B               	movf	(sprintf@_val+2)^(0+128),w
  3553  0684  00F6               	movwf	___lldiv@dividend+2
  3554  0685  083A               	movf	(sprintf@_val+1)^(0+128),w
  3555  0686  00F5               	movwf	___lldiv@dividend+1
  3556  0687  0839               	movf	sprintf@_val^(0+128),w
  3557  0688  00F4               	movwf	___lldiv@dividend
  3558  0689  160A  118A  2176  120A  118A  	fcall	___lldiv
  3559  068E  0873               	movf	?___lldiv+3,w
  3560  068F  1683               	bsf	3,5	;RP0=1, select bank1
  3561  0690  1303               	bcf	3,6	;RP1=0, select bank1
  3562  0691  00B5               	movwf	(sprintf@vd_465+3)^(0+128)
  3563  0692  0872               	movf	?___lldiv+2,w
  3564  0693  00B4               	movwf	(sprintf@vd_465+2)^(0+128)
  3565  0694  0871               	movf	?___lldiv+1,w
  3566  0695  00B3               	movwf	(sprintf@vd_465+1)^(0+128)
  3567  0696  0870               	movf	?___lldiv,w
  3568  0697  00B2               	movwf	sprintf@vd_465^(0+128)
  3569                           
  3570                           ;doprnt.c: 1239: vd %= 10;
  3571  0698  3000               	movlw	0
  3572  0699  00F3               	movwf	___llmod@divisor+3
  3573  069A  3000               	movlw	0
  3574  069B  00F2               	movwf	___llmod@divisor+2
  3575  069C  3000               	movlw	0
  3576  069D  00F1               	movwf	___llmod@divisor+1
  3577  069E  300A               	movlw	10
  3578  069F  00F0               	movwf	___llmod@divisor
  3579  06A0  0835               	movf	(sprintf@vd_465+3)^(0+128),w
  3580  06A1  00F7               	movwf	___llmod@dividend+3
  3581  06A2  0834               	movf	(sprintf@vd_465+2)^(0+128),w
  3582  06A3  00F6               	movwf	___llmod@dividend+2
  3583  06A4  0833               	movf	(sprintf@vd_465+1)^(0+128),w
  3584  06A5  00F5               	movwf	___llmod@dividend+1
  3585  06A6  0832               	movf	sprintf@vd_465^(0+128),w
  3586  06A7  00F4               	movwf	___llmod@dividend
  3587  06A8  160A  158A  270C  120A  118A  	fcall	___llmod
  3588  06AD  0873               	movf	?___llmod+3,w
  3589  06AE  1683               	bsf	3,5	;RP0=1, select bank1
  3590  06AF  1303               	bcf	3,6	;RP1=0, select bank1
  3591  06B0  00B5               	movwf	(sprintf@vd_465+3)^(0+128)
  3592  06B1  0872               	movf	?___llmod+2,w
  3593  06B2  00B4               	movwf	(sprintf@vd_465+2)^(0+128)
  3594  06B3  0871               	movf	?___llmod+1,w
  3595  06B4  00B3               	movwf	(sprintf@vd_465+1)^(0+128)
  3596  06B5  0870               	movf	?___llmod,w
  3597  06B6  00B2               	movwf	sprintf@vd_465^(0+128)
  3598                           
  3599                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  3600  06B7  0832               	movf	sprintf@vd_465^(0+128),w
  3601  06B8  3E30               	addlw	48
  3602  06B9  00A0               	movwf	??_sprintf^(0+128)
  3603  06BA  0846               	movf	sprintf@sp^(0+128),w
  3604  06BB  0084               	movwf	4
  3605  06BC  0820               	movf	??_sprintf^(0+128),w
  3606  06BD  1783               	bsf	3,7	;select IRP bank2
  3607  06BE  0080               	movwf	0
  3608  06BF  3001               	movlw	1
  3609  06C0  00A0               	movwf	??_sprintf^(0+128)
  3610  06C1  0820               	movf	??_sprintf^(0+128),w
  3611  06C2  07C6               	addwf	sprintf@sp^(0+128),f
  3612                           
  3613                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  3614  06C3  0849               	movf	sprintf@c^(0+128),w
  3615  06C4  00A0               	movwf	??_sprintf^(0+128)
  3616  06C5  3001               	movlw	1
  3617  06C6                     u4435:	
  3618  06C6  1003               	clrc
  3619  06C7  0DA0               	rlf	??_sprintf^(0+128),f
  3620  06C8  3EFF               	addlw	-1
  3621  06C9  1D03               	skipz
  3622  06CA  2EC6               	goto	u4435
  3623  06CB  1003               	clrc
  3624  06CC  0D20               	rlf	??_sprintf^(0+128),w
  3625  06CD  3E01               	addlw	low (_dpowers-__stringbase)
  3626  06CE  0084               	movwf	4
  3627  06CF  160A  118A  2000  120A  118A  	fcall	stringdir
  3628  06D4  00F0               	movwf	___llmod@divisor
  3629  06D5  160A  118A  2000  120A  118A  	fcall	stringdir
  3630  06DA  00F1               	movwf	___llmod@divisor+1
  3631  06DB  160A  118A  2000  120A  118A  	fcall	stringdir
  3632  06E0  00F2               	movwf	___llmod@divisor+2
  3633  06E1  160A  118A  2000  120A  118A  	fcall	stringdir
  3634  06E6  00F3               	movwf	___llmod@divisor+3
  3635  06E7  083C               	movf	(sprintf@_val+3)^(0+128),w
  3636  06E8  00F7               	movwf	___llmod@dividend+3
  3637  06E9  083B               	movf	(sprintf@_val+2)^(0+128),w
  3638  06EA  00F6               	movwf	___llmod@dividend+2
  3639  06EB  083A               	movf	(sprintf@_val+1)^(0+128),w
  3640  06EC  00F5               	movwf	___llmod@dividend+1
  3641  06ED  0839               	movf	sprintf@_val^(0+128),w
  3642  06EE  00F4               	movwf	___llmod@dividend
  3643  06EF  160A  158A  270C  120A  118A  	fcall	___llmod
  3644  06F4  0873               	movf	?___llmod+3,w
  3645  06F5  1683               	bsf	3,5	;RP0=1, select bank1
  3646  06F6  1303               	bcf	3,6	;RP1=0, select bank1
  3647  06F7  00BC               	movwf	(sprintf@_val+3)^(0+128)
  3648  06F8  0872               	movf	?___llmod+2,w
  3649  06F9  00BB               	movwf	(sprintf@_val+2)^(0+128)
  3650  06FA  0871               	movf	?___llmod+1,w
  3651  06FB  00BA               	movwf	(sprintf@_val+1)^(0+128)
  3652  06FC  0870               	movf	?___llmod,w
  3653  06FD  2E54               	goto	L7
  3654  06FE                     l3046:	
  3655                           ;doprnt.c: 1242: }
  3656                           ;doprnt.c: 1244: while(prec) {
  3657                           
  3658                           
  3659                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  3660  06FE  3030               	movlw	48
  3661  06FF  00A0               	movwf	??_sprintf^(0+128)
  3662  0700  0846               	movf	sprintf@sp^(0+128),w
  3663  0701  0084               	movwf	4
  3664  0702  0820               	movf	??_sprintf^(0+128),w
  3665  0703  1783               	bsf	3,7	;select IRP bank2
  3666  0704  0080               	movwf	0
  3667  0705  3001               	movlw	1
  3668  0706  00A0               	movwf	??_sprintf^(0+128)
  3669  0707  0820               	movf	??_sprintf^(0+128),w
  3670  0708  07C6               	addwf	sprintf@sp^(0+128),f
  3671                           
  3672                           ;doprnt.c: 1246: prec--;
  3673  0709  30FF               	movlw	255
  3674  070A  07C7               	addwf	sprintf@prec^(0+128),f
  3675  070B  1803               	skipnc
  3676  070C  0AC8               	incf	(sprintf@prec+1)^(0+128),f
  3677  070D  30FF               	movlw	255
  3678  070E  07C8               	addwf	(sprintf@prec+1)^(0+128),f
  3679  070F                     l3052:	
  3680  070F  0848               	movf	(sprintf@prec+1)^(0+128),w
  3681  0710  0447               	iorwf	sprintf@prec^(0+128),w
  3682  0711  1903               	btfsc	3,2
  3683  0712  28E3               	goto	l3100
  3684  0713  2EFE               	goto	l3046
  3685  0714                     l3054:	
  3686                           ;doprnt.c: 1247: }
  3687                           ;doprnt.c: 1254: continue;
  3688                           
  3689                           
  3690                           ;doprnt.c: 1255: }
  3691                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  3692  0714  0848               	movf	(sprintf@prec+1)^(0+128),w
  3693  0715  0447               	iorwf	sprintf@prec^(0+128),w
  3694  0716  1D03               	skipz
  3695  0717  2F24               	goto	l439
  3696  0718  083C               	movf	(sprintf@_val+3)^(0+128),w
  3697  0719  043B               	iorwf	(sprintf@_val+2)^(0+128),w
  3698  071A  043A               	iorwf	(sprintf@_val+1)^(0+128),w
  3699  071B  0439               	iorwf	sprintf@_val^(0+128),w
  3700  071C  1D03               	skipz
  3701  071D  2F24               	goto	l439
  3702                           
  3703                           ;doprnt.c: 1300: prec++;
  3704  071E  3001               	movlw	1
  3705  071F  07C7               	addwf	sprintf@prec^(0+128),f
  3706  0720  1803               	skipnc
  3707  0721  0AC8               	incf	(sprintf@prec+1)^(0+128),f
  3708  0722  3000               	movlw	0
  3709  0723  07C8               	addwf	(sprintf@prec+1)^(0+128),f
  3710  0724                     l439:	
  3711                           
  3712                           ;doprnt.c: 1348: if(c < prec)
  3713  0724  0849               	movf	sprintf@c^(0+128),w
  3714  0725  00A0               	movwf	??_sprintf^(0+128)
  3715  0726  01A1               	clrf	(??_sprintf^(0+128)+1)
  3716  0727  1BA0               	btfsc	??_sprintf^(0+128),7
  3717  0728  03A1               	decf	(??_sprintf^(0+128)+1),f
  3718  0729  0821               	movf	(??_sprintf+1)^(0+128),w
  3719  072A  3A80               	xorlw	128
  3720  072B  00A2               	movwf	(??_sprintf+2)^(0+128)
  3721  072C  0848               	movf	(sprintf@prec+1)^(0+128),w
  3722  072D  3A80               	xorlw	128
  3723  072E  0222               	subwf	(??_sprintf+2)^(0+128),w
  3724  072F  1D03               	skipz
  3725  0730  2F33               	goto	u4485
  3726  0731  0847               	movf	sprintf@prec^(0+128),w
  3727  0732  0220               	subwf	??_sprintf^(0+128),w
  3728  0733                     u4485:	
  3729  0733  1803               	skipnc
  3730  0734  2F3C               	goto	l3062
  3731                           
  3732                           ;doprnt.c: 1349: c = prec;
  3733  0735  1683               	bsf	3,5	;RP0=1, select bank1
  3734  0736  1303               	bcf	3,6	;RP1=0, select bank1
  3735  0737  0847               	movf	sprintf@prec^(0+128),w
  3736  0738  00A0               	movwf	??_sprintf^(0+128)
  3737  0739  0820               	movf	??_sprintf^(0+128),w
  3738  073A  00C9               	movwf	sprintf@c^(0+128)
  3739  073B  2F56               	goto	l3066
  3740  073C                     l3062:	
  3741                           
  3742                           ;doprnt.c: 1350: else if(prec < c)
  3743  073C  1683               	bsf	3,5	;RP0=1, select bank1
  3744  073D  1303               	bcf	3,6	;RP1=0, select bank1
  3745  073E  0849               	movf	sprintf@c^(0+128),w
  3746  073F  00A0               	movwf	??_sprintf^(0+128)
  3747  0740  01A1               	clrf	(??_sprintf^(0+128)+1)
  3748  0741  1BA0               	btfsc	??_sprintf^(0+128),7
  3749  0742  03A1               	decf	(??_sprintf^(0+128)+1),f
  3750  0743  0848               	movf	(sprintf@prec+1)^(0+128),w
  3751  0744  3A80               	xorlw	128
  3752  0745  00A2               	movwf	(??_sprintf+2)^(0+128)
  3753  0746  0821               	movf	(??_sprintf+1)^(0+128),w
  3754  0747  3A80               	xorlw	128
  3755  0748  0222               	subwf	(??_sprintf+2)^(0+128),w
  3756  0749  1D03               	skipz
  3757  074A  2F4D               	goto	u4495
  3758  074B  0820               	movf	??_sprintf^(0+128),w
  3759  074C  0247               	subwf	sprintf@prec^(0+128),w
  3760  074D                     u4495:	
  3761  074D  1803               	skipnc
  3762  074E  2F56               	goto	l3066
  3763                           
  3764                           ;doprnt.c: 1351: prec = c;
  3765  074F  1683               	bsf	3,5	;RP0=1, select bank1
  3766  0750  1303               	bcf	3,6	;RP1=0, select bank1
  3767  0751  0849               	movf	sprintf@c^(0+128),w
  3768  0752  00C7               	movwf	sprintf@prec^(0+128)
  3769  0753  01C8               	clrf	(sprintf@prec+1)^(0+128)
  3770  0754  1BC7               	btfsc	sprintf@prec^(0+128),7
  3771  0755  03C8               	decf	(sprintf@prec+1)^(0+128),f
  3772  0756                     l3066:	
  3773                           
  3774                           ;doprnt.c: 1354: if(width && flag & 0x03)
  3775  0756  1683               	bsf	3,5	;RP0=1, select bank1
  3776  0757  1303               	bcf	3,6	;RP1=0, select bank1
  3777  0758  0840               	movf	(sprintf@width+1)^(0+128),w
  3778  0759  043F               	iorwf	sprintf@width^(0+128),w
  3779  075A  1903               	skipnz
  3780  075B  2F6C               	goto	l3072
  3781  075C  3003               	movlw	3
  3782  075D  053D               	andwf	sprintf@flag^(0+128),w
  3783  075E  00A0               	movwf	??_sprintf^(0+128)
  3784  075F  3000               	movlw	0
  3785  0760  053E               	andwf	(sprintf@flag+1)^(0+128),w
  3786  0761  00A1               	movwf	(??_sprintf+1)^(0+128)
  3787  0762  0821               	movf	(??_sprintf+1)^(0+128),w
  3788  0763  0420               	iorwf	??_sprintf^(0+128),w
  3789  0764  1903               	skipnz
  3790  0765  2F6C               	goto	l3072
  3791                           
  3792                           ;doprnt.c: 1355: width--;
  3793  0766  30FF               	movlw	255
  3794  0767  07BF               	addwf	sprintf@width^(0+128),f
  3795  0768  1803               	skipnc
  3796  0769  0AC0               	incf	(sprintf@width+1)^(0+128),f
  3797  076A  30FF               	movlw	255
  3798  076B  07C0               	addwf	(sprintf@width+1)^(0+128),f
  3799  076C                     l3072:	
  3800                           
  3801                           ;doprnt.c: 1357: if(flag & 0x4000) {
  3802  076C  1F3E               	btfss	(sprintf@flag+1)^(0+128),6
  3803  076D  2F87               	goto	l3080
  3804                           
  3805                           ;doprnt.c: 1358: if(width > prec)
  3806  076E  0848               	movf	(sprintf@prec+1)^(0+128),w
  3807  076F  3A80               	xorlw	128
  3808  0770  00A0               	movwf	??_sprintf^(0+128)
  3809  0771  0840               	movf	(sprintf@width+1)^(0+128),w
  3810  0772  3A80               	xorlw	128
  3811  0773  0220               	subwf	??_sprintf^(0+128),w
  3812  0774  1D03               	skipz
  3813  0775  2F78               	goto	u4535
  3814  0776  083F               	movf	sprintf@width^(0+128),w
  3815  0777  0247               	subwf	sprintf@prec^(0+128),w
  3816  0778                     u4535:	
  3817  0778  1803               	skipnc
  3818  0779  2F83               	goto	l3078
  3819                           
  3820                           ;doprnt.c: 1359: width -= prec;
  3821  077A  1683               	bsf	3,5	;RP0=1, select bank1
  3822  077B  1303               	bcf	3,6	;RP1=0, select bank1
  3823  077C  0847               	movf	sprintf@prec^(0+128),w
  3824  077D  02BF               	subwf	sprintf@width^(0+128),f
  3825  077E  0848               	movf	(sprintf@prec+1)^(0+128),w
  3826  077F  1C03               	skipc
  3827  0780  03C0               	decf	(sprintf@width+1)^(0+128),f
  3828  0781  02C0               	subwf	(sprintf@width+1)^(0+128),f
  3829  0782  2F87               	goto	l3080
  3830  0783                     l3078:	
  3831                           
  3832                           ;doprnt.c: 1360: else
  3833                           ;doprnt.c: 1361: width = 0;
  3834  0783  1683               	bsf	3,5	;RP0=1, select bank1
  3835  0784  1303               	bcf	3,6	;RP1=0, select bank1
  3836  0785  01BF               	clrf	sprintf@width^(0+128)
  3837  0786  01C0               	clrf	(sprintf@width+1)^(0+128)
  3838  0787                     l3080:	
  3839                           
  3840                           ;doprnt.c: 1362: }
  3841                           ;doprnt.c: 1390: if(width > c)
  3842  0787  0849               	movf	sprintf@c^(0+128),w
  3843  0788  00A0               	movwf	??_sprintf^(0+128)
  3844  0789  01A1               	clrf	(??_sprintf^(0+128)+1)
  3845  078A  1BA0               	btfsc	??_sprintf^(0+128),7
  3846  078B  03A1               	decf	(??_sprintf^(0+128)+1),f
  3847  078C  0821               	movf	(??_sprintf+1)^(0+128),w
  3848  078D  3A80               	xorlw	128
  3849  078E  00A2               	movwf	(??_sprintf+2)^(0+128)
  3850  078F  0840               	movf	(sprintf@width+1)^(0+128),w
  3851  0790  3A80               	xorlw	128
  3852  0791  0222               	subwf	(??_sprintf+2)^(0+128),w
  3853  0792  1D03               	skipz
  3854  0793  2F96               	goto	u4545
  3855  0794  083F               	movf	sprintf@width^(0+128),w
  3856  0795  0220               	subwf	??_sprintf^(0+128),w
  3857  0796                     u4545:	
  3858  0796  1803               	skipnc
  3859  0797  2FA6               	goto	l3084
  3860                           
  3861                           ;doprnt.c: 1391: width -= c;
  3862  0798  1683               	bsf	3,5	;RP0=1, select bank1
  3863  0799  1303               	bcf	3,6	;RP1=0, select bank1
  3864  079A  0849               	movf	sprintf@c^(0+128),w
  3865  079B  00A0               	movwf	??_sprintf^(0+128)
  3866  079C  01A1               	clrf	(??_sprintf^(0+128)+1)
  3867  079D  1BA0               	btfsc	??_sprintf^(0+128),7
  3868  079E  03A1               	decf	(??_sprintf^(0+128)+1),f
  3869  079F  0820               	movf	??_sprintf^(0+128),w
  3870  07A0  02BF               	subwf	sprintf@width^(0+128),f
  3871  07A1  0821               	movf	(??_sprintf+1)^(0+128),w
  3872  07A2  1C03               	skipc
  3873  07A3  03C0               	decf	(sprintf@width+1)^(0+128),f
  3874  07A4  02C0               	subwf	(sprintf@width+1)^(0+128),f
  3875  07A5  2FAA               	goto	l3086
  3876  07A6                     l3084:	
  3877                           
  3878                           ;doprnt.c: 1392: else
  3879                           ;doprnt.c: 1393: width = 0;
  3880  07A6  1683               	bsf	3,5	;RP0=1, select bank1
  3881  07A7  1303               	bcf	3,6	;RP1=0, select bank1
  3882  07A8  01BF               	clrf	sprintf@width^(0+128)
  3883  07A9  01C0               	clrf	(sprintf@width+1)^(0+128)
  3884  07AA                     l3086:	
  3885                           
  3886                           ;doprnt.c: 1431: {
  3887                           ;doprnt.c: 1433: if(width
  3888                           ;doprnt.c: 1437: )
  3889  07AA  0840               	movf	(sprintf@width+1)^(0+128),w
  3890  07AB  043F               	iorwf	sprintf@width^(0+128),w
  3891  07AC  1903               	skipnz
  3892  07AD  2FC3               	goto	l3094
  3893  07AE                     l3088:	
  3894                           ;doprnt.c: 1438: do
  3895                           
  3896                           
  3897                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  3898  07AE  3020               	movlw	32
  3899  07AF  00A0               	movwf	??_sprintf^(0+128)
  3900  07B0  0846               	movf	sprintf@sp^(0+128),w
  3901  07B1  0084               	movwf	4
  3902  07B2  0820               	movf	??_sprintf^(0+128),w
  3903  07B3  1783               	bsf	3,7	;select IRP bank2
  3904  07B4  0080               	movwf	0
  3905  07B5  3001               	movlw	1
  3906  07B6  00A0               	movwf	??_sprintf^(0+128)
  3907  07B7  0820               	movf	??_sprintf^(0+128),w
  3908  07B8  07C6               	addwf	sprintf@sp^(0+128),f
  3909                           
  3910                           ;doprnt.c: 1440: while(--width);
  3911  07B9  30FF               	movlw	255
  3912  07BA  07BF               	addwf	sprintf@width^(0+128),f
  3913  07BB  1803               	skipnc
  3914  07BC  0AC0               	incf	(sprintf@width+1)^(0+128),f
  3915  07BD  30FF               	movlw	255
  3916  07BE  07C0               	addwf	(sprintf@width+1)^(0+128),f
  3917  07BF  0840               	movf	(sprintf@width+1)^(0+128),w
  3918  07C0  043F               	iorwf	sprintf@width^(0+128),w
  3919  07C1  1D03               	skipz
  3920  07C2  2FAE               	goto	l3088
  3921  07C3                     l3094:	
  3922                           
  3923                           ;doprnt.c: 1447: if(flag & 0x03)
  3924  07C3  3003               	movlw	3
  3925  07C4  053D               	andwf	sprintf@flag^(0+128),w
  3926  07C5  00A0               	movwf	??_sprintf^(0+128)
  3927  07C6  3000               	movlw	0
  3928  07C7  053E               	andwf	(sprintf@flag+1)^(0+128),w
  3929  07C8  00A1               	movwf	(??_sprintf+1)^(0+128)
  3930  07C9  0821               	movf	(??_sprintf+1)^(0+128),w
  3931  07CA  0420               	iorwf	??_sprintf^(0+128),w
  3932  07CB  1903               	skipnz
  3933  07CC  28E3               	goto	l3100
  3934                           
  3935                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  3936  07CD  302D               	movlw	45
  3937  07CE                     L8:	
  3938  07CE  00A0               	movwf	??_sprintf^(0+128)
  3939  07CF  0846               	movf	sprintf@sp^(0+128),w
  3940  07D0  0084               	movwf	4
  3941  07D1  0820               	movf	??_sprintf^(0+128),w
  3942  07D2  1783               	bsf	3,7	;select IRP bank2
  3943  07D3  0080               	movwf	0
  3944  07D4  3001               	movlw	1
  3945  07D5  00A0               	movwf	??_sprintf^(0+128)
  3946  07D6  0820               	movf	??_sprintf^(0+128),w
  3947  07D7  07C6               	addwf	sprintf@sp^(0+128),f
  3948  07D8  28E3               	goto	l3100
  3949  07D9                     l3102:	
  3950                           ;doprnt.c: 1478: }
  3951                           ;doprnt.c: 1542: }
  3952                           ;doprnt.c: 1544: alldone:
  3953                           
  3954                           
  3955                           ;doprnt.c: 1547: *sp = 0;
  3956  07D9  0846               	movf	sprintf@sp^(0+128),w
  3957  07DA  0084               	movwf	4
  3958  07DB  1783               	bsf	3,7	;select IRP bank2
  3959  07DC  0180               	clrf	0
  3960  07DD  0008               	return
  3961  07DE                     __end_of_sprintf:	
  3962                           ;doprnt.c: 1549: return 0;
  3963                           ;	Return value of _sprintf is never used
  3964                           
  3965                           
  3966                           	psect	text2
  3967  0A5C                     __ptext2:	
  3968 ;; *************** function _scale *****************
  3969 ;; Defined at:
  3970 ;;		line 425 in file "/opt/microchip/xc8/v1.33/sources/common/doprnt.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  scl             1    wreg     char 
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  scl             1   45[BANK0 ] char 
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  3   37[BANK0 ] char 
  3977 ;; Registers used:
  3978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3984 ;;      Params:         0       3       0       0       0
  3985 ;;      Locals:         0       4       0       0       0
  3986 ;;      Temps:          0       2       0       0       0
  3987 ;;      Totals:         0       9       0       0       0
  3988 ;;Total ram usage:        9 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    2
  3991 ;; This function calls:
  3992 ;;		___awdiv
  3993 ;;		___awmod
  3994 ;;		___bmul
  3995 ;;		___ftmul
  3996 ;; This function is called by:
  3997 ;;		_sprintf
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           
  4002                           ;psect for function _scale
  4003  0A5C                     _scale:	
  4004                           
  4005                           ;incstack = 0
  4006                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4007                           ;scale@scl stored from wreg
  4008  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  4009  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  4010  0A5E  00CD               	movwf	scale@scl
  4011                           
  4012                           ;doprnt.c: 428: if(scl < 0) {
  4013  0A5F  1FCD               	btfss	scale@scl,7
  4014  0A60  2BAF               	goto	l2478
  4015                           
  4016                           ;doprnt.c: 429: scl = -scl;
  4017  0A61  09CD               	comf	scale@scl,f
  4018  0A62  0ACD               	incf	scale@scl,f
  4019                           
  4020                           ;doprnt.c: 430: if(scl>=110)
  4021  0A63  084D               	movf	scale@scl,w
  4022  0A64  3A80               	xorlw	128
  4023  0A65  3E12               	addlw	-238
  4024  0A66  1C03               	skipc
  4025  0A67  2B22               	goto	l2468
  4026                           
  4027                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4028  0A68  3003               	movlw	3
  4029  0A69  00C8               	movwf	??_scale
  4030  0A6A  0848               	movf	??_scale,w
  4031  0A6B  00A4               	movwf	___bmul@multiplicand
  4032  0A6C  300A               	movlw	10
  4033  0A6D  00F7               	movwf	___awdiv@divisor
  4034  0A6E  3000               	movlw	0
  4035  0A6F  00F8               	movwf	___awdiv@divisor+1
  4036  0A70  084D               	movf	scale@scl,w
  4037  0A71  00F2               	movwf	___awmod@dividend
  4038  0A72  01F3               	clrf	___awmod@dividend+1
  4039  0A73  1BF2               	btfsc	___awmod@dividend,7
  4040  0A74  03F3               	decf	___awmod@dividend+1,f
  4041  0A75  3064               	movlw	100
  4042  0A76  00F0               	movwf	___awmod@divisor
  4043  0A77  3000               	movlw	0
  4044  0A78  00F1               	movwf	___awmod@divisor+1
  4045  0A79  160A  158A  2758  120A  158A  	fcall	___awmod
  4046  0A7E  0871               	movf	?___awmod+1,w
  4047  0A7F  01FA               	clrf	___awdiv@dividend+1
  4048  0A80  07FA               	addwf	___awdiv@dividend+1,f
  4049  0A81  0870               	movf	?___awmod,w
  4050  0A82  01F9               	clrf	___awdiv@dividend
  4051  0A83  07F9               	addwf	___awdiv@dividend,f
  4052  0A84  160A  118A  2119  120A  158A  	fcall	___awdiv
  4053  0A89  0877               	movf	?___awdiv,w
  4054  0A8A  3E09               	addlw	9
  4055  0A8B  120A  158A  2004  120A  158A  	fcall	___bmul
  4056  0A90  3E29               	addlw	low (__npowers_-__stringbase)
  4057  0A91  0084               	movwf	4
  4058  0A92  160A  118A  2000  120A  158A  	fcall	stringdir
  4059  0A97  1283               	bcf	3,5	;RP0=0, select bank0
  4060  0A98  1303               	bcf	3,6	;RP1=0, select bank0
  4061  0A99  00B5               	movwf	___ftmul@f1
  4062  0A9A  160A  118A  2000  120A  158A  	fcall	stringdir
  4063  0A9F  00B6               	movwf	___ftmul@f1+1
  4064  0AA0  160A  118A  2000  120A  158A  	fcall	stringdir
  4065  0AA5  00B7               	movwf	___ftmul@f1+2
  4066  0AA6  3003               	movlw	3
  4067  0AA7  00C9               	movwf	??_scale+1
  4068  0AA8  0849               	movf	??_scale+1,w
  4069  0AA9  00A4               	movwf	___bmul@multiplicand
  4070  0AAA  3064               	movlw	100
  4071  0AAB  00F7               	movwf	___awdiv@divisor
  4072  0AAC  3000               	movlw	0
  4073  0AAD  00F8               	movwf	___awdiv@divisor+1
  4074  0AAE  084D               	movf	scale@scl,w
  4075  0AAF  00F9               	movwf	___awdiv@dividend
  4076  0AB0  01FA               	clrf	___awdiv@dividend+1
  4077  0AB1  1BF9               	btfsc	___awdiv@dividend,7
  4078  0AB2  03FA               	decf	___awdiv@dividend+1,f
  4079  0AB3  160A  118A  2119  120A  158A  	fcall	___awdiv
  4080  0AB8  0877               	movf	?___awdiv,w
  4081  0AB9  3E12               	addlw	18
  4082  0ABA  120A  158A  2004  120A  158A  	fcall	___bmul
  4083  0ABF  3E29               	addlw	low (__npowers_-__stringbase)
  4084  0AC0  0084               	movwf	4
  4085  0AC1  160A  118A  2000  120A  158A  	fcall	stringdir
  4086  0AC6  1283               	bcf	3,5	;RP0=0, select bank0
  4087  0AC7  1303               	bcf	3,6	;RP1=0, select bank0
  4088  0AC8  00B8               	movwf	___ftmul@f2
  4089  0AC9  160A  118A  2000  120A  158A  	fcall	stringdir
  4090  0ACE  00B9               	movwf	___ftmul@f2+1
  4091  0ACF  160A  118A  2000  120A  158A  	fcall	stringdir
  4092  0AD4  00BA               	movwf	___ftmul@f2+2
  4093  0AD5  120A  118A  2009  120A  158A  	fcall	___ftmul
  4094  0ADA  1283               	bcf	3,5	;RP0=0, select bank0
  4095  0ADB  1303               	bcf	3,6	;RP1=0, select bank0
  4096  0ADC  0835               	movf	?___ftmul,w
  4097  0ADD  00CA               	movwf	_scale$875
  4098  0ADE  0836               	movf	?___ftmul+1,w
  4099  0ADF  00CB               	movwf	_scale$875+1
  4100  0AE0  0837               	movf	?___ftmul+2,w
  4101  0AE1  00CC               	movwf	_scale$875+2
  4102                           
  4103                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4104  0AE2  3003               	movlw	3
  4105  0AE3  00C8               	movwf	??_scale
  4106  0AE4  0848               	movf	??_scale,w
  4107  0AE5  00A4               	movwf	___bmul@multiplicand
  4108  0AE6  084D               	movf	scale@scl,w
  4109  0AE7  00F2               	movwf	___awmod@dividend
  4110  0AE8  01F3               	clrf	___awmod@dividend+1
  4111  0AE9  1BF2               	btfsc	___awmod@dividend,7
  4112  0AEA  03F3               	decf	___awmod@dividend+1,f
  4113  0AEB  300A               	movlw	10
  4114  0AEC  00F0               	movwf	___awmod@divisor
  4115  0AED  3000               	movlw	0
  4116  0AEE  00F1               	movwf	___awmod@divisor+1
  4117  0AEF  160A  158A  2758  120A  158A  	fcall	___awmod
  4118  0AF4  0870               	movf	?___awmod,w
  4119  0AF5  120A  158A  2004  120A  158A  	fcall	___bmul
  4120  0AFA  3E29               	addlw	low (__npowers_-__stringbase)
  4121  0AFB  0084               	movwf	4
  4122  0AFC  160A  118A  2000  120A  158A  	fcall	stringdir
  4123  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  4124  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  4125  0B03  00B5               	movwf	___ftmul@f1
  4126  0B04  160A  118A  2000  120A  158A  	fcall	stringdir
  4127  0B09  00B6               	movwf	___ftmul@f1+1
  4128  0B0A  160A  118A  2000  120A  158A  	fcall	stringdir
  4129  0B0F  00B7               	movwf	___ftmul@f1+2
  4130  0B10  084A               	movf	_scale$875,w
  4131  0B11  00B8               	movwf	___ftmul@f2
  4132  0B12  084B               	movf	_scale$875+1,w
  4133  0B13  00B9               	movwf	___ftmul@f2+1
  4134  0B14  084C               	movf	_scale$875+2,w
  4135  0B15  00BA               	movwf	___ftmul@f2+2
  4136  0B16  120A  118A  2009   	fcall	___ftmul
  4137  0B19  1283               	bcf	3,5	;RP0=0, select bank0
  4138  0B1A  1303               	bcf	3,6	;RP1=0, select bank0
  4139  0B1B  0835               	movf	?___ftmul,w
  4140  0B1C  00C5               	movwf	?_scale
  4141  0B1D  0836               	movf	?___ftmul+1,w
  4142  0B1E  00C6               	movwf	?_scale+1
  4143  0B1F  0837               	movf	?___ftmul+2,w
  4144  0B20  00C7               	movwf	?_scale+2
  4145  0B21  0008               	return
  4146  0B22                     l2468:	
  4147                           
  4148                           ;doprnt.c: 432: else if(scl > 10)
  4149  0B22  084D               	movf	scale@scl,w
  4150  0B23  3A80               	xorlw	128
  4151  0B24  3E75               	addlw	-139
  4152  0B25  1C03               	skipc
  4153  0B26  2B90               	goto	l2474
  4154                           
  4155                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4156  0B27  3003               	movlw	3
  4157  0B28  00C8               	movwf	??_scale
  4158  0B29  0848               	movf	??_scale,w
  4159  0B2A  00A4               	movwf	___bmul@multiplicand
  4160  0B2B  084D               	movf	scale@scl,w
  4161  0B2C  00F2               	movwf	___awmod@dividend
  4162  0B2D  01F3               	clrf	___awmod@dividend+1
  4163  0B2E  1BF2               	btfsc	___awmod@dividend,7
  4164  0B2F  03F3               	decf	___awmod@dividend+1,f
  4165  0B30  300A               	movlw	10
  4166  0B31  00F0               	movwf	___awmod@divisor
  4167  0B32  3000               	movlw	0
  4168  0B33  00F1               	movwf	___awmod@divisor+1
  4169  0B34  160A  158A  2758  120A  158A  	fcall	___awmod
  4170  0B39  0870               	movf	?___awmod,w
  4171  0B3A  120A  158A  2004  120A  158A  	fcall	___bmul
  4172  0B3F  3E29               	addlw	low (__npowers_-__stringbase)
  4173  0B40  0084               	movwf	4
  4174  0B41  160A  118A  2000  120A  158A  	fcall	stringdir
  4175  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  4176  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  4177  0B48  00B5               	movwf	___ftmul@f1
  4178  0B49  160A  118A  2000  120A  158A  	fcall	stringdir
  4179  0B4E  00B6               	movwf	___ftmul@f1+1
  4180  0B4F  160A  118A  2000  120A  158A  	fcall	stringdir
  4181  0B54  00B7               	movwf	___ftmul@f1+2
  4182  0B55  3003               	movlw	3
  4183  0B56  00C9               	movwf	??_scale+1
  4184  0B57  0849               	movf	??_scale+1,w
  4185  0B58  00A4               	movwf	___bmul@multiplicand
  4186  0B59  300A               	movlw	10
  4187  0B5A  00F7               	movwf	___awdiv@divisor
  4188  0B5B  3000               	movlw	0
  4189  0B5C  00F8               	movwf	___awdiv@divisor+1
  4190  0B5D  084D               	movf	scale@scl,w
  4191  0B5E  00F9               	movwf	___awdiv@dividend
  4192  0B5F  01FA               	clrf	___awdiv@dividend+1
  4193  0B60  1BF9               	btfsc	___awdiv@dividend,7
  4194  0B61  03FA               	decf	___awdiv@dividend+1,f
  4195  0B62  160A  118A  2119  120A  158A  	fcall	___awdiv
  4196  0B67  0877               	movf	?___awdiv,w
  4197  0B68  3E09               	addlw	9
  4198  0B69  120A  158A  2004  120A  158A  	fcall	___bmul
  4199  0B6E  3E29               	addlw	low (__npowers_-__stringbase)
  4200  0B6F  0084               	movwf	4
  4201  0B70  160A  118A  2000  120A  158A  	fcall	stringdir
  4202  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  4203  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  4204  0B77  00B8               	movwf	___ftmul@f2
  4205  0B78  160A  118A  2000  120A  158A  	fcall	stringdir
  4206  0B7D  00B9               	movwf	___ftmul@f2+1
  4207  0B7E  160A  118A  2000  120A  158A  	fcall	stringdir
  4208  0B83  00BA               	movwf	___ftmul@f2+2
  4209  0B84  120A  118A  2009   	fcall	___ftmul
  4210  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  4211  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  4212  0B89  0835               	movf	?___ftmul,w
  4213  0B8A  00C5               	movwf	?_scale
  4214  0B8B  0836               	movf	?___ftmul+1,w
  4215  0B8C  00C6               	movwf	?_scale+1
  4216  0B8D  0837               	movf	?___ftmul+2,w
  4217  0B8E  00C7               	movwf	?_scale+2
  4218  0B8F  0008               	return
  4219  0B90                     l2474:	
  4220                           
  4221                           ;doprnt.c: 434: return _npowers_[scl];
  4222  0B90  3003               	movlw	3
  4223  0B91  00C8               	movwf	??_scale
  4224  0B92  0848               	movf	??_scale,w
  4225  0B93  00A4               	movwf	___bmul@multiplicand
  4226  0B94  084D               	movf	scale@scl,w
  4227  0B95  120A  158A  2004  120A  158A  	fcall	___bmul
  4228  0B9A  3E29               	addlw	low (__npowers_-__stringbase)
  4229  0B9B  0084               	movwf	4
  4230  0B9C  160A  118A  2000  120A  158A  	fcall	stringdir
  4231  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  4232  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  4233  0BA3  00C5               	movwf	?_scale
  4234  0BA4  160A  118A  2000  120A  158A  	fcall	stringdir
  4235  0BA9  00C6               	movwf	?_scale+1
  4236  0BAA  160A  118A  2000   	fcall	stringdir
  4237  0BAD  00C7               	movwf	?_scale+2
  4238  0BAE  0008               	return
  4239  0BAF                     l2478:	
  4240                           
  4241                           ;doprnt.c: 435: }
  4242                           ;doprnt.c: 436: if(scl>=110)
  4243  0BAF  084D               	movf	scale@scl,w
  4244  0BB0  3A80               	xorlw	128
  4245  0BB1  3E12               	addlw	-238
  4246  0BB2  1C03               	skipc
  4247  0BB3  2C6E               	goto	l2486
  4248                           
  4249                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4250  0BB4  3003               	movlw	3
  4251  0BB5  00C8               	movwf	??_scale
  4252  0BB6  0848               	movf	??_scale,w
  4253  0BB7  00A4               	movwf	___bmul@multiplicand
  4254  0BB8  300A               	movlw	10
  4255  0BB9  00F7               	movwf	___awdiv@divisor
  4256  0BBA  3000               	movlw	0
  4257  0BBB  00F8               	movwf	___awdiv@divisor+1
  4258  0BBC  084D               	movf	scale@scl,w
  4259  0BBD  00F2               	movwf	___awmod@dividend
  4260  0BBE  01F3               	clrf	___awmod@dividend+1
  4261  0BBF  1BF2               	btfsc	___awmod@dividend,7
  4262  0BC0  03F3               	decf	___awmod@dividend+1,f
  4263  0BC1  3064               	movlw	100
  4264  0BC2  00F0               	movwf	___awmod@divisor
  4265  0BC3  3000               	movlw	0
  4266  0BC4  00F1               	movwf	___awmod@divisor+1
  4267  0BC5  160A  158A  2758  120A  158A  	fcall	___awmod
  4268  0BCA  0871               	movf	?___awmod+1,w
  4269  0BCB  01FA               	clrf	___awdiv@dividend+1
  4270  0BCC  07FA               	addwf	___awdiv@dividend+1,f
  4271  0BCD  0870               	movf	?___awmod,w
  4272  0BCE  01F9               	clrf	___awdiv@dividend
  4273  0BCF  07F9               	addwf	___awdiv@dividend,f
  4274  0BD0  160A  118A  2119  120A  158A  	fcall	___awdiv
  4275  0BD5  0877               	movf	?___awdiv,w
  4276  0BD6  3E09               	addlw	9
  4277  0BD7  120A  158A  2004  120A  158A  	fcall	___bmul
  4278  0BDC  3E50               	addlw	low (__powers_-__stringbase)
  4279  0BDD  0084               	movwf	4
  4280  0BDE  160A  118A  2000  120A  158A  	fcall	stringdir
  4281  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  4282  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  4283  0BE5  00B5               	movwf	___ftmul@f1
  4284  0BE6  160A  118A  2000  120A  158A  	fcall	stringdir
  4285  0BEB  00B6               	movwf	___ftmul@f1+1
  4286  0BEC  160A  118A  2000  120A  158A  	fcall	stringdir
  4287  0BF1  00B7               	movwf	___ftmul@f1+2
  4288  0BF2  3003               	movlw	3
  4289  0BF3  00C9               	movwf	??_scale+1
  4290  0BF4  0849               	movf	??_scale+1,w
  4291  0BF5  00A4               	movwf	___bmul@multiplicand
  4292  0BF6  3064               	movlw	100
  4293  0BF7  00F7               	movwf	___awdiv@divisor
  4294  0BF8  3000               	movlw	0
  4295  0BF9  00F8               	movwf	___awdiv@divisor+1
  4296  0BFA  084D               	movf	scale@scl,w
  4297  0BFB  00F9               	movwf	___awdiv@dividend
  4298  0BFC  01FA               	clrf	___awdiv@dividend+1
  4299  0BFD  1BF9               	btfsc	___awdiv@dividend,7
  4300  0BFE  03FA               	decf	___awdiv@dividend+1,f
  4301  0BFF  160A  118A  2119  120A  158A  	fcall	___awdiv
  4302  0C04  0877               	movf	?___awdiv,w
  4303  0C05  3E12               	addlw	18
  4304  0C06  120A  158A  2004  120A  158A  	fcall	___bmul
  4305  0C0B  3E50               	addlw	low (__powers_-__stringbase)
  4306  0C0C  0084               	movwf	4
  4307  0C0D  160A  118A  2000  120A  158A  	fcall	stringdir
  4308  0C12  1283               	bcf	3,5	;RP0=0, select bank0
  4309  0C13  1303               	bcf	3,6	;RP1=0, select bank0
  4310  0C14  00B8               	movwf	___ftmul@f2
  4311  0C15  160A  118A  2000  120A  158A  	fcall	stringdir
  4312  0C1A  00B9               	movwf	___ftmul@f2+1
  4313  0C1B  160A  118A  2000  120A  158A  	fcall	stringdir
  4314  0C20  00BA               	movwf	___ftmul@f2+2
  4315  0C21  120A  118A  2009  120A  158A  	fcall	___ftmul
  4316  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  4317  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  4318  0C28  0835               	movf	?___ftmul,w
  4319  0C29  00CA               	movwf	_scale$875
  4320  0C2A  0836               	movf	?___ftmul+1,w
  4321  0C2B  00CB               	movwf	_scale$875+1
  4322  0C2C  0837               	movf	?___ftmul+2,w
  4323  0C2D  00CC               	movwf	_scale$875+2
  4324                           
  4325                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4326  0C2E  3003               	movlw	3
  4327  0C2F  00C8               	movwf	??_scale
  4328  0C30  0848               	movf	??_scale,w
  4329  0C31  00A4               	movwf	___bmul@multiplicand
  4330  0C32  084D               	movf	scale@scl,w
  4331  0C33  00F2               	movwf	___awmod@dividend
  4332  0C34  01F3               	clrf	___awmod@dividend+1
  4333  0C35  1BF2               	btfsc	___awmod@dividend,7
  4334  0C36  03F3               	decf	___awmod@dividend+1,f
  4335  0C37  300A               	movlw	10
  4336  0C38  00F0               	movwf	___awmod@divisor
  4337  0C39  3000               	movlw	0
  4338  0C3A  00F1               	movwf	___awmod@divisor+1
  4339  0C3B  160A  158A  2758  120A  158A  	fcall	___awmod
  4340  0C40  0870               	movf	?___awmod,w
  4341  0C41  120A  158A  2004  120A  158A  	fcall	___bmul
  4342  0C46  3E50               	addlw	low (__powers_-__stringbase)
  4343  0C47  0084               	movwf	4
  4344  0C48  160A  118A  2000  120A  158A  	fcall	stringdir
  4345  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  4346  0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  4347  0C4F  00B5               	movwf	___ftmul@f1
  4348  0C50  160A  118A  2000  120A  158A  	fcall	stringdir
  4349  0C55  00B6               	movwf	___ftmul@f1+1
  4350  0C56  160A  118A  2000  120A  158A  	fcall	stringdir
  4351  0C5B  00B7               	movwf	___ftmul@f1+2
  4352  0C5C  084A               	movf	_scale$875,w
  4353  0C5D  00B8               	movwf	___ftmul@f2
  4354  0C5E  084B               	movf	_scale$875+1,w
  4355  0C5F  00B9               	movwf	___ftmul@f2+1
  4356  0C60  084C               	movf	_scale$875+2,w
  4357  0C61  00BA               	movwf	___ftmul@f2+2
  4358  0C62  120A  118A  2009   	fcall	___ftmul
  4359  0C65  1283               	bcf	3,5	;RP0=0, select bank0
  4360  0C66  1303               	bcf	3,6	;RP1=0, select bank0
  4361  0C67  0835               	movf	?___ftmul,w
  4362  0C68  00C5               	movwf	?_scale
  4363  0C69  0836               	movf	?___ftmul+1,w
  4364  0C6A  00C6               	movwf	?_scale+1
  4365  0C6B  0837               	movf	?___ftmul+2,w
  4366  0C6C  00C7               	movwf	?_scale+2
  4367  0C6D  0008               	return
  4368  0C6E                     l2486:	
  4369                           
  4370                           ;doprnt.c: 438: else if(scl > 10)
  4371  0C6E  084D               	movf	scale@scl,w
  4372  0C6F  3A80               	xorlw	128
  4373  0C70  3E75               	addlw	-139
  4374  0C71  1C03               	skipc
  4375  0C72  2CDC               	goto	l2492
  4376                           
  4377                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4378  0C73  3003               	movlw	3
  4379  0C74  00C8               	movwf	??_scale
  4380  0C75  0848               	movf	??_scale,w
  4381  0C76  00A4               	movwf	___bmul@multiplicand
  4382  0C77  084D               	movf	scale@scl,w
  4383  0C78  00F2               	movwf	___awmod@dividend
  4384  0C79  01F3               	clrf	___awmod@dividend+1
  4385  0C7A  1BF2               	btfsc	___awmod@dividend,7
  4386  0C7B  03F3               	decf	___awmod@dividend+1,f
  4387  0C7C  300A               	movlw	10
  4388  0C7D  00F0               	movwf	___awmod@divisor
  4389  0C7E  3000               	movlw	0
  4390  0C7F  00F1               	movwf	___awmod@divisor+1
  4391  0C80  160A  158A  2758  120A  158A  	fcall	___awmod
  4392  0C85  0870               	movf	?___awmod,w
  4393  0C86  120A  158A  2004  120A  158A  	fcall	___bmul
  4394  0C8B  3E50               	addlw	low (__powers_-__stringbase)
  4395  0C8C  0084               	movwf	4
  4396  0C8D  160A  118A  2000  120A  158A  	fcall	stringdir
  4397  0C92  1283               	bcf	3,5	;RP0=0, select bank0
  4398  0C93  1303               	bcf	3,6	;RP1=0, select bank0
  4399  0C94  00B5               	movwf	___ftmul@f1
  4400  0C95  160A  118A  2000  120A  158A  	fcall	stringdir
  4401  0C9A  00B6               	movwf	___ftmul@f1+1
  4402  0C9B  160A  118A  2000  120A  158A  	fcall	stringdir
  4403  0CA0  00B7               	movwf	___ftmul@f1+2
  4404  0CA1  3003               	movlw	3
  4405  0CA2  00C9               	movwf	??_scale+1
  4406  0CA3  0849               	movf	??_scale+1,w
  4407  0CA4  00A4               	movwf	___bmul@multiplicand
  4408  0CA5  300A               	movlw	10
  4409  0CA6  00F7               	movwf	___awdiv@divisor
  4410  0CA7  3000               	movlw	0
  4411  0CA8  00F8               	movwf	___awdiv@divisor+1
  4412  0CA9  084D               	movf	scale@scl,w
  4413  0CAA  00F9               	movwf	___awdiv@dividend
  4414  0CAB  01FA               	clrf	___awdiv@dividend+1
  4415  0CAC  1BF9               	btfsc	___awdiv@dividend,7
  4416  0CAD  03FA               	decf	___awdiv@dividend+1,f
  4417  0CAE  160A  118A  2119  120A  158A  	fcall	___awdiv
  4418  0CB3  0877               	movf	?___awdiv,w
  4419  0CB4  3E09               	addlw	9
  4420  0CB5  120A  158A  2004  120A  158A  	fcall	___bmul
  4421  0CBA  3E50               	addlw	low (__powers_-__stringbase)
  4422  0CBB  0084               	movwf	4
  4423  0CBC  160A  118A  2000  120A  158A  	fcall	stringdir
  4424  0CC1  1283               	bcf	3,5	;RP0=0, select bank0
  4425  0CC2  1303               	bcf	3,6	;RP1=0, select bank0
  4426  0CC3  00B8               	movwf	___ftmul@f2
  4427  0CC4  160A  118A  2000  120A  158A  	fcall	stringdir
  4428  0CC9  00B9               	movwf	___ftmul@f2+1
  4429  0CCA  160A  118A  2000  120A  158A  	fcall	stringdir
  4430  0CCF  00BA               	movwf	___ftmul@f2+2
  4431  0CD0  120A  118A  2009   	fcall	___ftmul
  4432  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  4433  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  4434  0CD5  0835               	movf	?___ftmul,w
  4435  0CD6  00C5               	movwf	?_scale
  4436  0CD7  0836               	movf	?___ftmul+1,w
  4437  0CD8  00C6               	movwf	?_scale+1
  4438  0CD9  0837               	movf	?___ftmul+2,w
  4439  0CDA  00C7               	movwf	?_scale+2
  4440  0CDB  0008               	return
  4441  0CDC                     l2492:	
  4442                           
  4443                           ;doprnt.c: 440: return _powers_[scl];
  4444  0CDC  3003               	movlw	3
  4445  0CDD  00C8               	movwf	??_scale
  4446  0CDE  0848               	movf	??_scale,w
  4447  0CDF  00A4               	movwf	___bmul@multiplicand
  4448  0CE0  084D               	movf	scale@scl,w
  4449  0CE1  120A  158A  2004  120A  158A  	fcall	___bmul
  4450  0CE6  3E50               	addlw	low (__powers_-__stringbase)
  4451  0CE7  0084               	movwf	4
  4452  0CE8  160A  118A  2000  120A  158A  	fcall	stringdir
  4453  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  4454  0CEE  1303               	bcf	3,6	;RP1=0, select bank0
  4455  0CEF  00C5               	movwf	?_scale
  4456  0CF0  160A  118A  2000  120A  158A  	fcall	stringdir
  4457  0CF5  00C6               	movwf	?_scale+1
  4458  0CF6  160A  118A  2000   	fcall	stringdir
  4459  0CF9  00C7               	movwf	?_scale+2
  4460  0CFA  0008               	return
  4461  0CFB                     __end_of_scale:	
  4462                           
  4463                           	psect	text3
  4464  1E53                     __ptext3:	
  4465 ;; *************** function _isdigit *****************
  4466 ;; Defined at:
  4467 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/common/isdigit.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;  c               1    wreg     unsigned char 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  c               1    1[COMMON] unsigned char 
  4472 ;; Return value:  Size  Location     Type
  4473 ;;		None               void
  4474 ;; Registers used:
  4475 ;;		wreg, status,2, status,0
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4481 ;;      Params:         0       0       0       0       0
  4482 ;;      Locals:         2       0       0       0       0
  4483 ;;      Temps:          0       0       0       0       0
  4484 ;;      Totals:         2       0       0       0       0
  4485 ;;Total ram usage:        2 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; This function calls:
  4488 ;;		Nothing
  4489 ;; This function is called by:
  4490 ;;		_sprintf
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function _isdigit
  4496  1E53                     _isdigit:	
  4497                           
  4498                           ;incstack = 0
  4499                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4500                           ;isdigit@c stored from wreg
  4501  1E53  00F1               	movwf	isdigit@c
  4502  1E54  01F0               	clrf	_isdigit$663
  4503  1E55  303A               	movlw	58
  4504  1E56  0271               	subwf	isdigit@c,w
  4505  1E57  1803               	skipnc
  4506  1E58  2E5F               	goto	l2504
  4507  1E59  3030               	movlw	48
  4508  1E5A  0271               	subwf	isdigit@c,w
  4509  1E5B  1C03               	skipc
  4510  1E5C  2E5F               	goto	l2504
  4511  1E5D  01F0               	clrf	_isdigit$663
  4512  1E5E  0AF0               	incf	_isdigit$663,f
  4513  1E5F                     l2504:	
  4514  1E5F  0C70               	rrf	_isdigit$663,w
  4515  1E60  0008               	return
  4516  1E61                     __end_of_isdigit:	
  4517                           
  4518                           	psect	text4
  4519  08C0                     __ptext4:	
  4520 ;; *************** function _fround *****************
  4521 ;; Defined at:
  4522 ;;		line 409 in file "/opt/microchip/xc8/v1.33/sources/common/doprnt.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  prec            1    wreg     unsigned char 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  prec            1   52[BANK0 ] unsigned char 
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  3   37[BANK0 ] unsigned char 
  4529 ;; Registers used:
  4530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4536 ;;      Params:         0       3       0       0       0
  4537 ;;      Locals:         0       7       0       0       0
  4538 ;;      Temps:          0       6       0       0       0
  4539 ;;      Totals:         0      16       0       0       0
  4540 ;;Total ram usage:       16 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    2
  4543 ;; This function calls:
  4544 ;;		___awdiv
  4545 ;;		___awmod
  4546 ;;		___bmul
  4547 ;;		___ftmul
  4548 ;; This function is called by:
  4549 ;;		_sprintf
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           
  4554                           ;psect for function _fround
  4555  08C0                     _fround:	
  4556                           
  4557                           ;incstack = 0
  4558                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4559                           ;fround@prec stored from wreg
  4560  08C0  1283               	bcf	3,5	;RP0=0, select bank0
  4561  08C1  1303               	bcf	3,6	;RP1=0, select bank0
  4562  08C2  00D4               	movwf	fround@prec
  4563                           
  4564                           ;doprnt.c: 413: if(prec>=110)
  4565  08C3  306E               	movlw	110
  4566  08C4  0254               	subwf	fround@prec,w
  4567  08C5  1C03               	skipc
  4568  08C6  29A0               	goto	l2444
  4569                           
  4570                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4571  08C7  3003               	movlw	3
  4572  08C8  00C8               	movwf	??_fround
  4573  08C9  0848               	movf	??_fround,w
  4574  08CA  00A4               	movwf	___bmul@multiplicand
  4575  08CB  300A               	movlw	10
  4576  08CC  00F7               	movwf	___awdiv@divisor
  4577  08CD  3000               	movlw	0
  4578  08CE  00F8               	movwf	___awdiv@divisor+1
  4579  08CF  0854               	movf	fround@prec,w
  4580  08D0  00C9               	movwf	??_fround+1
  4581  08D1  01CA               	clrf	??_fround+2
  4582  08D2  0849               	movf	??_fround+1,w
  4583  08D3  00F2               	movwf	___awmod@dividend
  4584  08D4  084A               	movf	??_fround+2,w
  4585  08D5  00F3               	movwf	___awmod@dividend+1
  4586  08D6  3064               	movlw	100
  4587  08D7  00F0               	movwf	___awmod@divisor
  4588  08D8  3000               	movlw	0
  4589  08D9  00F1               	movwf	___awmod@divisor+1
  4590  08DA  160A  158A  2758  120A  158A  	fcall	___awmod
  4591  08DF  0871               	movf	?___awmod+1,w
  4592  08E0  01FA               	clrf	___awdiv@dividend+1
  4593  08E1  07FA               	addwf	___awdiv@dividend+1,f
  4594  08E2  0870               	movf	?___awmod,w
  4595  08E3  01F9               	clrf	___awdiv@dividend
  4596  08E4  07F9               	addwf	___awdiv@dividend,f
  4597  08E5  160A  118A  2119  120A  158A  	fcall	___awdiv
  4598  08EA  0877               	movf	?___awdiv,w
  4599  08EB  3E09               	addlw	9
  4600  08EC  120A  158A  2004  120A  158A  	fcall	___bmul
  4601  08F1  3E29               	addlw	low (__npowers_-__stringbase)
  4602  08F2  0084               	movwf	4
  4603  08F3  160A  118A  2000  120A  158A  	fcall	stringdir
  4604  08F8  1283               	bcf	3,5	;RP0=0, select bank0
  4605  08F9  1303               	bcf	3,6	;RP1=0, select bank0
  4606  08FA  00B5               	movwf	___ftmul@f1
  4607  08FB  160A  118A  2000  120A  158A  	fcall	stringdir
  4608  0900  00B6               	movwf	___ftmul@f1+1
  4609  0901  160A  118A  2000  120A  158A  	fcall	stringdir
  4610  0906  00B7               	movwf	___ftmul@f1+2
  4611  0907  3003               	movlw	3
  4612  0908  00CB               	movwf	??_fround+3
  4613  0909  084B               	movf	??_fround+3,w
  4614  090A  00A4               	movwf	___bmul@multiplicand
  4615  090B  3064               	movlw	100
  4616  090C  00F7               	movwf	___awdiv@divisor
  4617  090D  3000               	movlw	0
  4618  090E  00F8               	movwf	___awdiv@divisor+1
  4619  090F  0854               	movf	fround@prec,w
  4620  0910  00CC               	movwf	??_fround+4
  4621  0911  01CD               	clrf	??_fround+5
  4622  0912  084C               	movf	??_fround+4,w
  4623  0913  00F9               	movwf	___awdiv@dividend
  4624  0914  084D               	movf	??_fround+5,w
  4625  0915  00FA               	movwf	___awdiv@dividend+1
  4626  0916  160A  118A  2119  120A  158A  	fcall	___awdiv
  4627  091B  0877               	movf	?___awdiv,w
  4628  091C  3E12               	addlw	18
  4629  091D  120A  158A  2004  120A  158A  	fcall	___bmul
  4630  0922  3E29               	addlw	low (__npowers_-__stringbase)
  4631  0923  0084               	movwf	4
  4632  0924  160A  118A  2000  120A  158A  	fcall	stringdir
  4633  0929  1283               	bcf	3,5	;RP0=0, select bank0
  4634  092A  1303               	bcf	3,6	;RP1=0, select bank0
  4635  092B  00B8               	movwf	___ftmul@f2
  4636  092C  160A  118A  2000  120A  158A  	fcall	stringdir
  4637  0931  00B9               	movwf	___ftmul@f2+1
  4638  0932  160A  118A  2000  120A  158A  	fcall	stringdir
  4639  0937  00BA               	movwf	___ftmul@f2+2
  4640  0938  120A  118A  2009  120A  158A  	fcall	___ftmul
  4641  093D  1283               	bcf	3,5	;RP0=0, select bank0
  4642  093E  1303               	bcf	3,6	;RP1=0, select bank0
  4643  093F  0835               	movf	?___ftmul,w
  4644  0940  00D1               	movwf	_fround$873
  4645  0941  0836               	movf	?___ftmul+1,w
  4646  0942  00D2               	movwf	_fround$873+1
  4647  0943  0837               	movf	?___ftmul+2,w
  4648  0944  00D3               	movwf	_fround$873+2
  4649                           
  4650                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4651  0945  3003               	movlw	3
  4652  0946  00C8               	movwf	??_fround
  4653  0947  0848               	movf	??_fround,w
  4654  0948  00A4               	movwf	___bmul@multiplicand
  4655  0949  0854               	movf	fround@prec,w
  4656  094A  00C9               	movwf	??_fround+1
  4657  094B  01CA               	clrf	??_fround+2
  4658  094C  0849               	movf	??_fround+1,w
  4659  094D  00F2               	movwf	___awmod@dividend
  4660  094E  084A               	movf	??_fround+2,w
  4661  094F  00F3               	movwf	___awmod@dividend+1
  4662  0950  300A               	movlw	10
  4663  0951  00F0               	movwf	___awmod@divisor
  4664  0952  3000               	movlw	0
  4665  0953  00F1               	movwf	___awmod@divisor+1
  4666  0954  160A  158A  2758  120A  158A  	fcall	___awmod
  4667  0959  0870               	movf	?___awmod,w
  4668  095A  120A  158A  2004  120A  158A  	fcall	___bmul
  4669  095F  3E29               	addlw	low (__npowers_-__stringbase)
  4670  0960  0084               	movwf	4
  4671  0961  160A  118A  2000  120A  158A  	fcall	stringdir
  4672  0966  1283               	bcf	3,5	;RP0=0, select bank0
  4673  0967  1303               	bcf	3,6	;RP1=0, select bank0
  4674  0968  00B5               	movwf	___ftmul@f1
  4675  0969  160A  118A  2000  120A  158A  	fcall	stringdir
  4676  096E  00B6               	movwf	___ftmul@f1+1
  4677  096F  160A  118A  2000  120A  158A  	fcall	stringdir
  4678  0974  00B7               	movwf	___ftmul@f1+2
  4679  0975  0851               	movf	_fround$873,w
  4680  0976  00B8               	movwf	___ftmul@f2
  4681  0977  0852               	movf	_fround$873+1,w
  4682  0978  00B9               	movwf	___ftmul@f2+1
  4683  0979  0853               	movf	_fround$873+2,w
  4684  097A  00BA               	movwf	___ftmul@f2+2
  4685  097B  120A  118A  2009  120A  158A  	fcall	___ftmul
  4686  0980  1283               	bcf	3,5	;RP0=0, select bank0
  4687  0981  1303               	bcf	3,6	;RP1=0, select bank0
  4688  0982  0835               	movf	?___ftmul,w
  4689  0983  00CE               	movwf	_fround$874
  4690  0984  0836               	movf	?___ftmul+1,w
  4691  0985  00CF               	movwf	_fround$874+1
  4692  0986  0837               	movf	?___ftmul+2,w
  4693  0987  00D0               	movwf	_fround$874+2
  4694                           
  4695                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4696  0988  3000               	movlw	0
  4697  0989  00B5               	movwf	___ftmul@f1
  4698  098A  3000               	movlw	0
  4699  098B  00B6               	movwf	___ftmul@f1+1
  4700  098C  303F               	movlw	63
  4701  098D  00B7               	movwf	___ftmul@f1+2
  4702  098E  084E               	movf	_fround$874,w
  4703  098F  00B8               	movwf	___ftmul@f2
  4704  0990  084F               	movf	_fround$874+1,w
  4705  0991  00B9               	movwf	___ftmul@f2+1
  4706  0992  0850               	movf	_fround$874+2,w
  4707  0993  00BA               	movwf	___ftmul@f2+2
  4708  0994  120A  118A  2009   	fcall	___ftmul
  4709  0997  1283               	bcf	3,5	;RP0=0, select bank0
  4710  0998  1303               	bcf	3,6	;RP1=0, select bank0
  4711  0999  0835               	movf	?___ftmul,w
  4712  099A  00C5               	movwf	?_fround
  4713  099B  0836               	movf	?___ftmul+1,w
  4714  099C  00C6               	movwf	?_fround+1
  4715  099D  0837               	movf	?___ftmul+2,w
  4716  099E  00C7               	movwf	?_fround+2
  4717  099F  0008               	return
  4718  09A0                     l2444:	
  4719                           
  4720                           ;doprnt.c: 415: else if(prec > 10)
  4721  09A0  300B               	movlw	11
  4722  09A1  0254               	subwf	fround@prec,w
  4723  09A2  1C03               	skipc
  4724  09A3  2A2A               	goto	l2452
  4725                           
  4726                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4727  09A4  3003               	movlw	3
  4728  09A5  00C8               	movwf	??_fround
  4729  09A6  0848               	movf	??_fround,w
  4730  09A7  00A4               	movwf	___bmul@multiplicand
  4731  09A8  0854               	movf	fround@prec,w
  4732  09A9  00C9               	movwf	??_fround+1
  4733  09AA  01CA               	clrf	??_fround+2
  4734  09AB  0849               	movf	??_fround+1,w
  4735  09AC  00F2               	movwf	___awmod@dividend
  4736  09AD  084A               	movf	??_fround+2,w
  4737  09AE  00F3               	movwf	___awmod@dividend+1
  4738  09AF  300A               	movlw	10
  4739  09B0  00F0               	movwf	___awmod@divisor
  4740  09B1  3000               	movlw	0
  4741  09B2  00F1               	movwf	___awmod@divisor+1
  4742  09B3  160A  158A  2758  120A  158A  	fcall	___awmod
  4743  09B8  0870               	movf	?___awmod,w
  4744  09B9  120A  158A  2004  120A  158A  	fcall	___bmul
  4745  09BE  3E29               	addlw	low (__npowers_-__stringbase)
  4746  09BF  0084               	movwf	4
  4747  09C0  160A  118A  2000  120A  158A  	fcall	stringdir
  4748  09C5  1283               	bcf	3,5	;RP0=0, select bank0
  4749  09C6  1303               	bcf	3,6	;RP1=0, select bank0
  4750  09C7  00B5               	movwf	___ftmul@f1
  4751  09C8  160A  118A  2000  120A  158A  	fcall	stringdir
  4752  09CD  00B6               	movwf	___ftmul@f1+1
  4753  09CE  160A  118A  2000  120A  158A  	fcall	stringdir
  4754  09D3  00B7               	movwf	___ftmul@f1+2
  4755  09D4  3003               	movlw	3
  4756  09D5  00CB               	movwf	??_fround+3
  4757  09D6  084B               	movf	??_fround+3,w
  4758  09D7  00A4               	movwf	___bmul@multiplicand
  4759  09D8  300A               	movlw	10
  4760  09D9  00F7               	movwf	___awdiv@divisor
  4761  09DA  3000               	movlw	0
  4762  09DB  00F8               	movwf	___awdiv@divisor+1
  4763  09DC  0854               	movf	fround@prec,w
  4764  09DD  00CC               	movwf	??_fround+4
  4765  09DE  01CD               	clrf	??_fround+5
  4766  09DF  084C               	movf	??_fround+4,w
  4767  09E0  00F9               	movwf	___awdiv@dividend
  4768  09E1  084D               	movf	??_fround+5,w
  4769  09E2  00FA               	movwf	___awdiv@dividend+1
  4770  09E3  160A  118A  2119  120A  158A  	fcall	___awdiv
  4771  09E8  0877               	movf	?___awdiv,w
  4772  09E9  3E09               	addlw	9
  4773  09EA  120A  158A  2004  120A  158A  	fcall	___bmul
  4774  09EF  3E29               	addlw	low (__npowers_-__stringbase)
  4775  09F0  0084               	movwf	4
  4776  09F1  160A  118A  2000  120A  158A  	fcall	stringdir
  4777  09F6  1283               	bcf	3,5	;RP0=0, select bank0
  4778  09F7  1303               	bcf	3,6	;RP1=0, select bank0
  4779  09F8  00B8               	movwf	___ftmul@f2
  4780  09F9  160A  118A  2000  120A  158A  	fcall	stringdir
  4781  09FE  00B9               	movwf	___ftmul@f2+1
  4782  09FF  160A  118A  2000  120A  158A  	fcall	stringdir
  4783  0A04  00BA               	movwf	___ftmul@f2+2
  4784  0A05  120A  118A  2009  120A  158A  	fcall	___ftmul
  4785  0A0A  1283               	bcf	3,5	;RP0=0, select bank0
  4786  0A0B  1303               	bcf	3,6	;RP1=0, select bank0
  4787  0A0C  0835               	movf	?___ftmul,w
  4788  0A0D  00D1               	movwf	_fround$873
  4789  0A0E  0836               	movf	?___ftmul+1,w
  4790  0A0F  00D2               	movwf	_fround$873+1
  4791  0A10  0837               	movf	?___ftmul+2,w
  4792  0A11  00D3               	movwf	_fround$873+2
  4793                           
  4794                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4795  0A12  3000               	movlw	0
  4796  0A13  00B5               	movwf	___ftmul@f1
  4797  0A14  3000               	movlw	0
  4798  0A15  00B6               	movwf	___ftmul@f1+1
  4799  0A16  303F               	movlw	63
  4800  0A17  00B7               	movwf	___ftmul@f1+2
  4801  0A18  0851               	movf	_fround$873,w
  4802  0A19  00B8               	movwf	___ftmul@f2
  4803  0A1A  0852               	movf	_fround$873+1,w
  4804  0A1B  00B9               	movwf	___ftmul@f2+1
  4805  0A1C  0853               	movf	_fround$873+2,w
  4806  0A1D  00BA               	movwf	___ftmul@f2+2
  4807  0A1E  120A  118A  2009   	fcall	___ftmul
  4808  0A21  1283               	bcf	3,5	;RP0=0, select bank0
  4809  0A22  1303               	bcf	3,6	;RP1=0, select bank0
  4810  0A23  0835               	movf	?___ftmul,w
  4811  0A24  00C5               	movwf	?_fround
  4812  0A25  0836               	movf	?___ftmul+1,w
  4813  0A26  00C6               	movwf	?_fround+1
  4814  0A27  0837               	movf	?___ftmul+2,w
  4815  0A28  00C7               	movwf	?_fround+2
  4816  0A29  0008               	return
  4817  0A2A                     l2452:	
  4818                           
  4819                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4820  0A2A  3000               	movlw	0
  4821  0A2B  00B5               	movwf	___ftmul@f1
  4822  0A2C  3000               	movlw	0
  4823  0A2D  00B6               	movwf	___ftmul@f1+1
  4824  0A2E  303F               	movlw	63
  4825  0A2F  00B7               	movwf	___ftmul@f1+2
  4826  0A30  3003               	movlw	3
  4827  0A31  00C8               	movwf	??_fround
  4828  0A32  0848               	movf	??_fround,w
  4829  0A33  00A4               	movwf	___bmul@multiplicand
  4830  0A34  0854               	movf	fround@prec,w
  4831  0A35  120A  158A  2004  120A  158A  	fcall	___bmul
  4832  0A3A  3E29               	addlw	low (__npowers_-__stringbase)
  4833  0A3B  0084               	movwf	4
  4834  0A3C  160A  118A  2000  120A  158A  	fcall	stringdir
  4835  0A41  1283               	bcf	3,5	;RP0=0, select bank0
  4836  0A42  1303               	bcf	3,6	;RP1=0, select bank0
  4837  0A43  00B8               	movwf	___ftmul@f2
  4838  0A44  160A  118A  2000  120A  158A  	fcall	stringdir
  4839  0A49  00B9               	movwf	___ftmul@f2+1
  4840  0A4A  160A  118A  2000  120A  158A  	fcall	stringdir
  4841  0A4F  00BA               	movwf	___ftmul@f2+2
  4842  0A50  120A  118A  2009   	fcall	___ftmul
  4843  0A53  1283               	bcf	3,5	;RP0=0, select bank0
  4844  0A54  1303               	bcf	3,6	;RP1=0, select bank0
  4845  0A55  0835               	movf	?___ftmul,w
  4846  0A56  00C5               	movwf	?_fround
  4847  0A57  0836               	movf	?___ftmul+1,w
  4848  0A58  00C6               	movwf	?_fround+1
  4849  0A59  0837               	movf	?___ftmul+2,w
  4850  0A5A  00C7               	movwf	?_fround+2
  4851  0A5B  0008               	return
  4852  0A5C                     __end_of_fround:	
  4853                           
  4854                           	psect	text5
  4855  0009                     __ptext5:	
  4856 ;; *************** function ___ftmul *****************
  4857 ;; Defined at:
  4858 ;;		line 62 in file "/opt/microchip/xc8/v1.33/sources/common/ftmul.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  f1              3   21[BANK0 ] float 
  4861 ;;  f2              3   24[BANK0 ] float 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  f3_as_produc    3   32[BANK0 ] unsigned um
  4864 ;;  sign            1   36[BANK0 ] unsigned char 
  4865 ;;  cntr            1   35[BANK0 ] unsigned char 
  4866 ;;  exp             1   31[BANK0 ] unsigned char 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  3   21[BANK0 ] float 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, pclath, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4876 ;;      Params:         0       6       0       0       0
  4877 ;;      Locals:         0       6       0       0       0
  4878 ;;      Temps:          0       4       0       0       0
  4879 ;;      Totals:         0      16       0       0       0
  4880 ;;Total ram usage:       16 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    1
  4883 ;; This function calls:
  4884 ;;		___ftpack
  4885 ;; This function is called by:
  4886 ;;		_main
  4887 ;;		_fround
  4888 ;;		_scale
  4889 ;;		_sprintf
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           
  4894                           ;psect for function ___ftmul
  4895  0009                     ___ftmul:	
  4896                           
  4897                           ;incstack = 0
  4898                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4899  0009  1283               	bcf	3,5	;RP0=0, select bank0
  4900  000A  1303               	bcf	3,6	;RP1=0, select bank0
  4901  000B  0835               	movf	___ftmul@f1,w
  4902  000C  00BB               	movwf	??___ftmul
  4903  000D  0836               	movf	___ftmul@f1+1,w
  4904  000E  00BC               	movwf	??___ftmul+1
  4905  000F  0837               	movf	___ftmul@f1+2,w
  4906  0010  00BD               	movwf	??___ftmul+2
  4907  0011  1003               	clrc
  4908  0012  0D3C               	rlf	??___ftmul+1,w
  4909  0013  0D3D               	rlf	??___ftmul+2,w
  4910  0014  00BE               	movwf	??___ftmul+3
  4911  0015  083E               	movf	??___ftmul+3,w
  4912  0016  00BF               	movwf	___ftmul@exp
  4913  0017  08BF               	movf	___ftmul@exp,f
  4914  0018  1D03               	skipz
  4915  0019  2821               	goto	l2364
  4916  001A  3000               	movlw	0
  4917  001B  00B5               	movwf	?___ftmul
  4918  001C  3000               	movlw	0
  4919  001D  00B6               	movwf	?___ftmul+1
  4920  001E  3000               	movlw	0
  4921  001F  00B7               	movwf	?___ftmul+2
  4922  0020  0008               	return
  4923  0021                     l2364:	
  4924  0021  0838               	movf	___ftmul@f2,w
  4925  0022  00BB               	movwf	??___ftmul
  4926  0023  0839               	movf	___ftmul@f2+1,w
  4927  0024  00BC               	movwf	??___ftmul+1
  4928  0025  083A               	movf	___ftmul@f2+2,w
  4929  0026  00BD               	movwf	??___ftmul+2
  4930  0027  1003               	clrc
  4931  0028  0D3C               	rlf	??___ftmul+1,w
  4932  0029  0D3D               	rlf	??___ftmul+2,w
  4933  002A  00BE               	movwf	??___ftmul+3
  4934  002B  083E               	movf	??___ftmul+3,w
  4935  002C  00C4               	movwf	___ftmul@sign
  4936  002D  08C4               	movf	___ftmul@sign,f
  4937  002E  1D03               	skipz
  4938  002F  2837               	goto	l2370
  4939  0030  3000               	movlw	0
  4940  0031  00B5               	movwf	?___ftmul
  4941  0032  3000               	movlw	0
  4942  0033  00B6               	movwf	?___ftmul+1
  4943  0034  3000               	movlw	0
  4944  0035  00B7               	movwf	?___ftmul+2
  4945  0036  0008               	return
  4946  0037                     l2370:	
  4947  0037  0844               	movf	___ftmul@sign,w
  4948  0038  3E7B               	addlw	123
  4949  0039  00BB               	movwf	??___ftmul
  4950  003A  083B               	movf	??___ftmul,w
  4951  003B  07BF               	addwf	___ftmul@exp,f
  4952  003C  0835               	movf	___ftmul@f1,w
  4953  003D  00BB               	movwf	??___ftmul
  4954  003E  0836               	movf	___ftmul@f1+1,w
  4955  003F  00BC               	movwf	??___ftmul+1
  4956  0040  0837               	movf	___ftmul@f1+2,w
  4957  0041  00BD               	movwf	??___ftmul+2
  4958  0042  3010               	movlw	16
  4959  0043                     u3105:	
  4960  0043  1003               	clrc
  4961  0044  0CBD               	rrf	??___ftmul+2,f
  4962  0045  0CBC               	rrf	??___ftmul+1,f
  4963  0046  0CBB               	rrf	??___ftmul,f
  4964  0047  3EFF               	addlw	-1
  4965  0048  1D03               	skipz
  4966  0049  2843               	goto	u3105
  4967  004A  083B               	movf	??___ftmul,w
  4968  004B  00BE               	movwf	??___ftmul+3
  4969  004C  083E               	movf	??___ftmul+3,w
  4970  004D  00C4               	movwf	___ftmul@sign
  4971  004E  0838               	movf	___ftmul@f2,w
  4972  004F  00BB               	movwf	??___ftmul
  4973  0050  0839               	movf	___ftmul@f2+1,w
  4974  0051  00BC               	movwf	??___ftmul+1
  4975  0052  083A               	movf	___ftmul@f2+2,w
  4976  0053  00BD               	movwf	??___ftmul+2
  4977  0054  3010               	movlw	16
  4978  0055                     u3115:	
  4979  0055  1003               	clrc
  4980  0056  0CBD               	rrf	??___ftmul+2,f
  4981  0057  0CBC               	rrf	??___ftmul+1,f
  4982  0058  0CBB               	rrf	??___ftmul,f
  4983  0059  3EFF               	addlw	-1
  4984  005A  1D03               	skipz
  4985  005B  2855               	goto	u3115
  4986  005C  083B               	movf	??___ftmul,w
  4987  005D  00BE               	movwf	??___ftmul+3
  4988  005E  083E               	movf	??___ftmul+3,w
  4989  005F  06C4               	xorwf	___ftmul@sign,f
  4990  0060  3080               	movlw	128
  4991  0061  00BB               	movwf	??___ftmul
  4992  0062  083B               	movf	??___ftmul,w
  4993  0063  05C4               	andwf	___ftmul@sign,f
  4994  0064  17B6               	bsf	___ftmul@f1+1,7
  4995  0065  17B9               	bsf	___ftmul@f2+1,7
  4996  0066  30FF               	movlw	255
  4997  0067  05B8               	andwf	___ftmul@f2,f
  4998  0068  30FF               	movlw	255
  4999  0069  05B9               	andwf	___ftmul@f2+1,f
  5000  006A  3000               	movlw	0
  5001  006B  05BA               	andwf	___ftmul@f2+2,f
  5002  006C  3000               	movlw	0
  5003  006D  00C0               	movwf	___ftmul@f3_as_product
  5004  006E  3000               	movlw	0
  5005  006F  00C1               	movwf	___ftmul@f3_as_product+1
  5006  0070  3000               	movlw	0
  5007  0071  00C2               	movwf	___ftmul@f3_as_product+2
  5008  0072  3007               	movlw	7
  5009  0073  00BB               	movwf	??___ftmul
  5010  0074  083B               	movf	??___ftmul,w
  5011  0075  00C3               	movwf	___ftmul@cntr
  5012  0076                     l2382:	
  5013  0076  1C35               	btfss	___ftmul@f1,0
  5014  0077  2886               	goto	l2386
  5015  0078  0838               	movf	___ftmul@f2,w
  5016  0079  07C0               	addwf	___ftmul@f3_as_product,f
  5017  007A  0839               	movf	___ftmul@f2+1,w
  5018  007B  1103               	clrz
  5019  007C  1803               	skipnc
  5020  007D  0A39               	incf	___ftmul@f2+1,w
  5021  007E  1D03               	btfss	3,2
  5022  007F  07C1               	addwf	___ftmul@f3_as_product+1,f
  5023  0080  083A               	movf	___ftmul@f2+2,w
  5024  0081  1103               	clrz
  5025  0082  1803               	skipnc
  5026  0083  0A3A               	incf	___ftmul@f2+2,w
  5027  0084  1D03               	btfss	3,2
  5028  0085  07C2               	addwf	___ftmul@f3_as_product+2,f
  5029  0086                     l2386:	
  5030  0086  3001               	movlw	1
  5031  0087                     u3145:	
  5032  0087  1003               	clrc
  5033  0088  0CB7               	rrf	___ftmul@f1+2,f
  5034  0089  0CB6               	rrf	___ftmul@f1+1,f
  5035  008A  0CB5               	rrf	___ftmul@f1,f
  5036  008B  3EFF               	addlw	-1
  5037  008C  1D03               	skipz
  5038  008D  2887               	goto	u3145
  5039  008E  3001               	movlw	1
  5040  008F                     u3155:	
  5041  008F  1003               	clrc
  5042  0090  0DB8               	rlf	___ftmul@f2,f
  5043  0091  0DB9               	rlf	___ftmul@f2+1,f
  5044  0092  0DBA               	rlf	___ftmul@f2+2,f
  5045  0093  3EFF               	addlw	-1
  5046  0094  1D03               	skipz
  5047  0095  288F               	goto	u3155
  5048  0096  3001               	movlw	1
  5049  0097  02C3               	subwf	___ftmul@cntr,f
  5050  0098  1D03               	btfss	3,2
  5051  0099  2876               	goto	l2382
  5052  009A  3009               	movlw	9
  5053  009B  00BB               	movwf	??___ftmul
  5054  009C  083B               	movf	??___ftmul,w
  5055  009D  00C3               	movwf	___ftmul@cntr
  5056  009E                     l2394:	
  5057  009E  1C35               	btfss	___ftmul@f1,0
  5058  009F  28AE               	goto	l2398
  5059  00A0  0838               	movf	___ftmul@f2,w
  5060  00A1  07C0               	addwf	___ftmul@f3_as_product,f
  5061  00A2  0839               	movf	___ftmul@f2+1,w
  5062  00A3  1103               	clrz
  5063  00A4  1803               	skipnc
  5064  00A5  0A39               	incf	___ftmul@f2+1,w
  5065  00A6  1D03               	btfss	3,2
  5066  00A7  07C1               	addwf	___ftmul@f3_as_product+1,f
  5067  00A8  083A               	movf	___ftmul@f2+2,w
  5068  00A9  1103               	clrz
  5069  00AA  1803               	skipnc
  5070  00AB  0A3A               	incf	___ftmul@f2+2,w
  5071  00AC  1D03               	btfss	3,2
  5072  00AD  07C2               	addwf	___ftmul@f3_as_product+2,f
  5073  00AE                     l2398:	
  5074  00AE  3001               	movlw	1
  5075  00AF                     u3195:	
  5076  00AF  1003               	clrc
  5077  00B0  0CB7               	rrf	___ftmul@f1+2,f
  5078  00B1  0CB6               	rrf	___ftmul@f1+1,f
  5079  00B2  0CB5               	rrf	___ftmul@f1,f
  5080  00B3  3EFF               	addlw	-1
  5081  00B4  1D03               	skipz
  5082  00B5  28AF               	goto	u3195
  5083  00B6  3001               	movlw	1
  5084  00B7                     u3205:	
  5085  00B7  1003               	clrc
  5086  00B8  0CC2               	rrf	___ftmul@f3_as_product+2,f
  5087  00B9  0CC1               	rrf	___ftmul@f3_as_product+1,f
  5088  00BA  0CC0               	rrf	___ftmul@f3_as_product,f
  5089  00BB  3EFF               	addlw	-1
  5090  00BC  1D03               	skipz
  5091  00BD  28B7               	goto	u3205
  5092  00BE  3001               	movlw	1
  5093  00BF  02C3               	subwf	___ftmul@cntr,f
  5094  00C0  1D03               	btfss	3,2
  5095  00C1  289E               	goto	l2394
  5096  00C2  0840               	movf	___ftmul@f3_as_product,w
  5097  00C3  00F0               	movwf	___ftpack@arg
  5098  00C4  0841               	movf	___ftmul@f3_as_product+1,w
  5099  00C5  00F1               	movwf	___ftpack@arg+1
  5100  00C6  0842               	movf	___ftmul@f3_as_product+2,w
  5101  00C7  00F2               	movwf	___ftpack@arg+2
  5102  00C8  083F               	movf	___ftmul@exp,w
  5103  00C9  00BB               	movwf	??___ftmul
  5104  00CA  083B               	movf	??___ftmul,w
  5105  00CB  00F3               	movwf	___ftpack@exp
  5106  00CC  0844               	movf	___ftmul@sign,w
  5107  00CD  00BC               	movwf	??___ftmul+1
  5108  00CE  083C               	movf	??___ftmul+1,w
  5109  00CF  00F4               	movwf	___ftpack@sign
  5110  00D0  160A  118A  2233   	fcall	___ftpack
  5111  00D3  0870               	movf	?___ftpack,w
  5112  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  5113  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  5114  00D6  00B5               	movwf	?___ftmul
  5115  00D7  0871               	movf	?___ftpack+1,w
  5116  00D8  00B6               	movwf	?___ftmul+1
  5117  00D9  0872               	movf	?___ftpack+2,w
  5118  00DA  00B7               	movwf	?___ftmul+2
  5119  00DB  0008               	return
  5120  00DC                     __end_of___ftmul:	
  5121                           
  5122                           	psect	text6
  5123  0804                     __ptext6:	
  5124 ;; *************** function ___bmul *****************
  5125 ;; Defined at:
  5126 ;;		line 4 in file "/opt/microchip/xc8/v1.33/sources/common/Umul8.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;  multiplier      1    wreg     unsigned char 
  5129 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  5130 ;; Auto vars:     Size  Location     Type
  5131 ;;  multiplier      1    6[BANK0 ] unsigned char 
  5132 ;;  product         1    5[BANK0 ] unsigned char 
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      unsigned char 
  5135 ;; Registers used:
  5136 ;;		wreg, status,2, status,0
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5142 ;;      Params:         0       1       0       0       0
  5143 ;;      Locals:         0       2       0       0       0
  5144 ;;      Temps:          1       0       0       0       0
  5145 ;;      Totals:         1       3       0       0       0
  5146 ;;Total ram usage:        4 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; This function calls:
  5149 ;;		Nothing
  5150 ;; This function is called by:
  5151 ;;		_main
  5152 ;;		_fround
  5153 ;;		_scale
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function ___bmul
  5159  0804                     ___bmul:	
  5160                           
  5161                           ;incstack = 0
  5162                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5163                           ;___bmul@multiplier stored from wreg
  5164  0804  1283               	bcf	3,5	;RP0=0, select bank0
  5165  0805  1303               	bcf	3,6	;RP1=0, select bank0
  5166  0806  00A6               	movwf	___bmul@multiplier
  5167  0807  01A5               	clrf	___bmul@product
  5168  0808                     l2190:	
  5169  0808  1C26               	btfss	___bmul@multiplier,0
  5170  0809  280E               	goto	l2194
  5171  080A  0824               	movf	___bmul@multiplicand,w
  5172  080B  00FC               	movwf	??___bmul
  5173  080C  087C               	movf	??___bmul,w
  5174  080D  07A5               	addwf	___bmul@product,f
  5175  080E                     l2194:	
  5176  080E  1003               	clrc
  5177  080F  0DA4               	rlf	___bmul@multiplicand,f
  5178  0810  1003               	clrc
  5179  0811  0CA6               	rrf	___bmul@multiplier,f
  5180  0812  08A6               	movf	___bmul@multiplier,f
  5181  0813  1D03               	skipz
  5182  0814  2808               	goto	l2190
  5183  0815  0825               	movf	___bmul@product,w
  5184  0816  0008               	return
  5185  0817                     __end_of___bmul:	
  5186                           
  5187                           	psect	text7
  5188  1F58                     __ptext7:	
  5189 ;; *************** function ___awmod *****************
  5190 ;; Defined at:
  5191 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/awmod.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  divisor         2    0[COMMON] int 
  5194 ;;  dividend        2    2[COMMON] int 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  sign            1    6[COMMON] unsigned char 
  5197 ;;  counter         1    5[COMMON] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  2    0[COMMON] int 
  5200 ;; Registers used:
  5201 ;;		wreg, status,2, status,0
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5207 ;;      Params:         4       0       0       0       0
  5208 ;;      Locals:         2       0       0       0       0
  5209 ;;      Temps:          1       0       0       0       0
  5210 ;;      Totals:         7       0       0       0       0
  5211 ;;Total ram usage:        7 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; This function calls:
  5214 ;;		Nothing
  5215 ;; This function is called by:
  5216 ;;		_fround
  5217 ;;		_scale
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           
  5222                           ;psect for function ___awmod
  5223  1F58                     ___awmod:	
  5224                           
  5225                           ;incstack = 0
  5226                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5227  1F58  01F6               	clrf	___awmod@sign
  5228  1F59  1FF3               	btfss	___awmod@dividend+1,7
  5229  1F5A  2F62               	goto	l2256
  5230  1F5B  09F2               	comf	___awmod@dividend,f
  5231  1F5C  09F3               	comf	___awmod@dividend+1,f
  5232  1F5D  0AF2               	incf	___awmod@dividend,f
  5233  1F5E  1903               	skipnz
  5234  1F5F  0AF3               	incf	___awmod@dividend+1,f
  5235  1F60  01F6               	clrf	___awmod@sign
  5236  1F61  0AF6               	incf	___awmod@sign,f
  5237  1F62                     l2256:	
  5238  1F62  1FF1               	btfss	___awmod@divisor+1,7
  5239  1F63  2F69               	goto	l2260
  5240  1F64  09F0               	comf	___awmod@divisor,f
  5241  1F65  09F1               	comf	___awmod@divisor+1,f
  5242  1F66  0AF0               	incf	___awmod@divisor,f
  5243  1F67  1903               	skipnz
  5244  1F68  0AF1               	incf	___awmod@divisor+1,f
  5245  1F69                     l2260:	
  5246  1F69  0871               	movf	___awmod@divisor+1,w
  5247  1F6A  0470               	iorwf	___awmod@divisor,w
  5248  1F6B  1903               	skipnz
  5249  1F6C  2F96               	goto	l2278
  5250  1F6D  01F5               	clrf	___awmod@counter
  5251  1F6E  0AF5               	incf	___awmod@counter,f
  5252  1F6F                     l2268:	
  5253  1F6F  1BF1               	btfsc	___awmod@divisor+1,7
  5254  1F70  2F7D               	goto	l2270
  5255  1F71  3001               	movlw	1
  5256  1F72                     u2785:	
  5257  1F72  1003               	clrc
  5258  1F73  0DF0               	rlf	___awmod@divisor,f
  5259  1F74  0DF1               	rlf	___awmod@divisor+1,f
  5260  1F75  3EFF               	addlw	-1
  5261  1F76  1D03               	skipz
  5262  1F77  2F72               	goto	u2785
  5263  1F78  3001               	movlw	1
  5264  1F79  00F4               	movwf	??___awmod
  5265  1F7A  0874               	movf	??___awmod,w
  5266  1F7B  07F5               	addwf	___awmod@counter,f
  5267  1F7C  2F6F               	goto	l2268
  5268  1F7D                     l2270:	
  5269  1F7D  0871               	movf	___awmod@divisor+1,w
  5270  1F7E  0273               	subwf	___awmod@dividend+1,w
  5271  1F7F  1D03               	skipz
  5272  1F80  2F83               	goto	u2805
  5273  1F81  0870               	movf	___awmod@divisor,w
  5274  1F82  0272               	subwf	___awmod@dividend,w
  5275  1F83                     u2805:	
  5276  1F83  1C03               	skipc
  5277  1F84  2F8B               	goto	l2274
  5278  1F85  0870               	movf	___awmod@divisor,w
  5279  1F86  02F2               	subwf	___awmod@dividend,f
  5280  1F87  0871               	movf	___awmod@divisor+1,w
  5281  1F88  1C03               	skipc
  5282  1F89  03F3               	decf	___awmod@dividend+1,f
  5283  1F8A  02F3               	subwf	___awmod@dividend+1,f
  5284  1F8B                     l2274:	
  5285  1F8B  3001               	movlw	1
  5286  1F8C                     u2815:	
  5287  1F8C  1003               	clrc
  5288  1F8D  0CF1               	rrf	___awmod@divisor+1,f
  5289  1F8E  0CF0               	rrf	___awmod@divisor,f
  5290  1F8F  3EFF               	addlw	-1
  5291  1F90  1D03               	skipz
  5292  1F91  2F8C               	goto	u2815
  5293  1F92  3001               	movlw	1
  5294  1F93  02F5               	subwf	___awmod@counter,f
  5295  1F94  1D03               	btfss	3,2
  5296  1F95  2F7D               	goto	l2270
  5297  1F96                     l2278:	
  5298  1F96  0876               	movf	___awmod@sign,w
  5299  1F97  1903               	btfsc	3,2
  5300  1F98  2F9E               	goto	l2282
  5301  1F99  09F2               	comf	___awmod@dividend,f
  5302  1F9A  09F3               	comf	___awmod@dividend+1,f
  5303  1F9B  0AF2               	incf	___awmod@dividend,f
  5304  1F9C  1903               	skipnz
  5305  1F9D  0AF3               	incf	___awmod@dividend+1,f
  5306  1F9E                     l2282:	
  5307  1F9E  0873               	movf	___awmod@dividend+1,w
  5308  1F9F  01F1               	clrf	?___awmod+1
  5309  1FA0  07F1               	addwf	?___awmod+1,f
  5310  1FA1  0872               	movf	___awmod@dividend,w
  5311  1FA2  01F0               	clrf	?___awmod
  5312  1FA3  07F0               	addwf	?___awmod,f
  5313  1FA4  0008               	return
  5314  1FA5                     __end_of___awmod:	
  5315                           
  5316                           	psect	text8
  5317  1119                     __ptext8:	
  5318 ;; *************** function ___awdiv *****************
  5319 ;; Defined at:
  5320 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/awdiv.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  divisor         2    7[COMMON] int 
  5323 ;;  dividend        2    9[COMMON] int 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  quotient        2    2[BANK0 ] int 
  5326 ;;  sign            1    1[BANK0 ] unsigned char 
  5327 ;;  counter         1    0[BANK0 ] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  2    7[COMMON] int 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5337 ;;      Params:         4       0       0       0       0
  5338 ;;      Locals:         0       4       0       0       0
  5339 ;;      Temps:          1       0       0       0       0
  5340 ;;      Totals:         5       4       0       0       0
  5341 ;;Total ram usage:        9 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_fround
  5347 ;;		_scale
  5348 ;;		_sprintf
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           
  5353                           ;psect for function ___awdiv
  5354  1119                     ___awdiv:	
  5355                           
  5356                           ;incstack = 0
  5357                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5358  1119  1283               	bcf	3,5	;RP0=0, select bank0
  5359  111A  1303               	bcf	3,6	;RP1=0, select bank0
  5360  111B  01A1               	clrf	___awdiv@sign
  5361  111C  1FF8               	btfss	___awdiv@divisor+1,7
  5362  111D  2925               	goto	l2212
  5363  111E  09F7               	comf	___awdiv@divisor,f
  5364  111F  09F8               	comf	___awdiv@divisor+1,f
  5365  1120  0AF7               	incf	___awdiv@divisor,f
  5366  1121  1903               	skipnz
  5367  1122  0AF8               	incf	___awdiv@divisor+1,f
  5368  1123  01A1               	clrf	___awdiv@sign
  5369  1124  0AA1               	incf	___awdiv@sign,f
  5370  1125                     l2212:	
  5371  1125  1FFA               	btfss	___awdiv@dividend+1,7
  5372  1126  2930               	goto	l2218
  5373  1127  09F9               	comf	___awdiv@dividend,f
  5374  1128  09FA               	comf	___awdiv@dividend+1,f
  5375  1129  0AF9               	incf	___awdiv@dividend,f
  5376  112A  1903               	skipnz
  5377  112B  0AFA               	incf	___awdiv@dividend+1,f
  5378  112C  3001               	movlw	1
  5379  112D  00FB               	movwf	??___awdiv
  5380  112E  087B               	movf	??___awdiv,w
  5381  112F  06A1               	xorwf	___awdiv@sign,f
  5382  1130                     l2218:	
  5383  1130  01A2               	clrf	___awdiv@quotient
  5384  1131  01A3               	clrf	___awdiv@quotient+1
  5385  1132  0878               	movf	___awdiv@divisor+1,w
  5386  1133  0477               	iorwf	___awdiv@divisor,w
  5387  1134  1903               	skipnz
  5388  1135  2967               	goto	l2240
  5389  1136  01A0               	clrf	___awdiv@counter
  5390  1137  0AA0               	incf	___awdiv@counter,f
  5391  1138                     l2228:	
  5392  1138  1BF8               	btfsc	___awdiv@divisor+1,7
  5393  1139  2946               	goto	l2230
  5394  113A  3001               	movlw	1
  5395  113B                     u2685:	
  5396  113B  1003               	clrc
  5397  113C  0DF7               	rlf	___awdiv@divisor,f
  5398  113D  0DF8               	rlf	___awdiv@divisor+1,f
  5399  113E  3EFF               	addlw	-1
  5400  113F  1D03               	skipz
  5401  1140  293B               	goto	u2685
  5402  1141  3001               	movlw	1
  5403  1142  00FB               	movwf	??___awdiv
  5404  1143  087B               	movf	??___awdiv,w
  5405  1144  07A0               	addwf	___awdiv@counter,f
  5406  1145  2938               	goto	l2228
  5407  1146                     l2230:	
  5408  1146  3001               	movlw	1
  5409  1147                     u2705:	
  5410  1147  1003               	clrc
  5411  1148  0DA2               	rlf	___awdiv@quotient,f
  5412  1149  0DA3               	rlf	___awdiv@quotient+1,f
  5413  114A  3EFF               	addlw	-1
  5414  114B  1D03               	skipz
  5415  114C  2947               	goto	u2705
  5416  114D  0878               	movf	___awdiv@divisor+1,w
  5417  114E  027A               	subwf	___awdiv@dividend+1,w
  5418  114F  1D03               	skipz
  5419  1150  2953               	goto	u2715
  5420  1151  0877               	movf	___awdiv@divisor,w
  5421  1152  0279               	subwf	___awdiv@dividend,w
  5422  1153                     u2715:	
  5423  1153  1C03               	skipc
  5424  1154  295C               	goto	l2236
  5425  1155  0877               	movf	___awdiv@divisor,w
  5426  1156  02F9               	subwf	___awdiv@dividend,f
  5427  1157  0878               	movf	___awdiv@divisor+1,w
  5428  1158  1C03               	skipc
  5429  1159  03FA               	decf	___awdiv@dividend+1,f
  5430  115A  02FA               	subwf	___awdiv@dividend+1,f
  5431  115B  1422               	bsf	___awdiv@quotient,0
  5432  115C                     l2236:	
  5433  115C  3001               	movlw	1
  5434  115D                     u2725:	
  5435  115D  1003               	clrc
  5436  115E  0CF8               	rrf	___awdiv@divisor+1,f
  5437  115F  0CF7               	rrf	___awdiv@divisor,f
  5438  1160  3EFF               	addlw	-1
  5439  1161  1D03               	skipz
  5440  1162  295D               	goto	u2725
  5441  1163  3001               	movlw	1
  5442  1164  02A0               	subwf	___awdiv@counter,f
  5443  1165  1D03               	btfss	3,2
  5444  1166  2946               	goto	l2230
  5445  1167                     l2240:	
  5446  1167  0821               	movf	___awdiv@sign,w
  5447  1168  1903               	btfsc	3,2
  5448  1169  296F               	goto	l2244
  5449  116A  09A2               	comf	___awdiv@quotient,f
  5450  116B  09A3               	comf	___awdiv@quotient+1,f
  5451  116C  0AA2               	incf	___awdiv@quotient,f
  5452  116D  1903               	skipnz
  5453  116E  0AA3               	incf	___awdiv@quotient+1,f
  5454  116F                     l2244:	
  5455  116F  0823               	movf	___awdiv@quotient+1,w
  5456  1170  01F8               	clrf	?___awdiv+1
  5457  1171  07F8               	addwf	?___awdiv+1,f
  5458  1172  0822               	movf	___awdiv@quotient,w
  5459  1173  01F7               	clrf	?___awdiv
  5460  1174  07F7               	addwf	?___awdiv,f
  5461  1175  0008               	return
  5462  1176                     __end_of___awdiv:	
  5463                           
  5464                           	psect	text9
  5465  1502                     __ptext9:	
  5466 ;; *************** function __tdiv_to_l_ *****************
  5467 ;; Defined at:
  5468 ;;		line 60 in file "/opt/microchip/xc8/v1.33/sources/common/ftdivl.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  f1              3    0[COMMON] float 
  5471 ;;  f2              3    3[COMMON] float 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  quot            4    0[BANK0 ] unsigned long 
  5474 ;;  exp1            1    5[BANK0 ] unsigned char 
  5475 ;;  cntr            1    4[BANK0 ] unsigned char 
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  4    0[COMMON] unsigned long 
  5478 ;; Registers used:
  5479 ;;		wreg, status,2, status,0
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5485 ;;      Params:         6       0       0       0       0
  5486 ;;      Locals:         0       6       0       0       0
  5487 ;;      Temps:          4       0       0       0       0
  5488 ;;      Totals:        10       6       0       0       0
  5489 ;;Total ram usage:       16 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		_sprintf
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           
  5499                           ;psect for function __tdiv_to_l_
  5500  1502                     __tdiv_to_l_:	
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  5504  1502  0870               	movf	__tdiv_to_l_@f1,w
  5505  1503  00F6               	movwf	??__tdiv_to_l_
  5506  1504  0871               	movf	__tdiv_to_l_@f1+1,w
  5507  1505  00F7               	movwf	??__tdiv_to_l_+1
  5508  1506  0872               	movf	__tdiv_to_l_@f1+2,w
  5509  1507  00F8               	movwf	??__tdiv_to_l_+2
  5510  1508  1003               	clrc
  5511  1509  0D77               	rlf	??__tdiv_to_l_+1,w
  5512  150A  0D78               	rlf	??__tdiv_to_l_+2,w
  5513  150B  00F9               	movwf	??__tdiv_to_l_+3
  5514  150C  0879               	movf	??__tdiv_to_l_+3,w
  5515  150D  1283               	bcf	3,5	;RP0=0, select bank0
  5516  150E  1303               	bcf	3,6	;RP1=0, select bank0
  5517  150F  00A5               	movwf	__tdiv_to_l_@exp1
  5518  1510  08A5               	movf	__tdiv_to_l_@exp1,f
  5519  1511  1D03               	skipz
  5520  1512  2D1C               	goto	l2514
  5521  1513  3000               	movlw	0
  5522  1514  00F3               	movwf	?__tdiv_to_l_+3
  5523  1515  3000               	movlw	0
  5524  1516  00F2               	movwf	?__tdiv_to_l_+2
  5525  1517  3000               	movlw	0
  5526  1518  00F1               	movwf	?__tdiv_to_l_+1
  5527  1519  3000               	movlw	0
  5528  151A  00F0               	movwf	?__tdiv_to_l_
  5529  151B  0008               	return
  5530  151C                     l2514:	
  5531  151C  0873               	movf	__tdiv_to_l_@f2,w
  5532  151D  00F6               	movwf	??__tdiv_to_l_
  5533  151E  0874               	movf	__tdiv_to_l_@f2+1,w
  5534  151F  00F7               	movwf	??__tdiv_to_l_+1
  5535  1520  0875               	movf	__tdiv_to_l_@f2+2,w
  5536  1521  00F8               	movwf	??__tdiv_to_l_+2
  5537  1522  1003               	clrc
  5538  1523  0D77               	rlf	??__tdiv_to_l_+1,w
  5539  1524  0D78               	rlf	??__tdiv_to_l_+2,w
  5540  1525  00F9               	movwf	??__tdiv_to_l_+3
  5541  1526  0879               	movf	??__tdiv_to_l_+3,w
  5542  1527  00A4               	movwf	__tdiv_to_l_@cntr
  5543  1528  08A4               	movf	__tdiv_to_l_@cntr,f
  5544  1529  1D03               	skipz
  5545  152A  2D34               	goto	l771
  5546  152B  3000               	movlw	0
  5547  152C  00F3               	movwf	?__tdiv_to_l_+3
  5548  152D  3000               	movlw	0
  5549  152E  00F2               	movwf	?__tdiv_to_l_+2
  5550  152F  3000               	movlw	0
  5551  1530  00F1               	movwf	?__tdiv_to_l_+1
  5552  1531  3000               	movlw	0
  5553  1532  00F0               	movwf	?__tdiv_to_l_
  5554  1533  0008               	return
  5555  1534                     l771:	
  5556  1534  17F1               	bsf	__tdiv_to_l_@f1+1,7
  5557  1535  30FF               	movlw	255
  5558  1536  05F0               	andwf	__tdiv_to_l_@f1,f
  5559  1537  30FF               	movlw	255
  5560  1538  05F1               	andwf	__tdiv_to_l_@f1+1,f
  5561  1539  3000               	movlw	0
  5562  153A  05F2               	andwf	__tdiv_to_l_@f1+2,f
  5563  153B  17F4               	bsf	__tdiv_to_l_@f2+1,7
  5564  153C  30FF               	movlw	255
  5565  153D  05F3               	andwf	__tdiv_to_l_@f2,f
  5566  153E  30FF               	movlw	255
  5567  153F  05F4               	andwf	__tdiv_to_l_@f2+1,f
  5568  1540  3000               	movlw	0
  5569  1541  05F5               	andwf	__tdiv_to_l_@f2+2,f
  5570  1542  3000               	movlw	0
  5571  1543  00A3               	movwf	__tdiv_to_l_@quot+3
  5572  1544  3000               	movlw	0
  5573  1545  00A2               	movwf	__tdiv_to_l_@quot+2
  5574  1546  3000               	movlw	0
  5575  1547  00A1               	movwf	__tdiv_to_l_@quot+1
  5576  1548  3000               	movlw	0
  5577  1549  00A0               	movwf	__tdiv_to_l_@quot
  5578  154A  307F               	movlw	127
  5579  154B  02A5               	subwf	__tdiv_to_l_@exp1,f
  5580  154C  3098               	movlw	152
  5581  154D  0724               	addwf	__tdiv_to_l_@cntr,w
  5582  154E  00F6               	movwf	??__tdiv_to_l_
  5583  154F  0876               	movf	??__tdiv_to_l_,w
  5584  1550  02A5               	subwf	__tdiv_to_l_@exp1,f
  5585  1551  3018               	movlw	24
  5586  1552  00F6               	movwf	??__tdiv_to_l_
  5587  1553  0876               	movf	??__tdiv_to_l_,w
  5588  1554  00A4               	movwf	__tdiv_to_l_@cntr
  5589  1555                     l2528:	
  5590  1555  3001               	movlw	1
  5591  1556  00F6               	movwf	??__tdiv_to_l_
  5592  1557                     u3425:	
  5593  1557  1003               	clrc
  5594  1558  0DA0               	rlf	__tdiv_to_l_@quot,f
  5595  1559  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5596  155A  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5597  155B  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5598  155C  0BF6               	decfsz	??__tdiv_to_l_,f
  5599  155D  2D57               	goto	u3425
  5600  155E  0875               	movf	__tdiv_to_l_@f2+2,w
  5601  155F  0272               	subwf	__tdiv_to_l_@f1+2,w
  5602  1560  1D03               	skipz
  5603  1561  2D68               	goto	u3435
  5604  1562  0874               	movf	__tdiv_to_l_@f2+1,w
  5605  1563  0271               	subwf	__tdiv_to_l_@f1+1,w
  5606  1564  1D03               	skipz
  5607  1565  2D68               	goto	u3435
  5608  1566  0873               	movf	__tdiv_to_l_@f2,w
  5609  1567  0270               	subwf	__tdiv_to_l_@f1,w
  5610  1568                     u3435:	
  5611  1568  1C03               	skipc
  5612  1569  2D75               	goto	l2536
  5613  156A  0873               	movf	__tdiv_to_l_@f2,w
  5614  156B  02F0               	subwf	__tdiv_to_l_@f1,f
  5615  156C  0874               	movf	__tdiv_to_l_@f2+1,w
  5616  156D  1C03               	skipc
  5617  156E  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  5618  156F  02F1               	subwf	__tdiv_to_l_@f1+1,f
  5619  1570  0875               	movf	__tdiv_to_l_@f2+2,w
  5620  1571  1C03               	skipc
  5621  1572  0A75               	incf	__tdiv_to_l_@f2+2,w
  5622  1573  02F2               	subwf	__tdiv_to_l_@f1+2,f
  5623  1574  1420               	bsf	__tdiv_to_l_@quot,0
  5624  1575                     l2536:	
  5625  1575  3001               	movlw	1
  5626  1576                     u3445:	
  5627  1576  1003               	clrc
  5628  1577  0DF0               	rlf	__tdiv_to_l_@f1,f
  5629  1578  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  5630  1579  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  5631  157A  3EFF               	addlw	-1
  5632  157B  1D03               	skipz
  5633  157C  2D76               	goto	u3445
  5634  157D  3001               	movlw	1
  5635  157E  02A4               	subwf	__tdiv_to_l_@cntr,f
  5636  157F  1D03               	btfss	3,2
  5637  1580  2D55               	goto	l2528
  5638  1581  1FA5               	btfss	__tdiv_to_l_@exp1,7
  5639  1582  2DA1               	goto	l2548
  5640  1583  0825               	movf	__tdiv_to_l_@exp1,w
  5641  1584  3A80               	xorlw	128
  5642  1585  3E97               	addlw	151
  5643  1586  1803               	skipnc
  5644  1587  2D91               	goto	l2546
  5645  1588  3000               	movlw	0
  5646  1589  00F3               	movwf	?__tdiv_to_l_+3
  5647  158A  3000               	movlw	0
  5648  158B  00F2               	movwf	?__tdiv_to_l_+2
  5649  158C  3000               	movlw	0
  5650  158D  00F1               	movwf	?__tdiv_to_l_+1
  5651  158E  3000               	movlw	0
  5652  158F  00F0               	movwf	?__tdiv_to_l_
  5653  1590  0008               	return
  5654  1591                     l2546:	
  5655  1591  3001               	movlw	1
  5656  1592                     u3485:	
  5657  1592  1003               	clrc
  5658  1593  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  5659  1594  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  5660  1595  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  5661  1596  0CA0               	rrf	__tdiv_to_l_@quot,f
  5662  1597  3EFF               	addlw	-1
  5663  1598  1D03               	skipz
  5664  1599  2D92               	goto	u3485
  5665  159A  3001               	movlw	1
  5666  159B  00F6               	movwf	??__tdiv_to_l_
  5667  159C  0876               	movf	??__tdiv_to_l_,w
  5668  159D  07A5               	addwf	__tdiv_to_l_@exp1,f
  5669  159E  1903               	btfsc	3,2
  5670  159F  2DBC               	goto	l2558
  5671  15A0  2D91               	goto	l2546
  5672  15A1                     l2548:	
  5673  15A1  3018               	movlw	24
  5674  15A2  0225               	subwf	__tdiv_to_l_@exp1,w
  5675  15A3  1C03               	skipc
  5676  15A4  2DB9               	goto	l2556
  5677  15A5  3000               	movlw	0
  5678  15A6  00F3               	movwf	?__tdiv_to_l_+3
  5679  15A7  3000               	movlw	0
  5680  15A8  00F2               	movwf	?__tdiv_to_l_+2
  5681  15A9  3000               	movlw	0
  5682  15AA  00F1               	movwf	?__tdiv_to_l_+1
  5683  15AB  3000               	movlw	0
  5684  15AC  00F0               	movwf	?__tdiv_to_l_
  5685  15AD  0008               	return
  5686  15AE                     l2554:	
  5687  15AE  3001               	movlw	1
  5688  15AF  00F6               	movwf	??__tdiv_to_l_
  5689  15B0                     u3515:	
  5690  15B0  1003               	clrc
  5691  15B1  0DA0               	rlf	__tdiv_to_l_@quot,f
  5692  15B2  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5693  15B3  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5694  15B4  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5695  15B5  0BF6               	decfsz	??__tdiv_to_l_,f
  5696  15B6  2DB0               	goto	u3515
  5697  15B7  3001               	movlw	1
  5698  15B8  02A5               	subwf	__tdiv_to_l_@exp1,f
  5699  15B9                     l2556:	
  5700  15B9  08A5               	movf	__tdiv_to_l_@exp1,f
  5701  15BA  1D03               	skipz
  5702  15BB  2DAE               	goto	l2554
  5703  15BC                     l2558:	
  5704  15BC  0823               	movf	__tdiv_to_l_@quot+3,w
  5705  15BD  00F3               	movwf	?__tdiv_to_l_+3
  5706  15BE  0822               	movf	__tdiv_to_l_@quot+2,w
  5707  15BF  00F2               	movwf	?__tdiv_to_l_+2
  5708  15C0  0821               	movf	__tdiv_to_l_@quot+1,w
  5709  15C1  00F1               	movwf	?__tdiv_to_l_+1
  5710  15C2  0820               	movf	__tdiv_to_l_@quot,w
  5711  15C3  00F0               	movwf	?__tdiv_to_l_
  5712  15C4  0008               	return
  5713  15C5                     __end_of__tdiv_to_l_:	
  5714                           
  5715                           	psect	text10
  5716  16CE                     __ptext10:	
  5717 ;; *************** function __div_to_l_ *****************
  5718 ;; Defined at:
  5719 ;;		line 60 in file "/opt/microchip/xc8/v1.33/sources/common/fldivl.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  f1              3    0[COMMON] unsigned long 
  5722 ;;  f2              3    3[COMMON] unsigned long 
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;  quot            4    0[BANK0 ] unsigned long 
  5725 ;;  exp1            1    5[BANK0 ] unsigned char 
  5726 ;;  cntr            1    4[BANK0 ] unsigned char 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  4    0[COMMON] unsigned long 
  5729 ;; Registers used:
  5730 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5736 ;;      Params:         6       0       0       0       0
  5737 ;;      Locals:         0       6       0       0       0
  5738 ;;      Temps:          8       0       0       0       0
  5739 ;;      Totals:        14       6       0       0       0
  5740 ;;Total ram usage:       20 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; This function calls:
  5743 ;;		Nothing
  5744 ;; This function is called by:
  5745 ;;		_sprintf
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function __div_to_l_
  5751  16CE                     __div_to_l_:	
  5752                           
  5753                           ;incstack = 0
  5754                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  5755  16CE  3070               	movlw	low __div_to_l_@f1
  5756  16CF  0084               	movwf	4
  5757  16D0  0800               	movf	0,w
  5758  16D1  00F6               	movwf	??__div_to_l_
  5759  16D2  0A84               	incf	4,f
  5760  16D3  0800               	movf	0,w
  5761  16D4  00F7               	movwf	??__div_to_l_+1
  5762  16D5  0A84               	incf	4,f
  5763  16D6  0800               	movf	0,w
  5764  16D7  00F8               	movwf	??__div_to_l_+2
  5765  16D8  0A84               	incf	4,f
  5766  16D9  0800               	movf	0,w
  5767  16DA  00F9               	movwf	??__div_to_l_+3
  5768  16DB  1003               	clrc
  5769  16DC  0D78               	rlf	??__div_to_l_+2,w
  5770  16DD  0D79               	rlf	??__div_to_l_+3,w
  5771  16DE  00FA               	movwf	??__div_to_l_+4
  5772  16DF  087A               	movf	??__div_to_l_+4,w
  5773  16E0  1283               	bcf	3,5	;RP0=0, select bank0
  5774  16E1  1303               	bcf	3,6	;RP1=0, select bank0
  5775  16E2  00A5               	movwf	__div_to_l_@exp1
  5776  16E3  08A5               	movf	__div_to_l_@exp1,f
  5777  16E4  1D03               	skipz
  5778  16E5  2EEF               	goto	l2568
  5779  16E6  3000               	movlw	0
  5780  16E7  00F3               	movwf	?__div_to_l_+3
  5781  16E8  3000               	movlw	0
  5782  16E9  00F2               	movwf	?__div_to_l_+2
  5783  16EA  3000               	movlw	0
  5784  16EB  00F1               	movwf	?__div_to_l_+1
  5785  16EC  3000               	movlw	0
  5786  16ED  00F0               	movwf	?__div_to_l_
  5787  16EE  0008               	return
  5788  16EF                     l2568:	
  5789  16EF  3073               	movlw	low __div_to_l_@f2
  5790  16F0  0084               	movwf	4
  5791  16F1  0800               	movf	0,w
  5792  16F2  00F6               	movwf	??__div_to_l_
  5793  16F3  0A84               	incf	4,f
  5794  16F4  0800               	movf	0,w
  5795  16F5  00F7               	movwf	??__div_to_l_+1
  5796  16F6  0A84               	incf	4,f
  5797  16F7  0800               	movf	0,w
  5798  16F8  00F8               	movwf	??__div_to_l_+2
  5799  16F9  0A84               	incf	4,f
  5800  16FA  0800               	movf	0,w
  5801  16FB  00F9               	movwf	??__div_to_l_+3
  5802  16FC  1003               	clrc
  5803  16FD  0D78               	rlf	??__div_to_l_+2,w
  5804  16FE  0D79               	rlf	??__div_to_l_+3,w
  5805  16FF  00FA               	movwf	??__div_to_l_+4
  5806  1700  087A               	movf	??__div_to_l_+4,w
  5807  1701  00A4               	movwf	__div_to_l_@cntr
  5808  1702  08A4               	movf	__div_to_l_@cntr,f
  5809  1703  1D03               	skipz
  5810  1704  2F0E               	goto	l2574
  5811  1705  3000               	movlw	0
  5812  1706  00F3               	movwf	?__div_to_l_+3
  5813  1707  3000               	movlw	0
  5814  1708  00F2               	movwf	?__div_to_l_+2
  5815  1709  3000               	movlw	0
  5816  170A  00F1               	movwf	?__div_to_l_+1
  5817  170B  3000               	movlw	0
  5818  170C  00F0               	movwf	?__div_to_l_
  5819  170D  0008               	return
  5820  170E                     l2574:	
  5821  170E  3070               	movlw	low __div_to_l_@f1
  5822  170F  0084               	movwf	4
  5823  1710  3000               	movlw	0
  5824  1711  0480               	iorwf	0,f
  5825  1712  0A84               	incf	4,f
  5826  1713  3000               	movlw	0
  5827  1714  0480               	iorwf	0,f
  5828  1715  0A84               	incf	4,f
  5829  1716  3080               	movlw	128
  5830  1717  0480               	iorwf	0,f
  5831  1718  0A84               	incf	4,f
  5832  1719  3000               	movlw	0
  5833  171A  0480               	iorwf	0,f
  5834  171B  3070               	movlw	low __div_to_l_@f1
  5835  171C  0084               	movwf	4
  5836  171D  30FF               	movlw	255
  5837  171E  0580               	andwf	0,f
  5838  171F  0A84               	incf	4,f
  5839  1720  30FF               	movlw	255
  5840  1721  0580               	andwf	0,f
  5841  1722  0A84               	incf	4,f
  5842  1723  30FF               	movlw	255
  5843  1724  0580               	andwf	0,f
  5844  1725  0A84               	incf	4,f
  5845  1726  3000               	movlw	0
  5846  1727  0580               	andwf	0,f
  5847  1728  3073               	movlw	low __div_to_l_@f2
  5848  1729  0084               	movwf	4
  5849  172A  3000               	movlw	0
  5850  172B  0480               	iorwf	0,f
  5851  172C  0A84               	incf	4,f
  5852  172D  3000               	movlw	0
  5853  172E  0480               	iorwf	0,f
  5854  172F  0A84               	incf	4,f
  5855  1730  3080               	movlw	128
  5856  1731  0480               	iorwf	0,f
  5857  1732  0A84               	incf	4,f
  5858  1733  3000               	movlw	0
  5859  1734  0480               	iorwf	0,f
  5860  1735  3073               	movlw	low __div_to_l_@f2
  5861  1736  0084               	movwf	4
  5862  1737  30FF               	movlw	255
  5863  1738  0580               	andwf	0,f
  5864  1739  0A84               	incf	4,f
  5865  173A  30FF               	movlw	255
  5866  173B  0580               	andwf	0,f
  5867  173C  0A84               	incf	4,f
  5868  173D  30FF               	movlw	255
  5869  173E  0580               	andwf	0,f
  5870  173F  0A84               	incf	4,f
  5871  1740  3000               	movlw	0
  5872  1741  0580               	andwf	0,f
  5873  1742  3000               	movlw	0
  5874  1743  00A3               	movwf	__div_to_l_@quot+3
  5875  1744  3000               	movlw	0
  5876  1745  00A2               	movwf	__div_to_l_@quot+2
  5877  1746  3000               	movlw	0
  5878  1747  00A1               	movwf	__div_to_l_@quot+1
  5879  1748  3000               	movlw	0
  5880  1749  00A0               	movwf	__div_to_l_@quot
  5881  174A  307F               	movlw	127
  5882  174B  02A5               	subwf	__div_to_l_@exp1,f
  5883  174C  30A0               	movlw	160
  5884  174D  0724               	addwf	__div_to_l_@cntr,w
  5885  174E  00F6               	movwf	??__div_to_l_
  5886  174F  0876               	movf	??__div_to_l_,w
  5887  1750  02A5               	subwf	__div_to_l_@exp1,f
  5888  1751  3020               	movlw	32
  5889  1752  00F6               	movwf	??__div_to_l_
  5890  1753  0876               	movf	??__div_to_l_,w
  5891  1754  00A4               	movwf	__div_to_l_@cntr
  5892  1755                     l2584:	
  5893  1755  3001               	movlw	1
  5894  1756  00F6               	movwf	??__div_to_l_
  5895  1757                     u3555:	
  5896  1757  1003               	clrc
  5897  1758  0DA0               	rlf	__div_to_l_@quot,f
  5898  1759  0DA1               	rlf	__div_to_l_@quot+1,f
  5899  175A  0DA2               	rlf	__div_to_l_@quot+2,f
  5900  175B  0DA3               	rlf	__div_to_l_@quot+3,f
  5901  175C  0BF6               	decfsz	??__div_to_l_,f
  5902  175D  2F57               	goto	u3555
  5903  175E  3073               	movlw	low __div_to_l_@f2
  5904  175F  0084               	movwf	4
  5905  1760  0800               	movf	0,w
  5906  1761  00F6               	movwf	??__div_to_l_
  5907  1762  0A84               	incf	4,f
  5908  1763  0800               	movf	0,w
  5909  1764  00F7               	movwf	??__div_to_l_+1
  5910  1765  0A84               	incf	4,f
  5911  1766  0800               	movf	0,w
  5912  1767  00F8               	movwf	??__div_to_l_+2
  5913  1768  0A84               	incf	4,f
  5914  1769  0800               	movf	0,w
  5915  176A  00F9               	movwf	??__div_to_l_+3
  5916  176B  3070               	movlw	low __div_to_l_@f1
  5917  176C  0084               	movwf	4
  5918  176D  0800               	movf	0,w
  5919  176E  00FA               	movwf	??__div_to_l_+4
  5920  176F  0A84               	incf	4,f
  5921  1770  0800               	movf	0,w
  5922  1771  00FB               	movwf	??__div_to_l_+5
  5923  1772  0A84               	incf	4,f
  5924  1773  0800               	movf	0,w
  5925  1774  00FC               	movwf	??__div_to_l_+6
  5926  1775  0A84               	incf	4,f
  5927  1776  0800               	movf	0,w
  5928  1777  00FD               	movwf	??__div_to_l_+7
  5929  1778  0879               	movf	??__div_to_l_+3,w
  5930  1779  027D               	subwf	??__div_to_l_+7,w
  5931  177A  1D03               	skipz
  5932  177B  2F86               	goto	u3565
  5933  177C  0878               	movf	??__div_to_l_+2,w
  5934  177D  027C               	subwf	??__div_to_l_+6,w
  5935  177E  1D03               	skipz
  5936  177F  2F86               	goto	u3565
  5937  1780  0877               	movf	??__div_to_l_+1,w
  5938  1781  027B               	subwf	??__div_to_l_+5,w
  5939  1782  1D03               	skipz
  5940  1783  2F86               	goto	u3565
  5941  1784  0876               	movf	??__div_to_l_,w
  5942  1785  027A               	subwf	??__div_to_l_+4,w
  5943  1786                     u3565:	
  5944  1786  1C03               	skipc
  5945  1787  2FAB               	goto	l696
  5946  1788  3073               	movlw	low __div_to_l_@f2
  5947  1789  0084               	movwf	4
  5948  178A  0800               	movf	0,w
  5949  178B  00F6               	movwf	??__div_to_l_
  5950  178C  0A84               	incf	4,f
  5951  178D  0800               	movf	0,w
  5952  178E  00F7               	movwf	??__div_to_l_+1
  5953  178F  0A84               	incf	4,f
  5954  1790  0800               	movf	0,w
  5955  1791  00F8               	movwf	??__div_to_l_+2
  5956  1792  0A84               	incf	4,f
  5957  1793  0800               	movf	0,w
  5958  1794  00F9               	movwf	??__div_to_l_+3
  5959  1795  3070               	movlw	low __div_to_l_@f1
  5960  1796  0084               	movwf	4
  5961  1797  0876               	movf	??__div_to_l_,w
  5962  1798  0280               	subwf	0,f
  5963  1799  0A84               	incf	4,f
  5964  179A  0877               	movf	??__div_to_l_+1,w
  5965  179B  1C03               	skipc
  5966  179C  0F77               	incfsz	??__div_to_l_+1,w
  5967  179D  0280               	subwf	0,f
  5968  179E  0A84               	incf	4,f
  5969  179F  0878               	movf	??__div_to_l_+2,w
  5970  17A0  1C03               	skipc
  5971  17A1  0F78               	incfsz	??__div_to_l_+2,w
  5972  17A2  0280               	subwf	0,f
  5973  17A3  0A84               	incf	4,f
  5974  17A4  0879               	movf	??__div_to_l_+3,w
  5975  17A5  1C03               	skipc
  5976  17A6  0A79               	incf	??__div_to_l_+3,w
  5977  17A7  0280               	subwf	0,f
  5978  17A8  3003               	movlw	3
  5979  17A9  0284               	subwf	4,f
  5980  17AA  1420               	bsf	__div_to_l_@quot,0
  5981  17AB                     l696:	
  5982  17AB  3070               	movlw	low __div_to_l_@f1
  5983  17AC  0084               	movwf	4
  5984  17AD  1003               	clrc
  5985  17AE  0D80               	rlf	0,f
  5986  17AF  0A84               	incf	4,f
  5987  17B0  0D80               	rlf	0,f
  5988  17B1  0A84               	incf	4,f
  5989  17B2  0D80               	rlf	0,f
  5990  17B3  0A84               	incf	4,f
  5991  17B4  0D80               	rlf	0,f
  5992  17B5  0384               	decf	4,f
  5993  17B6  0384               	decf	4,f
  5994  17B7  0384               	decf	4,f
  5995  17B8  3001               	movlw	1
  5996  17B9  02A4               	subwf	__div_to_l_@cntr,f
  5997  17BA  1D03               	btfss	3,2
  5998  17BB  2F55               	goto	l2584
  5999  17BC  1FA5               	btfss	__div_to_l_@exp1,7
  6000  17BD  2FDC               	goto	l2602
  6001  17BE  0825               	movf	__div_to_l_@exp1,w
  6002  17BF  3A80               	xorlw	128
  6003  17C0  3E9F               	addlw	159
  6004  17C1  1803               	skipnc
  6005  17C2  2FCC               	goto	l2600
  6006  17C3  3000               	movlw	0
  6007  17C4  00F3               	movwf	?__div_to_l_+3
  6008  17C5  3000               	movlw	0
  6009  17C6  00F2               	movwf	?__div_to_l_+2
  6010  17C7  3000               	movlw	0
  6011  17C8  00F1               	movwf	?__div_to_l_+1
  6012  17C9  3000               	movlw	0
  6013  17CA  00F0               	movwf	?__div_to_l_
  6014  17CB  0008               	return
  6015  17CC                     l2600:	
  6016  17CC  3001               	movlw	1
  6017  17CD                     u3605:	
  6018  17CD  1003               	clrc
  6019  17CE  0CA3               	rrf	__div_to_l_@quot+3,f
  6020  17CF  0CA2               	rrf	__div_to_l_@quot+2,f
  6021  17D0  0CA1               	rrf	__div_to_l_@quot+1,f
  6022  17D1  0CA0               	rrf	__div_to_l_@quot,f
  6023  17D2  3EFF               	addlw	-1
  6024  17D3  1D03               	skipz
  6025  17D4  2FCD               	goto	u3605
  6026  17D5  3001               	movlw	1
  6027  17D6  00F6               	movwf	??__div_to_l_
  6028  17D7  0876               	movf	??__div_to_l_,w
  6029  17D8  07A5               	addwf	__div_to_l_@exp1,f
  6030  17D9  1903               	btfsc	3,2
  6031  17DA  2FF7               	goto	l2612
  6032  17DB  2FCC               	goto	l2600
  6033  17DC                     l2602:	
  6034  17DC  3020               	movlw	32
  6035  17DD  0225               	subwf	__div_to_l_@exp1,w
  6036  17DE  1C03               	skipc
  6037  17DF  2FF4               	goto	l2610
  6038  17E0  3000               	movlw	0
  6039  17E1  00F3               	movwf	?__div_to_l_+3
  6040  17E2  3000               	movlw	0
  6041  17E3  00F2               	movwf	?__div_to_l_+2
  6042  17E4  3000               	movlw	0
  6043  17E5  00F1               	movwf	?__div_to_l_+1
  6044  17E6  3000               	movlw	0
  6045  17E7  00F0               	movwf	?__div_to_l_
  6046  17E8  0008               	return
  6047  17E9                     l2608:	
  6048  17E9  3001               	movlw	1
  6049  17EA  00F6               	movwf	??__div_to_l_
  6050  17EB                     u3635:	
  6051  17EB  1003               	clrc
  6052  17EC  0DA0               	rlf	__div_to_l_@quot,f
  6053  17ED  0DA1               	rlf	__div_to_l_@quot+1,f
  6054  17EE  0DA2               	rlf	__div_to_l_@quot+2,f
  6055  17EF  0DA3               	rlf	__div_to_l_@quot+3,f
  6056  17F0  0BF6               	decfsz	??__div_to_l_,f
  6057  17F1  2FEB               	goto	u3635
  6058  17F2  3001               	movlw	1
  6059  17F3  02A5               	subwf	__div_to_l_@exp1,f
  6060  17F4                     l2610:	
  6061  17F4  08A5               	movf	__div_to_l_@exp1,f
  6062  17F5  1D03               	skipz
  6063  17F6  2FE9               	goto	l2608
  6064  17F7                     l2612:	
  6065  17F7  0823               	movf	__div_to_l_@quot+3,w
  6066  17F8  00F3               	movwf	?__div_to_l_+3
  6067  17F9  0822               	movf	__div_to_l_@quot+2,w
  6068  17FA  00F2               	movwf	?__div_to_l_+2
  6069  17FB  0821               	movf	__div_to_l_@quot+1,w
  6070  17FC  00F1               	movwf	?__div_to_l_+1
  6071  17FD  0820               	movf	__div_to_l_@quot,w
  6072  17FE  00F0               	movwf	?__div_to_l_
  6073  17FF  0008               	return
  6074  1800                     __end_of__div_to_l_:	
  6075                           
  6076                           	psect	text11
  6077  10F6                     __ptext11:	
  6078 ;; *************** function ___wmul *****************
  6079 ;; Defined at:
  6080 ;;		line 15 in file "/opt/microchip/xc8/v1.33/sources/common/Umul16.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;  multiplier      2    0[COMMON] unsigned int 
  6083 ;;  multiplicand    2    2[COMMON] unsigned int 
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;  product         2    4[COMMON] unsigned int 
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  2    0[COMMON] unsigned int 
  6088 ;; Registers used:
  6089 ;;		wreg, status,2, status,0
  6090 ;; Tracked objects:
  6091 ;;		On entry : 0/0
  6092 ;;		On exit  : 0/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6095 ;;      Params:         4       0       0       0       0
  6096 ;;      Locals:         2       0       0       0       0
  6097 ;;      Temps:          0       0       0       0       0
  6098 ;;      Totals:         6       0       0       0       0
  6099 ;;Total ram usage:        6 bytes
  6100 ;; Hardware stack levels used:    1
  6101 ;; This function calls:
  6102 ;;		Nothing
  6103 ;; This function is called by:
  6104 ;;		_sprintf
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           
  6109                           ;psect for function ___wmul
  6110  10F6                     ___wmul:	
  6111                           
  6112                           ;incstack = 0
  6113                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6114  10F6  01F4               	clrf	___wmul@product
  6115  10F7  01F5               	clrf	___wmul@product+1
  6116  10F8                     l2618:	
  6117  10F8  1C70               	btfss	___wmul@multiplier,0
  6118  10F9  2900               	goto	l538
  6119  10FA  0872               	movf	___wmul@multiplicand,w
  6120  10FB  07F4               	addwf	___wmul@product,f
  6121  10FC  1803               	skipnc
  6122  10FD  0AF5               	incf	___wmul@product+1,f
  6123  10FE  0873               	movf	___wmul@multiplicand+1,w
  6124  10FF  07F5               	addwf	___wmul@product+1,f
  6125  1100                     l538:	
  6126  1100  3001               	movlw	1
  6127  1101                     u3665:	
  6128  1101  1003               	clrc
  6129  1102  0DF2               	rlf	___wmul@multiplicand,f
  6130  1103  0DF3               	rlf	___wmul@multiplicand+1,f
  6131  1104  3EFF               	addlw	-1
  6132  1105  1D03               	skipz
  6133  1106  2901               	goto	u3665
  6134  1107  3001               	movlw	1
  6135  1108                     u3675:	
  6136  1108  1003               	clrc
  6137  1109  0CF1               	rrf	___wmul@multiplier+1,f
  6138  110A  0CF0               	rrf	___wmul@multiplier,f
  6139  110B  3EFF               	addlw	-1
  6140  110C  1D03               	skipz
  6141  110D  2908               	goto	u3675
  6142  110E  0871               	movf	___wmul@multiplier+1,w
  6143  110F  0470               	iorwf	___wmul@multiplier,w
  6144  1110  1D03               	skipz
  6145  1111  28F8               	goto	l2618
  6146  1112  0875               	movf	___wmul@product+1,w
  6147  1113  01F1               	clrf	?___wmul+1
  6148  1114  07F1               	addwf	?___wmul+1,f
  6149  1115  0874               	movf	___wmul@product,w
  6150  1116  01F0               	clrf	?___wmul
  6151  1117  07F0               	addwf	?___wmul,f
  6152  1118  0008               	return
  6153  1119                     __end_of___wmul:	
  6154                           
  6155                           	psect	text12
  6156  1EDD                     __ptext12:	
  6157 ;; *************** function ___lltoft *****************
  6158 ;; Defined at:
  6159 ;;		line 35 in file "/opt/microchip/xc8/v1.33/sources/common/lltoft.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;  c               4   15[BANK0 ] unsigned long 
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;  exp             1   20[BANK0 ] unsigned char 
  6164 ;; Return value:  Size  Location     Type
  6165 ;;                  3   15[BANK0 ] float 
  6166 ;; Registers used:
  6167 ;;		wreg, status,2, status,0, pclath, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6173 ;;      Params:         0       4       0       0       0
  6174 ;;      Locals:         0       1       0       0       0
  6175 ;;      Temps:          0       1       0       0       0
  6176 ;;      Totals:         0       6       0       0       0
  6177 ;;Total ram usage:        6 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:    1
  6180 ;; This function calls:
  6181 ;;		___ftpack
  6182 ;; This function is called by:
  6183 ;;		_main
  6184 ;;		_sprintf
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           
  6189                           ;psect for function ___lltoft
  6190  1EDD                     ___lltoft:	
  6191                           
  6192                           ;incstack = 0
  6193                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6194  1EDD  308E               	movlw	142
  6195  1EDE  1283               	bcf	3,5	;RP0=0, select bank0
  6196  1EDF  1303               	bcf	3,6	;RP1=0, select bank0
  6197  1EE0  00B3               	movwf	??___lltoft
  6198  1EE1  0833               	movf	??___lltoft,w
  6199  1EE2  00B4               	movwf	___lltoft@exp
  6200  1EE3                     l2754:	
  6201  1EE3  30FF               	movlw	255
  6202  1EE4  0532               	andwf	___lltoft@c+3,w
  6203  1EE5  1903               	btfsc	3,2
  6204  1EE6  2EF5               	goto	l2756
  6205  1EE7  3001               	movlw	1
  6206  1EE8                     u3985:	
  6207  1EE8  1003               	clrc
  6208  1EE9  0CB2               	rrf	___lltoft@c+3,f
  6209  1EEA  0CB1               	rrf	___lltoft@c+2,f
  6210  1EEB  0CB0               	rrf	___lltoft@c+1,f
  6211  1EEC  0CAF               	rrf	___lltoft@c,f
  6212  1EED  3EFF               	addlw	-1
  6213  1EEE  1D03               	skipz
  6214  1EEF  2EE8               	goto	u3985
  6215  1EF0  3001               	movlw	1
  6216  1EF1  00B3               	movwf	??___lltoft
  6217  1EF2  0833               	movf	??___lltoft,w
  6218  1EF3  07B4               	addwf	___lltoft@exp,f
  6219  1EF4  2EE3               	goto	l2754
  6220  1EF5                     l2756:	
  6221  1EF5  082F               	movf	___lltoft@c,w
  6222  1EF6  00F0               	movwf	___ftpack@arg
  6223  1EF7  0830               	movf	___lltoft@c+1,w
  6224  1EF8  00F1               	movwf	___ftpack@arg+1
  6225  1EF9  0831               	movf	___lltoft@c+2,w
  6226  1EFA  00F2               	movwf	___ftpack@arg+2
  6227  1EFB  0834               	movf	___lltoft@exp,w
  6228  1EFC  00B3               	movwf	??___lltoft
  6229  1EFD  0833               	movf	??___lltoft,w
  6230  1EFE  00F3               	movwf	___ftpack@exp
  6231  1EFF  01F4               	clrf	___ftpack@sign
  6232  1F00  160A  118A  2233   	fcall	___ftpack
  6233  1F03  0870               	movf	?___ftpack,w
  6234  1F04  1283               	bcf	3,5	;RP0=0, select bank0
  6235  1F05  1303               	bcf	3,6	;RP1=0, select bank0
  6236  1F06  00AF               	movwf	?___lltoft
  6237  1F07  0871               	movf	?___ftpack+1,w
  6238  1F08  00B0               	movwf	?___lltoft+1
  6239  1F09  0872               	movf	?___ftpack+2,w
  6240  1F0A  00B1               	movwf	?___lltoft+2
  6241  1F0B  0008               	return
  6242  1F0C                     __end_of___lltoft:	
  6243                           
  6244                           	psect	text13
  6245  1F0C                     __ptext13:	
  6246 ;; *************** function ___llmod *****************
  6247 ;; Defined at:
  6248 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/llmod.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  divisor         4    0[COMMON] unsigned long 
  6251 ;;  dividend        4    4[COMMON] unsigned long 
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;  counter         1    9[COMMON] unsigned char 
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  4    0[COMMON] unsigned long 
  6256 ;; Registers used:
  6257 ;;		wreg, status,2, status,0
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6263 ;;      Params:         8       0       0       0       0
  6264 ;;      Locals:         1       0       0       0       0
  6265 ;;      Temps:          1       0       0       0       0
  6266 ;;      Totals:        10       0       0       0       0
  6267 ;;Total ram usage:       10 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; This function calls:
  6270 ;;		Nothing
  6271 ;; This function is called by:
  6272 ;;		_sprintf
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           
  6277                           ;psect for function ___llmod
  6278  1F0C                     ___llmod:	
  6279                           
  6280                           ;incstack = 0
  6281                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6282  1F0C  0873               	movf	___llmod@divisor+3,w
  6283  1F0D  0472               	iorwf	___llmod@divisor+2,w
  6284  1F0E  0471               	iorwf	___llmod@divisor+1,w
  6285  1F0F  0470               	iorwf	___llmod@divisor,w
  6286  1F10  1903               	skipnz
  6287  1F11  2F4F               	goto	l2746
  6288  1F12  01F9               	clrf	___llmod@counter
  6289  1F13  0AF9               	incf	___llmod@counter,f
  6290  1F14                     l2736:	
  6291  1F14  1BF3               	btfsc	___llmod@divisor+3,7
  6292  1F15  2F24               	goto	l2738
  6293  1F16  3001               	movlw	1
  6294  1F17  00F8               	movwf	??___llmod
  6295  1F18                     u3935:	
  6296  1F18  1003               	clrc
  6297  1F19  0DF0               	rlf	___llmod@divisor,f
  6298  1F1A  0DF1               	rlf	___llmod@divisor+1,f
  6299  1F1B  0DF2               	rlf	___llmod@divisor+2,f
  6300  1F1C  0DF3               	rlf	___llmod@divisor+3,f
  6301  1F1D  0BF8               	decfsz	??___llmod,f
  6302  1F1E  2F18               	goto	u3935
  6303  1F1F  3001               	movlw	1
  6304  1F20  00F8               	movwf	??___llmod
  6305  1F21  0878               	movf	??___llmod,w
  6306  1F22  07F9               	addwf	___llmod@counter,f
  6307  1F23  2F14               	goto	l2736
  6308  1F24                     l2738:	
  6309  1F24  0873               	movf	___llmod@divisor+3,w
  6310  1F25  0277               	subwf	___llmod@dividend+3,w
  6311  1F26  1D03               	skipz
  6312  1F27  2F32               	goto	u3955
  6313  1F28  0872               	movf	___llmod@divisor+2,w
  6314  1F29  0276               	subwf	___llmod@dividend+2,w
  6315  1F2A  1D03               	skipz
  6316  1F2B  2F32               	goto	u3955
  6317  1F2C  0871               	movf	___llmod@divisor+1,w
  6318  1F2D  0275               	subwf	___llmod@dividend+1,w
  6319  1F2E  1D03               	skipz
  6320  1F2F  2F32               	goto	u3955
  6321  1F30  0870               	movf	___llmod@divisor,w
  6322  1F31  0274               	subwf	___llmod@dividend,w
  6323  1F32                     u3955:	
  6324  1F32  1C03               	skipc
  6325  1F33  2F42               	goto	l2742
  6326  1F34  0870               	movf	___llmod@divisor,w
  6327  1F35  02F4               	subwf	___llmod@dividend,f
  6328  1F36  0871               	movf	___llmod@divisor+1,w
  6329  1F37  1C03               	skipc
  6330  1F38  0F71               	incfsz	___llmod@divisor+1,w
  6331  1F39  02F5               	subwf	___llmod@dividend+1,f
  6332  1F3A  0872               	movf	___llmod@divisor+2,w
  6333  1F3B  1C03               	skipc
  6334  1F3C  0F72               	incfsz	___llmod@divisor+2,w
  6335  1F3D  02F6               	subwf	___llmod@dividend+2,f
  6336  1F3E  0873               	movf	___llmod@divisor+3,w
  6337  1F3F  1C03               	skipc
  6338  1F40  0F73               	incfsz	___llmod@divisor+3,w
  6339  1F41  02F7               	subwf	___llmod@dividend+3,f
  6340  1F42                     l2742:	
  6341  1F42  3001               	movlw	1
  6342  1F43                     u3965:	
  6343  1F43  1003               	clrc
  6344  1F44  0CF3               	rrf	___llmod@divisor+3,f
  6345  1F45  0CF2               	rrf	___llmod@divisor+2,f
  6346  1F46  0CF1               	rrf	___llmod@divisor+1,f
  6347  1F47  0CF0               	rrf	___llmod@divisor,f
  6348  1F48  3EFF               	addlw	-1
  6349  1F49  1D03               	skipz
  6350  1F4A  2F43               	goto	u3965
  6351  1F4B  3001               	movlw	1
  6352  1F4C  02F9               	subwf	___llmod@counter,f
  6353  1F4D  1D03               	btfss	3,2
  6354  1F4E  2F24               	goto	l2738
  6355  1F4F                     l2746:	
  6356  1F4F  0877               	movf	___llmod@dividend+3,w
  6357  1F50  00F3               	movwf	?___llmod+3
  6358  1F51  0876               	movf	___llmod@dividend+2,w
  6359  1F52  00F2               	movwf	?___llmod+2
  6360  1F53  0875               	movf	___llmod@dividend+1,w
  6361  1F54  00F1               	movwf	?___llmod+1
  6362  1F55  0874               	movf	___llmod@dividend,w
  6363  1F56  00F0               	movwf	?___llmod
  6364  1F57  0008               	return
  6365  1F58                     __end_of___llmod:	
  6366                           
  6367                           	psect	text14
  6368  1314                     __ptext14:	
  6369 ;; *************** function ___fttol *****************
  6370 ;; Defined at:
  6371 ;;		line 44 in file "/opt/microchip/xc8/v1.33/sources/common/fttol.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;  f1              3   46[BANK0 ] float 
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;  lval            4   55[BANK0 ] unsigned long 
  6376 ;;  exp1            1   59[BANK0 ] unsigned char 
  6377 ;;  sign1           1   54[BANK0 ] unsigned char 
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  4   46[BANK0 ] long 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2, status,0
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6387 ;;      Params:         0       4       0       0       0
  6388 ;;      Locals:         0       6       0       0       0
  6389 ;;      Temps:          0       4       0       0       0
  6390 ;;      Totals:         0      14       0       0       0
  6391 ;;Total ram usage:       14 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; This function calls:
  6394 ;;		Nothing
  6395 ;; This function is called by:
  6396 ;;		_sprintf
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           
  6401                           ;psect for function ___fttol
  6402  1314                     ___fttol:	
  6403                           
  6404                           ;incstack = 0
  6405                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6406  1314  1283               	bcf	3,5	;RP0=0, select bank0
  6407  1315  1303               	bcf	3,6	;RP1=0, select bank0
  6408  1316  084E               	movf	___fttol@f1,w
  6409  1317  00D2               	movwf	??___fttol
  6410  1318  084F               	movf	___fttol@f1+1,w
  6411  1319  00D3               	movwf	??___fttol+1
  6412  131A  0850               	movf	___fttol@f1+2,w
  6413  131B  00D4               	movwf	??___fttol+2
  6414  131C  1003               	clrc
  6415  131D  0D53               	rlf	??___fttol+1,w
  6416  131E  0D54               	rlf	??___fttol+2,w
  6417  131F  00D5               	movwf	??___fttol+3
  6418  1320  0855               	movf	??___fttol+3,w
  6419  1321  00DB               	movwf	___fttol@exp1
  6420  1322  08DB               	movf	___fttol@exp1,f
  6421  1323  1D03               	skipz
  6422  1324  2B2E               	goto	l2668
  6423  1325  3000               	movlw	0
  6424  1326  00D1               	movwf	?___fttol+3
  6425  1327  3000               	movlw	0
  6426  1328  00D0               	movwf	?___fttol+2
  6427  1329  3000               	movlw	0
  6428  132A  00CF               	movwf	?___fttol+1
  6429  132B  3000               	movlw	0
  6430  132C  00CE               	movwf	?___fttol
  6431  132D  0008               	return
  6432  132E                     l2668:	
  6433  132E  084E               	movf	___fttol@f1,w
  6434  132F  00D2               	movwf	??___fttol
  6435  1330  084F               	movf	___fttol@f1+1,w
  6436  1331  00D3               	movwf	??___fttol+1
  6437  1332  0850               	movf	___fttol@f1+2,w
  6438  1333  00D4               	movwf	??___fttol+2
  6439  1334  3017               	movlw	23
  6440  1335                     u3765:	
  6441  1335  1003               	clrc
  6442  1336  0CD4               	rrf	??___fttol+2,f
  6443  1337  0CD3               	rrf	??___fttol+1,f
  6444  1338  0CD2               	rrf	??___fttol,f
  6445  1339  3EFF               	addlw	-1
  6446  133A  1D03               	skipz
  6447  133B  2B35               	goto	u3765
  6448  133C  0852               	movf	??___fttol,w
  6449  133D  00D5               	movwf	??___fttol+3
  6450  133E  0855               	movf	??___fttol+3,w
  6451  133F  00D6               	movwf	___fttol@sign1
  6452  1340  17CF               	bsf	___fttol@f1+1,7
  6453  1341  30FF               	movlw	255
  6454  1342  05CE               	andwf	___fttol@f1,f
  6455  1343  30FF               	movlw	255
  6456  1344  05CF               	andwf	___fttol@f1+1,f
  6457  1345  3000               	movlw	0
  6458  1346  05D0               	andwf	___fttol@f1+2,f
  6459  1347  084E               	movf	___fttol@f1,w
  6460  1348  00D7               	movwf	___fttol@lval
  6461  1349  084F               	movf	___fttol@f1+1,w
  6462  134A  00D8               	movwf	___fttol@lval+1
  6463  134B  0850               	movf	___fttol@f1+2,w
  6464  134C  00D9               	movwf	___fttol@lval+2
  6465  134D  01DA               	clrf	___fttol@lval+3
  6466  134E  308E               	movlw	142
  6467  134F  02DB               	subwf	___fttol@exp1,f
  6468  1350  1FDB               	btfss	___fttol@exp1,7
  6469  1351  2B70               	goto	l2688
  6470  1352  085B               	movf	___fttol@exp1,w
  6471  1353  3A80               	xorlw	128
  6472  1354  3E8F               	addlw	143
  6473  1355  1803               	skipnc
  6474  1356  2B60               	goto	l2686
  6475  1357  3000               	movlw	0
  6476  1358  00D1               	movwf	?___fttol+3
  6477  1359  3000               	movlw	0
  6478  135A  00D0               	movwf	?___fttol+2
  6479  135B  3000               	movlw	0
  6480  135C  00CF               	movwf	?___fttol+1
  6481  135D  3000               	movlw	0
  6482  135E  00CE               	movwf	?___fttol
  6483  135F  0008               	return
  6484  1360                     l2686:	
  6485  1360  3001               	movlw	1
  6486  1361                     u3795:	
  6487  1361  1003               	clrc
  6488  1362  0CDA               	rrf	___fttol@lval+3,f
  6489  1363  0CD9               	rrf	___fttol@lval+2,f
  6490  1364  0CD8               	rrf	___fttol@lval+1,f
  6491  1365  0CD7               	rrf	___fttol@lval,f
  6492  1366  3EFF               	addlw	-1
  6493  1367  1D03               	skipz
  6494  1368  2B61               	goto	u3795
  6495  1369  3001               	movlw	1
  6496  136A  00D2               	movwf	??___fttol
  6497  136B  0852               	movf	??___fttol,w
  6498  136C  07DB               	addwf	___fttol@exp1,f
  6499  136D  1903               	btfsc	3,2
  6500  136E  2B8B               	goto	l2698
  6501  136F  2B60               	goto	l2686
  6502  1370                     l2688:	
  6503  1370  3018               	movlw	24
  6504  1371  025B               	subwf	___fttol@exp1,w
  6505  1372  1C03               	skipc
  6506  1373  2B88               	goto	l2696
  6507  1374  3000               	movlw	0
  6508  1375  00D1               	movwf	?___fttol+3
  6509  1376  3000               	movlw	0
  6510  1377  00D0               	movwf	?___fttol+2
  6511  1378  3000               	movlw	0
  6512  1379  00CF               	movwf	?___fttol+1
  6513  137A  3000               	movlw	0
  6514  137B  00CE               	movwf	?___fttol
  6515  137C  0008               	return
  6516  137D                     l2694:	
  6517  137D  3001               	movlw	1
  6518  137E  00D2               	movwf	??___fttol
  6519  137F                     u3825:	
  6520  137F  1003               	clrc
  6521  1380  0DD7               	rlf	___fttol@lval,f
  6522  1381  0DD8               	rlf	___fttol@lval+1,f
  6523  1382  0DD9               	rlf	___fttol@lval+2,f
  6524  1383  0DDA               	rlf	___fttol@lval+3,f
  6525  1384  0BD2               	decfsz	??___fttol,f
  6526  1385  2B7F               	goto	u3825
  6527  1386  3001               	movlw	1
  6528  1387  02DB               	subwf	___fttol@exp1,f
  6529  1388                     l2696:	
  6530  1388  08DB               	movf	___fttol@exp1,f
  6531  1389  1D03               	skipz
  6532  138A  2B7D               	goto	l2694
  6533  138B                     l2698:	
  6534  138B  0856               	movf	___fttol@sign1,w
  6535  138C  1903               	btfsc	3,2
  6536  138D  2B99               	goto	l2702
  6537  138E  09D7               	comf	___fttol@lval,f
  6538  138F  09D8               	comf	___fttol@lval+1,f
  6539  1390  09D9               	comf	___fttol@lval+2,f
  6540  1391  09DA               	comf	___fttol@lval+3,f
  6541  1392  0AD7               	incf	___fttol@lval,f
  6542  1393  1903               	skipnz
  6543  1394  0AD8               	incf	___fttol@lval+1,f
  6544  1395  1903               	skipnz
  6545  1396  0AD9               	incf	___fttol@lval+2,f
  6546  1397  1903               	skipnz
  6547  1398  0ADA               	incf	___fttol@lval+3,f
  6548  1399                     l2702:	
  6549  1399  085A               	movf	___fttol@lval+3,w
  6550  139A  00D1               	movwf	?___fttol+3
  6551  139B  0859               	movf	___fttol@lval+2,w
  6552  139C  00D0               	movwf	?___fttol+2
  6553  139D  0858               	movf	___fttol@lval+1,w
  6554  139E  00CF               	movwf	?___fttol+1
  6555  139F  0857               	movf	___fttol@lval,w
  6556  13A0  00CE               	movwf	?___fttol
  6557  13A1  0008               	return
  6558  13A2                     __end_of___fttol:	
  6559                           
  6560                           	psect	text15
  6561  1E61                     __ptext15:	
  6562 ;; *************** function ___ftsub *****************
  6563 ;; Defined at:
  6564 ;;		line 18 in file "/opt/microchip/xc8/v1.33/sources/common/ftsub.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  f2              3   66[BANK0 ] float 
  6567 ;;  f1              3   69[BANK0 ] float 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;		None
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  3   66[BANK0 ] float 
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6579 ;;      Params:         0       6       0       0       0
  6580 ;;      Locals:         0       0       0       0       0
  6581 ;;      Temps:          0       0       0       0       0
  6582 ;;      Totals:         0       6       0       0       0
  6583 ;;Total ram usage:        6 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    2
  6586 ;; This function calls:
  6587 ;;		___ftadd
  6588 ;; This function is called by:
  6589 ;;		_sprintf
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           
  6594                           ;psect for function ___ftsub
  6595  1E61                     ___ftsub:	
  6596                           
  6597                           ;incstack = 0
  6598                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6599  1E61  3080               	movlw	128
  6600  1E62  1283               	bcf	3,5	;RP0=0, select bank0
  6601  1E63  1303               	bcf	3,6	;RP1=0, select bank0
  6602  1E64  06E4               	xorwf	___ftsub@f2+2,f
  6603  1E65  0865               	movf	___ftsub@f1,w
  6604  1E66  00D5               	movwf	___ftadd@f1
  6605  1E67  0866               	movf	___ftsub@f1+1,w
  6606  1E68  00D6               	movwf	___ftadd@f1+1
  6607  1E69  0867               	movf	___ftsub@f1+2,w
  6608  1E6A  00D7               	movwf	___ftadd@f1+2
  6609  1E6B  0862               	movf	___ftsub@f2,w
  6610  1E6C  00D8               	movwf	___ftadd@f2
  6611  1E6D  0863               	movf	___ftsub@f2+1,w
  6612  1E6E  00D9               	movwf	___ftadd@f2+1
  6613  1E6F  0864               	movf	___ftsub@f2+2,w
  6614  1E70  00DA               	movwf	___ftadd@f2+2
  6615  1E71  160A  118A  25C5   	fcall	___ftadd
  6616  1E74  1283               	bcf	3,5	;RP0=0, select bank0
  6617  1E75  1303               	bcf	3,6	;RP1=0, select bank0
  6618  1E76  0855               	movf	?___ftadd,w
  6619  1E77  00E2               	movwf	?___ftsub
  6620  1E78  0856               	movf	?___ftadd+1,w
  6621  1E79  00E3               	movwf	?___ftsub+1
  6622  1E7A  0857               	movf	?___ftadd+2,w
  6623  1E7B  00E4               	movwf	?___ftsub+2
  6624  1E7C  0008               	return
  6625  1E7D                     __end_of___ftsub:	
  6626                           
  6627                           	psect	text16
  6628  15C5                     __ptext16:	
  6629 ;; *************** function ___ftadd *****************
  6630 ;; Defined at:
  6631 ;;		line 86 in file "/opt/microchip/xc8/v1.33/sources/common/ftadd.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  f1              3   53[BANK0 ] float 
  6634 ;;  f2              3   56[BANK0 ] float 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  exp1            1   65[BANK0 ] unsigned char 
  6637 ;;  exp2            1   64[BANK0 ] unsigned char 
  6638 ;;  sign            1   63[BANK0 ] unsigned char 
  6639 ;; Return value:  Size  Location     Type
  6640 ;;                  3   53[BANK0 ] float 
  6641 ;; Registers used:
  6642 ;;		wreg, status,2, status,0, pclath, cstack
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6648 ;;      Params:         0       6       0       0       0
  6649 ;;      Locals:         0       3       0       0       0
  6650 ;;      Temps:          0       4       0       0       0
  6651 ;;      Totals:         0      13       0       0       0
  6652 ;;Total ram usage:       13 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:    1
  6655 ;; This function calls:
  6656 ;;		___ftpack
  6657 ;; This function is called by:
  6658 ;;		_main
  6659 ;;		_sprintf
  6660 ;;		___ftsub
  6661 ;; This function uses a non-reentrant model
  6662 ;;
  6663                           
  6664                           
  6665                           ;psect for function ___ftadd
  6666  15C5                     ___ftadd:	
  6667                           
  6668                           ;incstack = 0
  6669                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6670  15C5  1283               	bcf	3,5	;RP0=0, select bank0
  6671  15C6  1303               	bcf	3,6	;RP1=0, select bank0
  6672  15C7  0855               	movf	___ftadd@f1,w
  6673  15C8  00DB               	movwf	??___ftadd
  6674  15C9  0856               	movf	___ftadd@f1+1,w
  6675  15CA  00DC               	movwf	??___ftadd+1
  6676  15CB  0857               	movf	___ftadd@f1+2,w
  6677  15CC  00DD               	movwf	??___ftadd+2
  6678  15CD  1003               	clrc
  6679  15CE  0D5C               	rlf	??___ftadd+1,w
  6680  15CF  0D5D               	rlf	??___ftadd+2,w
  6681  15D0  00DE               	movwf	??___ftadd+3
  6682  15D1  085E               	movf	??___ftadd+3,w
  6683  15D2  00E1               	movwf	___ftadd@exp1
  6684  15D3  0858               	movf	___ftadd@f2,w
  6685  15D4  00DB               	movwf	??___ftadd
  6686  15D5  0859               	movf	___ftadd@f2+1,w
  6687  15D6  00DC               	movwf	??___ftadd+1
  6688  15D7  085A               	movf	___ftadd@f2+2,w
  6689  15D8  00DD               	movwf	??___ftadd+2
  6690  15D9  1003               	clrc
  6691  15DA  0D5C               	rlf	??___ftadd+1,w
  6692  15DB  0D5D               	rlf	??___ftadd+2,w
  6693  15DC  00DE               	movwf	??___ftadd+3
  6694  15DD  085E               	movf	??___ftadd+3,w
  6695  15DE  00E0               	movwf	___ftadd@exp2
  6696  15DF  0861               	movf	___ftadd@exp1,w
  6697  15E0  1903               	btfsc	3,2
  6698  15E1  2DEE               	goto	l2294
  6699  15E2  0860               	movf	___ftadd@exp2,w
  6700  15E3  0261               	subwf	___ftadd@exp1,w
  6701  15E4  1803               	skipnc
  6702  15E5  2DF5               	goto	l2298
  6703  15E6  0361               	decf	___ftadd@exp1,w
  6704  15E7  3AFF               	xorlw	255
  6705  15E8  0760               	addwf	___ftadd@exp2,w
  6706  15E9  00DB               	movwf	??___ftadd
  6707  15EA  3019               	movlw	25
  6708  15EB  025B               	subwf	??___ftadd,w
  6709  15EC  1C03               	skipc
  6710  15ED  2DF5               	goto	l2298
  6711  15EE                     l2294:	
  6712  15EE  0858               	movf	___ftadd@f2,w
  6713  15EF  00D5               	movwf	?___ftadd
  6714  15F0  0859               	movf	___ftadd@f2+1,w
  6715  15F1  00D6               	movwf	?___ftadd+1
  6716  15F2  085A               	movf	___ftadd@f2+2,w
  6717  15F3  00D7               	movwf	?___ftadd+2
  6718  15F4  0008               	return
  6719  15F5                     l2298:	
  6720  15F5  0860               	movf	___ftadd@exp2,w
  6721  15F6  1903               	btfsc	3,2
  6722  15F7  0008               	return
  6723  15F8  0861               	movf	___ftadd@exp1,w
  6724  15F9  0260               	subwf	___ftadd@exp2,w
  6725  15FA  1803               	skipnc
  6726  15FB  2E04               	goto	l2304
  6727  15FC  0360               	decf	___ftadd@exp2,w
  6728  15FD  3AFF               	xorlw	255
  6729  15FE  0761               	addwf	___ftadd@exp1,w
  6730  15FF  00DB               	movwf	??___ftadd
  6731  1600  3019               	movlw	25
  6732  1601  025B               	subwf	??___ftadd,w
  6733  1602  1803               	btfsc	3,0
  6734  1603  0008               	return
  6735  1604                     l2304:	
  6736  1604  3006               	movlw	6
  6737  1605  00DB               	movwf	??___ftadd
  6738  1606  085B               	movf	??___ftadd,w
  6739  1607  00DF               	movwf	___ftadd@sign
  6740  1608  1BD7               	btfsc	___ftadd@f1+2,7
  6741  1609  17DF               	bsf	___ftadd@sign,7
  6742  160A  1BDA               	btfsc	___ftadd@f2+2,7
  6743  160B  175F               	bsf	___ftadd@sign,6
  6744  160C  17D6               	bsf	___ftadd@f1+1,7
  6745  160D  30FF               	movlw	255
  6746  160E  05D5               	andwf	___ftadd@f1,f
  6747  160F  30FF               	movlw	255
  6748  1610  05D6               	andwf	___ftadd@f1+1,f
  6749  1611  3000               	movlw	0
  6750  1612  05D7               	andwf	___ftadd@f1+2,f
  6751  1613  17D9               	bsf	___ftadd@f2+1,7
  6752  1614  30FF               	movlw	255
  6753  1615  05D8               	andwf	___ftadd@f2,f
  6754  1616  30FF               	movlw	255
  6755  1617  05D9               	andwf	___ftadd@f2+1,f
  6756  1618  3000               	movlw	0
  6757  1619  05DA               	andwf	___ftadd@f2+2,f
  6758  161A  0860               	movf	___ftadd@exp2,w
  6759  161B  0261               	subwf	___ftadd@exp1,w
  6760  161C  1803               	skipnc
  6761  161D  2E44               	goto	l2326
  6762  161E                     l2316:	
  6763  161E  3001               	movlw	1
  6764  161F                     u2935:	
  6765  161F  1003               	clrc
  6766  1620  0DD8               	rlf	___ftadd@f2,f
  6767  1621  0DD9               	rlf	___ftadd@f2+1,f
  6768  1622  0DDA               	rlf	___ftadd@f2+2,f
  6769  1623  3EFF               	addlw	-1
  6770  1624  1D03               	skipz
  6771  1625  2E1F               	goto	u2935
  6772  1626  3001               	movlw	1
  6773  1627  02E0               	subwf	___ftadd@exp2,f
  6774  1628  0860               	movf	___ftadd@exp2,w
  6775  1629  0661               	xorwf	___ftadd@exp1,w
  6776  162A  1903               	skipnz
  6777  162B  2E3F               	goto	l2324
  6778  162C  3001               	movlw	1
  6779  162D  02DF               	subwf	___ftadd@sign,f
  6780  162E  085F               	movf	___ftadd@sign,w
  6781  162F  3907               	andlw	7
  6782  1630  1903               	btfsc	3,2
  6783  1631  2E3F               	goto	l2324
  6784  1632  2E1E               	goto	l2316
  6785  1633                     l2322:	
  6786  1633  3001               	movlw	1
  6787  1634                     u2965:	
  6788  1634  1003               	clrc
  6789  1635  0CD7               	rrf	___ftadd@f1+2,f
  6790  1636  0CD6               	rrf	___ftadd@f1+1,f
  6791  1637  0CD5               	rrf	___ftadd@f1,f
  6792  1638  3EFF               	addlw	-1
  6793  1639  1D03               	skipz
  6794  163A  2E34               	goto	u2965
  6795  163B  3001               	movlw	1
  6796  163C  00DB               	movwf	??___ftadd
  6797  163D  085B               	movf	??___ftadd,w
  6798  163E  07E1               	addwf	___ftadd@exp1,f
  6799  163F                     l2324:	
  6800  163F  0861               	movf	___ftadd@exp1,w
  6801  1640  0660               	xorwf	___ftadd@exp2,w
  6802  1641  1903               	btfsc	3,2
  6803  1642  2E6D               	goto	l745
  6804  1643  2E33               	goto	l2322
  6805  1644                     l2326:	
  6806  1644  0861               	movf	___ftadd@exp1,w
  6807  1645  0260               	subwf	___ftadd@exp2,w
  6808  1646  1803               	skipnc
  6809  1647  2E6D               	goto	l745
  6810  1648                     l2328:	
  6811  1648  3001               	movlw	1
  6812  1649                     u2995:	
  6813  1649  1003               	clrc
  6814  164A  0DD5               	rlf	___ftadd@f1,f
  6815  164B  0DD6               	rlf	___ftadd@f1+1,f
  6816  164C  0DD7               	rlf	___ftadd@f1+2,f
  6817  164D  3EFF               	addlw	-1
  6818  164E  1D03               	skipz
  6819  164F  2E49               	goto	u2995
  6820  1650  3001               	movlw	1
  6821  1651  02E1               	subwf	___ftadd@exp1,f
  6822  1652  0860               	movf	___ftadd@exp2,w
  6823  1653  0661               	xorwf	___ftadd@exp1,w
  6824  1654  1903               	skipnz
  6825  1655  2E69               	goto	l2336
  6826  1656  3001               	movlw	1
  6827  1657  02DF               	subwf	___ftadd@sign,f
  6828  1658  085F               	movf	___ftadd@sign,w
  6829  1659  3907               	andlw	7
  6830  165A  1903               	btfsc	3,2
  6831  165B  2E69               	goto	l2336
  6832  165C  2E48               	goto	l2328
  6833  165D                     l2334:	
  6834  165D  3001               	movlw	1
  6835  165E                     u3025:	
  6836  165E  1003               	clrc
  6837  165F  0CDA               	rrf	___ftadd@f2+2,f
  6838  1660  0CD9               	rrf	___ftadd@f2+1,f
  6839  1661  0CD8               	rrf	___ftadd@f2,f
  6840  1662  3EFF               	addlw	-1
  6841  1663  1D03               	skipz
  6842  1664  2E5E               	goto	u3025
  6843  1665  3001               	movlw	1
  6844  1666  00DB               	movwf	??___ftadd
  6845  1667  085B               	movf	??___ftadd,w
  6846  1668  07E0               	addwf	___ftadd@exp2,f
  6847  1669                     l2336:	
  6848  1669  0861               	movf	___ftadd@exp1,w
  6849  166A  0660               	xorwf	___ftadd@exp2,w
  6850  166B  1D03               	skipz
  6851  166C  2E5D               	goto	l2334
  6852  166D                     l745:	
  6853  166D  1FDF               	btfss	___ftadd@sign,7
  6854  166E  2E7F               	goto	l2340
  6855  166F  30FF               	movlw	255
  6856  1670  06D5               	xorwf	___ftadd@f1,f
  6857  1671  30FF               	movlw	255
  6858  1672  06D6               	xorwf	___ftadd@f1+1,f
  6859  1673  30FF               	movlw	255
  6860  1674  06D7               	xorwf	___ftadd@f1+2,f
  6861  1675  3001               	movlw	1
  6862  1676  07D5               	addwf	___ftadd@f1,f
  6863  1677  3000               	movlw	0
  6864  1678  1803               	skipnc
  6865  1679  3001               	movlw	1
  6866  167A  07D6               	addwf	___ftadd@f1+1,f
  6867  167B  3000               	movlw	0
  6868  167C  1803               	skipnc
  6869  167D  3001               	movlw	1
  6870  167E  07D7               	addwf	___ftadd@f1+2,f
  6871  167F                     l2340:	
  6872  167F  1F5F               	btfss	___ftadd@sign,6
  6873  1680  2E91               	goto	l2344
  6874  1681  30FF               	movlw	255
  6875  1682  06D8               	xorwf	___ftadd@f2,f
  6876  1683  30FF               	movlw	255
  6877  1684  06D9               	xorwf	___ftadd@f2+1,f
  6878  1685  30FF               	movlw	255
  6879  1686  06DA               	xorwf	___ftadd@f2+2,f
  6880  1687  3001               	movlw	1
  6881  1688  07D8               	addwf	___ftadd@f2,f
  6882  1689  3000               	movlw	0
  6883  168A  1803               	skipnc
  6884  168B  3001               	movlw	1
  6885  168C  07D9               	addwf	___ftadd@f2+1,f
  6886  168D  3000               	movlw	0
  6887  168E  1803               	skipnc
  6888  168F  3001               	movlw	1
  6889  1690  07DA               	addwf	___ftadd@f2+2,f
  6890  1691                     l2344:	
  6891  1691  01DF               	clrf	___ftadd@sign
  6892  1692  0855               	movf	___ftadd@f1,w
  6893  1693  07D8               	addwf	___ftadd@f2,f
  6894  1694  0856               	movf	___ftadd@f1+1,w
  6895  1695  1103               	clrz
  6896  1696  1803               	skipnc
  6897  1697  0A56               	incf	___ftadd@f1+1,w
  6898  1698  1D03               	btfss	3,2
  6899  1699  07D9               	addwf	___ftadd@f2+1,f
  6900  169A  0857               	movf	___ftadd@f1+2,w
  6901  169B  1103               	clrz
  6902  169C  1803               	skipnc
  6903  169D  0A57               	incf	___ftadd@f1+2,w
  6904  169E  1D03               	btfss	3,2
  6905  169F  07DA               	addwf	___ftadd@f2+2,f
  6906  16A0  1FDA               	btfss	___ftadd@f2+2,7
  6907  16A1  2EB4               	goto	l2354
  6908  16A2  30FF               	movlw	255
  6909  16A3  06D8               	xorwf	___ftadd@f2,f
  6910  16A4  30FF               	movlw	255
  6911  16A5  06D9               	xorwf	___ftadd@f2+1,f
  6912  16A6  30FF               	movlw	255
  6913  16A7  06DA               	xorwf	___ftadd@f2+2,f
  6914  16A8  3001               	movlw	1
  6915  16A9  07D8               	addwf	___ftadd@f2,f
  6916  16AA  3000               	movlw	0
  6917  16AB  1803               	skipnc
  6918  16AC  3001               	movlw	1
  6919  16AD  07D9               	addwf	___ftadd@f2+1,f
  6920  16AE  3000               	movlw	0
  6921  16AF  1803               	skipnc
  6922  16B0  3001               	movlw	1
  6923  16B1  07DA               	addwf	___ftadd@f2+2,f
  6924  16B2  01DF               	clrf	___ftadd@sign
  6925  16B3  0ADF               	incf	___ftadd@sign,f
  6926  16B4                     l2354:	
  6927  16B4  0858               	movf	___ftadd@f2,w
  6928  16B5  00F0               	movwf	___ftpack@arg
  6929  16B6  0859               	movf	___ftadd@f2+1,w
  6930  16B7  00F1               	movwf	___ftpack@arg+1
  6931  16B8  085A               	movf	___ftadd@f2+2,w
  6932  16B9  00F2               	movwf	___ftpack@arg+2
  6933  16BA  0861               	movf	___ftadd@exp1,w
  6934  16BB  00DB               	movwf	??___ftadd
  6935  16BC  085B               	movf	??___ftadd,w
  6936  16BD  00F3               	movwf	___ftpack@exp
  6937  16BE  085F               	movf	___ftadd@sign,w
  6938  16BF  00DC               	movwf	??___ftadd+1
  6939  16C0  085C               	movf	??___ftadd+1,w
  6940  16C1  00F4               	movwf	___ftpack@sign
  6941  16C2  160A  118A  2233   	fcall	___ftpack
  6942  16C5  0870               	movf	?___ftpack,w
  6943  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  6944  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  6945  16C8  00D5               	movwf	?___ftadd
  6946  16C9  0871               	movf	?___ftpack+1,w
  6947  16CA  00D6               	movwf	?___ftadd+1
  6948  16CB  0872               	movf	?___ftpack+2,w
  6949  16CC  00D7               	movwf	?___ftadd+2
  6950  16CD  0008               	return
  6951  16CE                     __end_of___ftadd:	
  6952                           
  6953                           	psect	text17
  6954  1233                     __ptext17:	
  6955 ;; *************** function ___ftpack *****************
  6956 ;; Defined at:
  6957 ;;		line 62 in file "/opt/microchip/xc8/v1.33/sources/common/float.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;  arg             3    0[COMMON] unsigned um
  6960 ;;  exp             1    3[COMMON] unsigned char 
  6961 ;;  sign            1    4[COMMON] unsigned char 
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;		None
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  3    0[COMMON] float 
  6966 ;; Registers used:
  6967 ;;		wreg, status,2, status,0
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6973 ;;      Params:         5       0       0       0       0
  6974 ;;      Locals:         0       0       0       0       0
  6975 ;;      Temps:          3       0       0       0       0
  6976 ;;      Totals:         8       0       0       0       0
  6977 ;;Total ram usage:        8 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; This function calls:
  6980 ;;		Nothing
  6981 ;; This function is called by:
  6982 ;;		___ftadd
  6983 ;;		___ftmul
  6984 ;;		___lltoft
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           
  6989                           ;psect for function ___ftpack
  6990  1233                     ___ftpack:	
  6991                           
  6992                           ;incstack = 0
  6993                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6994  1233  0873               	movf	___ftpack@exp,w
  6995  1234  1903               	btfsc	3,2
  6996  1235  2A3B               	goto	l2138
  6997  1236  0872               	movf	___ftpack@arg+2,w
  6998  1237  0471               	iorwf	___ftpack@arg+1,w
  6999  1238  0470               	iorwf	___ftpack@arg,w
  7000  1239  1D03               	skipz
  7001  123A  2A4E               	goto	l2144
  7002  123B                     l2138:	
  7003  123B  3000               	movlw	0
  7004  123C  00F0               	movwf	?___ftpack
  7005  123D  3000               	movlw	0
  7006  123E  00F1               	movwf	?___ftpack+1
  7007  123F  3000               	movlw	0
  7008  1240  00F2               	movwf	?___ftpack+2
  7009  1241  0008               	return
  7010  1242                     l2142:	
  7011  1242  3001               	movlw	1
  7012  1243  00F5               	movwf	??___ftpack
  7013  1244  0875               	movf	??___ftpack,w
  7014  1245  07F3               	addwf	___ftpack@exp,f
  7015  1246  3001               	movlw	1
  7016  1247                     u2425:	
  7017  1247  1003               	clrc
  7018  1248  0CF2               	rrf	___ftpack@arg+2,f
  7019  1249  0CF1               	rrf	___ftpack@arg+1,f
  7020  124A  0CF0               	rrf	___ftpack@arg,f
  7021  124B  3EFF               	addlw	-1
  7022  124C  1D03               	skipz
  7023  124D  2A47               	goto	u2425
  7024  124E                     l2144:	
  7025  124E  30FE               	movlw	254
  7026  124F  0572               	andwf	___ftpack@arg+2,w
  7027  1250  1903               	btfsc	3,2
  7028  1251  2A69               	goto	l716
  7029  1252  2A42               	goto	l2142
  7030  1253                     l2146:	
  7031  1253  3001               	movlw	1
  7032  1254  00F5               	movwf	??___ftpack
  7033  1255  0875               	movf	??___ftpack,w
  7034  1256  07F3               	addwf	___ftpack@exp,f
  7035  1257  3001               	movlw	1
  7036  1258  07F0               	addwf	___ftpack@arg,f
  7037  1259  3000               	movlw	0
  7038  125A  1803               	skipnc
  7039  125B  3001               	movlw	1
  7040  125C  07F1               	addwf	___ftpack@arg+1,f
  7041  125D  3000               	movlw	0
  7042  125E  1803               	skipnc
  7043  125F  3001               	movlw	1
  7044  1260  07F2               	addwf	___ftpack@arg+2,f
  7045  1261  3001               	movlw	1
  7046  1262                     u2445:	
  7047  1262  1003               	clrc
  7048  1263  0CF2               	rrf	___ftpack@arg+2,f
  7049  1264  0CF1               	rrf	___ftpack@arg+1,f
  7050  1265  0CF0               	rrf	___ftpack@arg,f
  7051  1266  3EFF               	addlw	-1
  7052  1267  1D03               	skipz
  7053  1268  2A62               	goto	u2445
  7054  1269                     l716:	
  7055  1269  30FF               	movlw	255
  7056  126A  0572               	andwf	___ftpack@arg+2,w
  7057  126B  1903               	btfsc	3,2
  7058  126C  2A78               	goto	l2154
  7059  126D  2A53               	goto	l2146
  7060  126E                     l2152:	
  7061  126E  3001               	movlw	1
  7062  126F  02F3               	subwf	___ftpack@exp,f
  7063  1270  3001               	movlw	1
  7064  1271                     u2465:	
  7065  1271  1003               	clrc
  7066  1272  0DF0               	rlf	___ftpack@arg,f
  7067  1273  0DF1               	rlf	___ftpack@arg+1,f
  7068  1274  0DF2               	rlf	___ftpack@arg+2,f
  7069  1275  3EFF               	addlw	-1
  7070  1276  1D03               	skipz
  7071  1277  2A71               	goto	u2465
  7072  1278                     l2154:	
  7073  1278  1FF1               	btfss	___ftpack@arg+1,7
  7074  1279  2A6E               	goto	l2152
  7075  127A  1873               	btfsc	___ftpack@exp,0
  7076  127B  2A82               	goto	l722
  7077  127C  30FF               	movlw	255
  7078  127D  05F0               	andwf	___ftpack@arg,f
  7079  127E  307F               	movlw	127
  7080  127F  05F1               	andwf	___ftpack@arg+1,f
  7081  1280  30FF               	movlw	255
  7082  1281  05F2               	andwf	___ftpack@arg+2,f
  7083  1282                     l722:	
  7084  1282  1003               	clrc
  7085  1283  0CF3               	rrf	___ftpack@exp,f
  7086  1284  0873               	movf	___ftpack@exp,w
  7087  1285  00F5               	movwf	??___ftpack
  7088  1286  01F6               	clrf	??___ftpack+1
  7089  1287  01F7               	clrf	??___ftpack+2
  7090  1288  3010               	movlw	16
  7091  1289                     u2495:	
  7092  1289  1003               	clrc
  7093  128A  0DF5               	rlf	??___ftpack,f
  7094  128B  0DF6               	rlf	??___ftpack+1,f
  7095  128C  0DF7               	rlf	??___ftpack+2,f
  7096  128D  3EFF               	addlw	-1
  7097  128E  1D03               	skipz
  7098  128F  2A89               	goto	u2495
  7099  1290  0875               	movf	??___ftpack,w
  7100  1291  04F0               	iorwf	___ftpack@arg,f
  7101  1292  0876               	movf	??___ftpack+1,w
  7102  1293  04F1               	iorwf	___ftpack@arg+1,f
  7103  1294  0877               	movf	??___ftpack+2,w
  7104  1295  04F2               	iorwf	___ftpack@arg+2,f
  7105  1296  0874               	movf	___ftpack@sign,w
  7106  1297  1903               	btfsc	3,2
  7107  1298  0008               	return
  7108  1299  17F2               	bsf	___ftpack@arg+2,7
  7109  129A  0008               	return
  7110  129B                     __end_of___ftpack:	
  7111                           
  7112                           	psect	text18
  7113  1E3D                     __ptext18:	
  7114 ;; *************** function ___ftneg *****************
  7115 ;; Defined at:
  7116 ;;		line 15 in file "/opt/microchip/xc8/v1.33/sources/common/ftneg.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;  f1              3    0[COMMON] float 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;		None
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  3    0[COMMON] float 
  7123 ;; Registers used:
  7124 ;;		wreg
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7130 ;;      Params:         3       0       0       0       0
  7131 ;;      Locals:         0       0       0       0       0
  7132 ;;      Temps:          0       0       0       0       0
  7133 ;;      Totals:         3       0       0       0       0
  7134 ;;Total ram usage:        3 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_sprintf
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           
  7144                           ;psect for function ___ftneg
  7145  1E3D                     ___ftneg:	
  7146                           
  7147                           ;incstack = 0
  7148                           ; Regs used in ___ftneg: [wreg]
  7149  1E3D  0872               	movf	___ftneg@f1+2,w
  7150  1E3E  0471               	iorwf	___ftneg@f1+1,w
  7151  1E3F  0470               	iorwf	___ftneg@f1,w
  7152  1E40  1903               	skipnz
  7153  1E41  0008               	return
  7154  1E42  3080               	movlw	128
  7155  1E43  06F2               	xorwf	___ftneg@f1+2,f
  7156  1E44  0008               	return
  7157  1E45                     __end_of___ftneg:	
  7158                           
  7159                           	psect	text19
  7160  11D4                     __ptext19:	
  7161 ;; *************** function ___ftge *****************
  7162 ;; Defined at:
  7163 ;;		line 4 in file "/opt/microchip/xc8/v1.33/sources/common/ftge.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  ff1             3    7[BANK0 ] float 
  7166 ;;  ff2             3   10[BANK0 ] float 
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;		None
  7169 ;; Return value:  Size  Location     Type
  7170 ;;		None               void
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7178 ;;      Params:         0       6       0       0       0
  7179 ;;      Locals:         0       0       0       0       0
  7180 ;;      Temps:          0       6       0       0       0
  7181 ;;      Totals:         0      12       0       0       0
  7182 ;;Total ram usage:       12 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; This function calls:
  7185 ;;		Nothing
  7186 ;; This function is called by:
  7187 ;;		_main
  7188 ;;		_sprintf
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           
  7193                           ;psect for function ___ftge
  7194  11D4                     ___ftge:	
  7195                           
  7196                           ;incstack = 0
  7197                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7198  11D4  1283               	bcf	3,5	;RP0=0, select bank0
  7199  11D5  1303               	bcf	3,6	;RP1=0, select bank0
  7200  11D6  1FA9               	btfss	___ftge@ff1+2,7
  7201  11D7  29FD               	goto	l2632
  7202  11D8  3000               	movlw	0
  7203  11D9  00AD               	movwf	??___ftge
  7204  11DA  3000               	movlw	0
  7205  11DB  00AE               	movwf	??___ftge+1
  7206  11DC  3080               	movlw	128
  7207  11DD  00AF               	movwf	??___ftge+2
  7208  11DE  0927               	comf	___ftge@ff1,w
  7209  11DF  00B0               	movwf	??___ftge+3
  7210  11E0  0928               	comf	___ftge@ff1+1,w
  7211  11E1  00B1               	movwf	??___ftge+4
  7212  11E2  0929               	comf	___ftge@ff1+2,w
  7213  11E3  00B2               	movwf	??___ftge+5
  7214  11E4  0AB0               	incf	??___ftge+3,f
  7215  11E5  1903               	skipnz
  7216  11E6  0AB1               	incf	??___ftge+4,f
  7217  11E7  1903               	skipnz
  7218  11E8  0AB2               	incf	??___ftge+5,f
  7219  11E9  0830               	movf	??___ftge+3,w
  7220  11EA  07AD               	addwf	??___ftge,f
  7221  11EB  0831               	movf	??___ftge+4,w
  7222  11EC  1803               	skipnc
  7223  11ED  0F31               	incfsz	??___ftge+4,w
  7224  11EE  29F0               	goto	u3701
  7225  11EF  29F1               	goto	u3702
  7226  11F0                     u3701:	
  7227  11F0  07AE               	addwf	??___ftge+1,f
  7228  11F1                     u3702:	
  7229  11F1  0832               	movf	??___ftge+5,w
  7230  11F2  1803               	skipnc
  7231  11F3  0F32               	incfsz	??___ftge+5,w
  7232  11F4  29F6               	goto	u3703
  7233  11F5  29F7               	goto	u3704
  7234  11F6                     u3703:	
  7235  11F6  07AF               	addwf	??___ftge+2,f
  7236  11F7                     u3704:	
  7237  11F7  082D               	movf	??___ftge,w
  7238  11F8  00A7               	movwf	___ftge@ff1
  7239  11F9  082E               	movf	??___ftge+1,w
  7240  11FA  00A8               	movwf	___ftge@ff1+1
  7241  11FB  082F               	movf	??___ftge+2,w
  7242  11FC  00A9               	movwf	___ftge@ff1+2
  7243  11FD                     l2632:	
  7244  11FD  1FAC               	btfss	___ftge@ff2+2,7
  7245  11FE  2A24               	goto	l2636
  7246  11FF  3000               	movlw	0
  7247  1200  00AD               	movwf	??___ftge
  7248  1201  3000               	movlw	0
  7249  1202  00AE               	movwf	??___ftge+1
  7250  1203  3080               	movlw	128
  7251  1204  00AF               	movwf	??___ftge+2
  7252  1205  092A               	comf	___ftge@ff2,w
  7253  1206  00B0               	movwf	??___ftge+3
  7254  1207  092B               	comf	___ftge@ff2+1,w
  7255  1208  00B1               	movwf	??___ftge+4
  7256  1209  092C               	comf	___ftge@ff2+2,w
  7257  120A  00B2               	movwf	??___ftge+5
  7258  120B  0AB0               	incf	??___ftge+3,f
  7259  120C  1903               	skipnz
  7260  120D  0AB1               	incf	??___ftge+4,f
  7261  120E  1903               	skipnz
  7262  120F  0AB2               	incf	??___ftge+5,f
  7263  1210  0830               	movf	??___ftge+3,w
  7264  1211  07AD               	addwf	??___ftge,f
  7265  1212  0831               	movf	??___ftge+4,w
  7266  1213  1803               	skipnc
  7267  1214  0F31               	incfsz	??___ftge+4,w
  7268  1215  2A17               	goto	u3721
  7269  1216  2A18               	goto	u3722
  7270  1217                     u3721:	
  7271  1217  07AE               	addwf	??___ftge+1,f
  7272  1218                     u3722:	
  7273  1218  0832               	movf	??___ftge+5,w
  7274  1219  1803               	skipnc
  7275  121A  0F32               	incfsz	??___ftge+5,w
  7276  121B  2A1D               	goto	u3723
  7277  121C  2A1E               	goto	u3724
  7278  121D                     u3723:	
  7279  121D  07AF               	addwf	??___ftge+2,f
  7280  121E                     u3724:	
  7281  121E  082D               	movf	??___ftge,w
  7282  121F  00AA               	movwf	___ftge@ff2
  7283  1220  082E               	movf	??___ftge+1,w
  7284  1221  00AB               	movwf	___ftge@ff2+1
  7285  1222  082F               	movf	??___ftge+2,w
  7286  1223  00AC               	movwf	___ftge@ff2+2
  7287  1224                     l2636:	
  7288  1224  3080               	movlw	128
  7289  1225  06A9               	xorwf	___ftge@ff1+2,f
  7290  1226  3080               	movlw	128
  7291  1227  06AC               	xorwf	___ftge@ff2+2,f
  7292  1228  082C               	movf	___ftge@ff2+2,w
  7293  1229  0229               	subwf	___ftge@ff1+2,w
  7294  122A  1D03               	skipz
  7295  122B  0008               	return
  7296  122C  082B               	movf	___ftge@ff2+1,w
  7297  122D  0228               	subwf	___ftge@ff1+1,w
  7298  122E  1D03               	skipz
  7299  122F  0008               	return
  7300  1230  082A               	movf	___ftge@ff2,w
  7301  1231  0227               	subwf	___ftge@ff1,w
  7302  1232  0008               	return
  7303  1233                     __end_of___ftge:	
  7304                           
  7305                           	psect	text20
  7306  1E9C                     __ptext20:	
  7307 ;; *************** function _LCD_puts *****************
  7308 ;; Defined at:
  7309 ;;		line 133 in file "lcd.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  a               1    wreg     PTR unsigned char 
  7312 ;;		 -> main@current_str(45), 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  a               1   11[COMMON] PTR unsigned char 
  7315 ;;		 -> main@current_str(45), 
  7316 ;;  i               2    9[COMMON] int 
  7317 ;; Return value:  Size  Location     Type
  7318 ;;		None               void
  7319 ;; Registers used:
  7320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7326 ;;      Params:         0       0       0       0       0
  7327 ;;      Locals:         3       0       0       0       0
  7328 ;;      Temps:          1       0       0       0       0
  7329 ;;      Totals:         4       0       0       0       0
  7330 ;;Total ram usage:        4 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    2
  7333 ;; This function calls:
  7334 ;;		_LCD_putc
  7335 ;; This function is called by:
  7336 ;;		_main
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           
  7341                           ;psect for function _LCD_puts
  7342  1E9C                     _LCD_puts:	
  7343                           
  7344                           ;incstack = 0
  7345                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7346                           ;LCD_puts@a stored from wreg
  7347  1E9C  00FB               	movwf	LCD_puts@a
  7348                           
  7349                           ;lcd.c: 135: for ( int i = 0; a[i] != '\0'; ++i ) {
  7350  1E9D  01F9               	clrf	LCD_puts@i
  7351  1E9E  01FA               	clrf	LCD_puts@i+1
  7352  1E9F                     l3112:	
  7353  1E9F  0879               	movf	LCD_puts@i,w
  7354  1EA0  077B               	addwf	LCD_puts@a,w
  7355  1EA1  00F8               	movwf	??_LCD_puts
  7356  1EA2  0878               	movf	??_LCD_puts,w
  7357  1EA3  0084               	movwf	4
  7358  1EA4  1783               	bsf	3,7	;select IRP bank2
  7359  1EA5  0880               	movf	0,f
  7360  1EA6  1903               	btfsc	3,2
  7361  1EA7  0008               	return
  7362                           
  7363                           ;lcd.c: 136: LCD_putc(a[i]);
  7364  1EA8  0879               	movf	LCD_puts@i,w
  7365  1EA9  077B               	addwf	LCD_puts@a,w
  7366  1EAA  00F8               	movwf	??_LCD_puts
  7367  1EAB  0878               	movf	??_LCD_puts,w
  7368  1EAC  0084               	movwf	4
  7369  1EAD  1783               	bsf	3,7	;select IRP bank2
  7370  1EAE  0800               	movf	0,w
  7371  1EAF  160A  118A  23A2  160A  158A  	fcall	_LCD_putc
  7372  1EB4  3001               	movlw	1
  7373  1EB5  07F9               	addwf	LCD_puts@i,f
  7374  1EB6  1803               	skipnc
  7375  1EB7  0AFA               	incf	LCD_puts@i+1,f
  7376  1EB8  3000               	movlw	0
  7377  1EB9  07FA               	addwf	LCD_puts@i+1,f
  7378  1EBA  2E9F               	goto	l3112
  7379  1EBB                     __end_of_LCD_puts:	
  7380                           
  7381                           	psect	text21
  7382  1EBB                     __ptext21:	
  7383 ;; *************** function _LCD_putrs *****************
  7384 ;; Defined at:
  7385 ;;		line 141 in file "lcd.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  a               1    wreg     PTR const unsigned char 
  7388 ;;		 -> STR_7(21), STR_6(21), STR_5(21), STR_2(21), 
  7389 ;;		 -> STR_1(21), 
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;  a               1   10[COMMON] PTR const unsigned char 
  7392 ;;		 -> STR_7(21), STR_6(21), STR_5(21), STR_2(21), 
  7393 ;;		 -> STR_1(21), 
  7394 ;;  i               2    8[COMMON] int 
  7395 ;; Return value:  Size  Location     Type
  7396 ;;		None               void
  7397 ;; Registers used:
  7398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7404 ;;      Params:         0       0       0       0       0
  7405 ;;      Locals:         3       0       0       0       0
  7406 ;;      Temps:          0       0       0       0       0
  7407 ;;      Totals:         3       0       0       0       0
  7408 ;;Total ram usage:        3 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    2
  7411 ;; This function calls:
  7412 ;;		_LCD_putc
  7413 ;; This function is called by:
  7414 ;;		_main
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _LCD_putrs
  7420  1EBB                     _LCD_putrs:	
  7421                           
  7422                           ;incstack = 0
  7423                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7424                           ;LCD_putrs@a stored from wreg
  7425  1EBB  00FA               	movwf	LCD_putrs@a
  7426                           
  7427                           ;lcd.c: 143: for ( int i = 0; a[i] != '\0'; ++i ) {
  7428  1EBC  01F8               	clrf	LCD_putrs@i
  7429  1EBD  01F9               	clrf	LCD_putrs@i+1
  7430  1EBE                     l2830:	
  7431  1EBE  0878               	movf	LCD_putrs@i,w
  7432  1EBF  077A               	addwf	LCD_putrs@a,w
  7433  1EC0  0084               	movwf	4
  7434  1EC1  160A  118A  2000  160A  158A  	fcall	stringdir
  7435  1EC6  3800               	iorlw	0
  7436  1EC7  1903               	btfsc	3,2
  7437  1EC8  0008               	return
  7438                           
  7439                           ;lcd.c: 144: LCD_putc(a[i]);
  7440  1EC9  0878               	movf	LCD_putrs@i,w
  7441  1ECA  077A               	addwf	LCD_putrs@a,w
  7442  1ECB  0084               	movwf	4
  7443  1ECC  160A  118A  2000  160A  158A  	fcall	stringdir
  7444  1ED1  160A  118A  23A2  160A  158A  	fcall	_LCD_putc
  7445  1ED6  3001               	movlw	1
  7446  1ED7  07F8               	addwf	LCD_putrs@i,f
  7447  1ED8  1803               	skipnc
  7448  1ED9  0AF9               	incf	LCD_putrs@i+1,f
  7449  1EDA  3000               	movlw	0
  7450  1EDB  07F9               	addwf	LCD_putrs@i+1,f
  7451  1EDC  2EBE               	goto	l2830
  7452  1EDD                     __end_of_LCD_putrs:	
  7453                           
  7454                           	psect	text22
  7455  13A2                     __ptext22:	
  7456 ;; *************** function _LCD_putc *****************
  7457 ;; Defined at:
  7458 ;;		line 116 in file "lcd.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  c               1    wreg     unsigned char 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  c               1    7[COMMON] unsigned char 
  7463 ;; Return value:  Size  Location     Type
  7464 ;;		None               void
  7465 ;; Registers used:
  7466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7472 ;;      Params:         0       0       0       0       0
  7473 ;;      Locals:         1       0       0       0       0
  7474 ;;      Temps:          3       0       0       0       0
  7475 ;;      Totals:         4       0       0       0       0
  7476 ;;Total ram usage:        4 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    1
  7479 ;; This function calls:
  7480 ;;		_LCD_Out
  7481 ;; This function is called by:
  7482 ;;		_LCD_puts
  7483 ;;		_LCD_putrs
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           
  7488                           ;psect for function _LCD_putc
  7489  13A2                     _LCD_putc:	
  7490                           
  7491                           ;incstack = 0
  7492                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7493                           ;LCD_putc@c stored from wreg
  7494  13A2  00F7               	movwf	LCD_putc@c
  7495                           
  7496                           ;lcd.c: 118: *(lcd.PORT) |= 1 << lcd.RS;
  7497  13A3  3001               	movlw	1
  7498  13A4  00F4               	movwf	??_LCD_putc
  7499  13A5  1683               	bsf	3,5	;RP0=1, select bank1
  7500  13A6  1303               	bcf	3,6	;RP1=0, select bank1
  7501  13A7  084C               	movf	(_lcd^(0+128)+2),w
  7502  13A8  3907               	andlw	7
  7503  13A9  3E01               	addlw	1
  7504  13AA  2BAD               	goto	u3254
  7505  13AB                     u3255:	
  7506  13AB  1003               	clrc
  7507  13AC  0DF4               	rlf	??_LCD_putc,f
  7508  13AD                     u3254:	
  7509  13AD  3EFF               	addlw	-1
  7510  13AE  1D03               	skipz
  7511  13AF  2BAB               	goto	u3255
  7512  13B0  0874               	movf	??_LCD_putc,w
  7513  13B1  00F5               	movwf	??_LCD_putc+1
  7514  13B2  084A               	movf	_lcd^(0+128),w
  7515  13B3  0084               	movwf	4
  7516  13B4  1783               	bsf	3,7
  7517  13B5  1C4B               	btfss	(_lcd+1)^(0+128),0
  7518  13B6  1383               	bcf	3,7
  7519  13B7  0875               	movf	??_LCD_putc+1,w
  7520  13B8  0480               	iorwf	0,f
  7521                           
  7522                           ;lcd.c: 119: LCD_Out((c & 0xF0) >> 4);
  7523  13B9  0877               	movf	LCD_putc@c,w
  7524  13BA  00F4               	movwf	??_LCD_putc
  7525  13BB  3004               	movlw	4
  7526  13BC                     u3265:	
  7527  13BC  1003               	clrc
  7528  13BD  0CF4               	rrf	??_LCD_putc,f
  7529  13BE  3EFF               	addlw	-1
  7530  13BF  1D03               	skipz
  7531  13C0  2BBC               	goto	u3265
  7532  13C1  0874               	movf	??_LCD_putc,w
  7533  13C2  390F               	andlw	15
  7534  13C3  160A  118A  2440  160A  118A  	fcall	_LCD_Out
  7535                           
  7536                           ;lcd.c: 121: *(lcd.PORT) |= 1 << lcd.EN;
  7537  13C8  3001               	movlw	1
  7538  13C9  00F4               	movwf	??_LCD_putc
  7539  13CA  1683               	bsf	3,5	;RP0=1, select bank1
  7540  13CB  1303               	bcf	3,6	;RP1=0, select bank1
  7541  13CC  0C4C               	rrf	(_lcd^(0+128)+2),w
  7542  13CD  00F5               	movwf	??_LCD_putc+1
  7543  13CE  0CF5               	rrf	??_LCD_putc+1,f
  7544  13CF  0C75               	rrf	??_LCD_putc+1,w
  7545  13D0  3907               	andlw	7
  7546  13D1  3E01               	addlw	1
  7547  13D2  2BD5               	goto	u3274
  7548  13D3                     u3275:	
  7549  13D3  1003               	clrc
  7550  13D4  0DF4               	rlf	??_LCD_putc,f
  7551  13D5                     u3274:	
  7552  13D5  3EFF               	addlw	-1
  7553  13D6  1D03               	skipz
  7554  13D7  2BD3               	goto	u3275
  7555  13D8  0874               	movf	??_LCD_putc,w
  7556  13D9  00F6               	movwf	??_LCD_putc+2
  7557  13DA  084A               	movf	_lcd^(0+128),w
  7558  13DB  0084               	movwf	4
  7559  13DC  1783               	bsf	3,7
  7560  13DD  1C4B               	btfss	(_lcd+1)^(0+128),0
  7561  13DE  1383               	bcf	3,7
  7562  13DF  0876               	movf	??_LCD_putc+2,w
  7563  13E0  0480               	iorwf	0,f
  7564                           
  7565                           ;lcd.c: 122: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7566  13E1  301A               	movlw	26
  7567  13E2  00F4               	movwf	??_LCD_putc
  7568  13E3                     u4837:	
  7569  13E3  0BF4               	decfsz	??_LCD_putc,f
  7570  13E4  2BE3               	goto	u4837
  7571  13E5  0000               	nop
  7572                           
  7573                           ;lcd.c: 123: *(lcd.PORT) &= ~(1 << lcd.EN);
  7574  13E6  3001               	movlw	1
  7575  13E7  00F4               	movwf	??_LCD_putc
  7576  13E8  1683               	bsf	3,5	;RP0=1, select bank1
  7577  13E9  1303               	bcf	3,6	;RP1=0, select bank1
  7578  13EA  0C4C               	rrf	(_lcd^(0+128)+2),w
  7579  13EB  00F5               	movwf	??_LCD_putc+1
  7580  13EC  0CF5               	rrf	??_LCD_putc+1,f
  7581  13ED  0C75               	rrf	??_LCD_putc+1,w
  7582  13EE  3907               	andlw	7
  7583  13EF  3E01               	addlw	1
  7584  13F0  2BF3               	goto	u3284
  7585  13F1                     u3285:	
  7586  13F1  1003               	clrc
  7587  13F2  0DF4               	rlf	??_LCD_putc,f
  7588  13F3                     u3284:	
  7589  13F3  3EFF               	addlw	-1
  7590  13F4  1D03               	skipz
  7591  13F5  2BF1               	goto	u3285
  7592  13F6  0874               	movf	??_LCD_putc,w
  7593  13F7  3AFF               	xorlw	255
  7594  13F8  00F6               	movwf	??_LCD_putc+2
  7595  13F9  084A               	movf	_lcd^(0+128),w
  7596  13FA  0084               	movwf	4
  7597  13FB  1783               	bsf	3,7
  7598  13FC  1C4B               	btfss	(_lcd+1)^(0+128),0
  7599  13FD  1383               	bcf	3,7
  7600  13FE  0876               	movf	??_LCD_putc+2,w
  7601  13FF  0580               	andwf	0,f
  7602                           
  7603                           ;lcd.c: 125: LCD_Out(c & 0x0F);
  7604  1400  0877               	movf	LCD_putc@c,w
  7605  1401  390F               	andlw	15
  7606  1402  160A  118A  2440  160A  118A  	fcall	_LCD_Out
  7607                           
  7608                           ;lcd.c: 127: *(lcd.PORT) |= 1 << lcd.EN;
  7609  1407  3001               	movlw	1
  7610  1408  00F4               	movwf	??_LCD_putc
  7611  1409  1683               	bsf	3,5	;RP0=1, select bank1
  7612  140A  1303               	bcf	3,6	;RP1=0, select bank1
  7613  140B  0C4C               	rrf	(_lcd^(0+128)+2),w
  7614  140C  00F5               	movwf	??_LCD_putc+1
  7615  140D  0CF5               	rrf	??_LCD_putc+1,f
  7616  140E  0C75               	rrf	??_LCD_putc+1,w
  7617  140F  3907               	andlw	7
  7618  1410  3E01               	addlw	1
  7619  1411  2C14               	goto	u3294
  7620  1412                     u3295:	
  7621  1412  1003               	clrc
  7622  1413  0DF4               	rlf	??_LCD_putc,f
  7623  1414                     u3294:	
  7624  1414  3EFF               	addlw	-1
  7625  1415  1D03               	skipz
  7626  1416  2C12               	goto	u3295
  7627  1417  0874               	movf	??_LCD_putc,w
  7628  1418  00F6               	movwf	??_LCD_putc+2
  7629  1419  084A               	movf	_lcd^(0+128),w
  7630  141A  0084               	movwf	4
  7631  141B  1783               	bsf	3,7
  7632  141C  1C4B               	btfss	(_lcd+1)^(0+128),0
  7633  141D  1383               	bcf	3,7
  7634  141E  0876               	movf	??_LCD_putc+2,w
  7635  141F  0480               	iorwf	0,f
  7636                           
  7637                           ;lcd.c: 128: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7638  1420  301A               	movlw	26
  7639  1421  00F4               	movwf	??_LCD_putc
  7640  1422                     u4847:	
  7641  1422  0BF4               	decfsz	??_LCD_putc,f
  7642  1423  2C22               	goto	u4847
  7643  1424  0000               	nop
  7644                           
  7645                           ;lcd.c: 129: *(lcd.PORT) &= ~(1 << lcd.EN);
  7646  1425  3001               	movlw	1
  7647  1426  00F4               	movwf	??_LCD_putc
  7648  1427  1683               	bsf	3,5	;RP0=1, select bank1
  7649  1428  1303               	bcf	3,6	;RP1=0, select bank1
  7650  1429  0C4C               	rrf	(_lcd^(0+128)+2),w
  7651  142A  00F5               	movwf	??_LCD_putc+1
  7652  142B  0CF5               	rrf	??_LCD_putc+1,f
  7653  142C  0C75               	rrf	??_LCD_putc+1,w
  7654  142D  3907               	andlw	7
  7655  142E  3E01               	addlw	1
  7656  142F  2C32               	goto	u3304
  7657  1430                     u3305:	
  7658  1430  1003               	clrc
  7659  1431  0DF4               	rlf	??_LCD_putc,f
  7660  1432                     u3304:	
  7661  1432  3EFF               	addlw	-1
  7662  1433  1D03               	skipz
  7663  1434  2C30               	goto	u3305
  7664  1435  0874               	movf	??_LCD_putc,w
  7665  1436  3AFF               	xorlw	255
  7666  1437  00F6               	movwf	??_LCD_putc+2
  7667  1438  084A               	movf	_lcd^(0+128),w
  7668  1439  0084               	movwf	4
  7669  143A  1783               	bsf	3,7
  7670  143B  1C4B               	btfss	(_lcd+1)^(0+128),0
  7671  143C  1383               	bcf	3,7
  7672  143D  0876               	movf	??_LCD_putc+2,w
  7673  143E  0580               	andwf	0,f
  7674  143F  0008               	return
  7675  1440                     __end_of_LCD_putc:	
  7676                           
  7677                           	psect	text23
  7678  0817                     __ptext23:	
  7679 ;; *************** function _LCD_Init *****************
  7680 ;; Defined at:
  7681 ;;		line 61 in file "lcd.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;  display         5    8[COMMON] struct .
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  cmd             1   13[COMMON] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      unsigned char 
  7688 ;; Registers used:
  7689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7695 ;;      Params:         5       0       0       0       0
  7696 ;;      Locals:         1       0       0       0       0
  7697 ;;      Temps:          0       2       0       0       0
  7698 ;;      Totals:         6       2       0       0       0
  7699 ;;Total ram usage:        8 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    2
  7702 ;; This function calls:
  7703 ;;		_LCD_Write
  7704 ;; This function is called by:
  7705 ;;		_main
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           
  7710                           ;psect for function _LCD_Init
  7711  0817                     _LCD_Init:	
  7712                           
  7713                           ;lcd.c: 63: lcd = display;
  7714                           
  7715                           ;incstack = 0
  7716                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7717  0817  30CA               	movlw	_lcd& (0+255)
  7718  0818  0084               	movwf	4
  7719  0819  0878               	movf	LCD_Init@display,w
  7720  081A  1383               	bcf	3,7	;select IRP bank1
  7721  081B  0080               	movwf	0
  7722  081C  0A84               	incf	4,f
  7723  081D  0879               	movf	LCD_Init@display+1,w
  7724  081E  0080               	movwf	0
  7725  081F  0A84               	incf	4,f
  7726  0820  087A               	movf	LCD_Init@display+2,w
  7727  0821  0080               	movwf	0
  7728  0822  0A84               	incf	4,f
  7729  0823  087B               	movf	LCD_Init@display+3,w
  7730  0824  0080               	movwf	0
  7731  0825  0A84               	incf	4,f
  7732  0826  087C               	movf	LCD_Init@display+4,w
  7733  0827  0080               	movwf	0
  7734                           
  7735                           ;lcd.c: 69: if ( lcd.PORT == &PORTA ) {
  7736  0828  3000               	movlw	0
  7737  0829  1683               	bsf	3,5	;RP0=1, select bank1
  7738  082A  1303               	bcf	3,6	;RP1=0, select bank1
  7739  082B  064B               	xorwf	(_lcd+1)^(0+128),w
  7740  082C  1D03               	skipz
  7741  082D  2830               	goto	u4005
  7742  082E  3005               	movlw	5
  7743  082F  064A               	xorwf	_lcd^(0+128),w
  7744  0830                     u4005:	
  7745  0830  1D03               	skipz
  7746  0831  2834               	goto	l2766
  7747                           
  7748                           ;lcd.c: 70: TRISA = 0x00;
  7749  0832  0185               	clrf	5	;volatile
  7750                           
  7751                           ;lcd.c: 71: }
  7752  0833  2847               	goto	l2774
  7753  0834                     l2766:	
  7754                           
  7755                           ;lcd.c: 72: else if ( lcd.PORT == &PORTB ) {
  7756  0834  3000               	movlw	0
  7757  0835  064B               	xorwf	(_lcd+1)^(0+128),w
  7758  0836  1D03               	skipz
  7759  0837  283A               	goto	u4015
  7760  0838  3006               	movlw	6
  7761  0839  064A               	xorwf	_lcd^(0+128),w
  7762  083A                     u4015:	
  7763  083A  1D03               	skipz
  7764  083B  283E               	goto	l2770
  7765                           
  7766                           ;lcd.c: 73: TRISB = 0x00;
  7767  083C  0186               	clrf	6	;volatile
  7768                           
  7769                           ;lcd.c: 74: }
  7770  083D  2847               	goto	l2774
  7771  083E                     l2770:	
  7772                           
  7773                           ;lcd.c: 75: else if ( lcd.PORT == &PORTC ) {
  7774  083E  3000               	movlw	0
  7775  083F  064B               	xorwf	(_lcd+1)^(0+128),w
  7776  0840  1D03               	skipz
  7777  0841  2844               	goto	u4025
  7778  0842  3007               	movlw	7
  7779  0843  064A               	xorwf	_lcd^(0+128),w
  7780  0844                     u4025:	
  7781  0844  1D03               	skipz
  7782  0845  0008               	return
  7783                           
  7784                           ;lcd.c: 76: TRISC = 0x00;
  7785  0846  0187               	clrf	7	;volatile
  7786  0847                     l2774:	
  7787                           ;lcd.c: 86: else {
  7788                           ;lcd.c: 87: return 0;
  7789                           ;	Return value of _LCD_Init is never used
  7790                           
  7791                           ;lcd.c: 77: }
  7792                           
  7793                           
  7794                           ;lcd.c: 88: }
  7795                           ;lcd.c: 91: _delay((unsigned long)((20)*(8000000/4000.0)));
  7796  0847  3034               	movlw	52
  7797  0848  1283               	bcf	3,5	;RP0=0, select bank0
  7798  0849  1303               	bcf	3,6	;RP1=0, select bank0
  7799  084A  00A1               	movwf	??_LCD_Init+1
  7800  084B  30F1               	movlw	241
  7801  084C  00A0               	movwf	??_LCD_Init
  7802  084D                     u4857:	
  7803  084D  0BA0               	decfsz	??_LCD_Init,f
  7804  084E  284D               	goto	u4857
  7805  084F  0BA1               	decfsz	??_LCD_Init+1,f
  7806  0850  284D               	goto	u4857
  7807  0851  2852               	nop2
  7808                           
  7809                           ;lcd.c: 94: LCD_Write(0x03);
  7810  0852  3003               	movlw	3
  7811  0853  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7812                           
  7813                           ;lcd.c: 95: _delay((unsigned long)((5)*(8000000/4000.0)));
  7814  0858  300D               	movlw	13
  7815  0859  1283               	bcf	3,5	;RP0=0, select bank0
  7816  085A  1303               	bcf	3,6	;RP1=0, select bank0
  7817  085B  00A1               	movwf	??_LCD_Init+1
  7818  085C  30FB               	movlw	251
  7819  085D  00A0               	movwf	??_LCD_Init
  7820  085E                     u4867:	
  7821  085E  0BA0               	decfsz	??_LCD_Init,f
  7822  085F  285E               	goto	u4867
  7823  0860  0BA1               	decfsz	??_LCD_Init+1,f
  7824  0861  285E               	goto	u4867
  7825  0862  2863               	nop2
  7826                           
  7827                           ;lcd.c: 96: LCD_Write(0x03);
  7828  0863  3003               	movlw	3
  7829  0864  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7830                           
  7831                           ;lcd.c: 97: _delay((unsigned long)((16)*(8000000/4000.0)));
  7832  0869  302A               	movlw	42
  7833  086A  1283               	bcf	3,5	;RP0=0, select bank0
  7834  086B  1303               	bcf	3,6	;RP1=0, select bank0
  7835  086C  00A1               	movwf	??_LCD_Init+1
  7836  086D  308D               	movlw	141
  7837  086E  00A0               	movwf	??_LCD_Init
  7838  086F                     u4877:	
  7839  086F  0BA0               	decfsz	??_LCD_Init,f
  7840  0870  286F               	goto	u4877
  7841  0871  0BA1               	decfsz	??_LCD_Init+1,f
  7842  0872  286F               	goto	u4877
  7843  0873  2874               	nop2
  7844                           
  7845                           ;lcd.c: 98: LCD_Write(0x03);
  7846  0874  3003               	movlw	3
  7847  0875  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7848                           
  7849                           ;lcd.c: 101: LCD_Write(0x02);
  7850  087A  3002               	movlw	2
  7851  087B  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7852                           
  7853                           ;lcd.c: 104: do { LCD_Write( (0x28 & 0xF0) >> 4 ); LCD_Write( 0x28 & 0x0F); } while ( 0 
      +                          );
  7854  0880  3002               	movlw	2
  7855  0881  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7856  0886  3008               	movlw	8
  7857  0887  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7858                           
  7859                           ;lcd.c: 107: do { LCD_Write( (0x06 & 0xF0) >> 4 ); LCD_Write( 0x06 & 0x0F); } while ( 0 
      +                          );
  7860  088C  3000               	movlw	0
  7861  088D  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7862  0892  3006               	movlw	6
  7863  0893  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7864                           
  7865                           ;lcd.c: 109: do { unsigned char cmd = 0x08; if ( 1 == 1 ) { cmd |= 1 << 2; } if ( 0 == 1
      +                           ) { cmd |= 1 << 1; } if ( 0 == 1 ) { cmd |= 1; } do { LCD_Write( (cmd & 0xF0) >> 4 ); L
      +                          CD_Write( cmd & 0x0F); } while ( 0 ); } while ( 0 );
  7866  0898  3008               	movlw	8
  7867  0899  1283               	bcf	3,5	;RP0=0, select bank0
  7868  089A  1303               	bcf	3,6	;RP1=0, select bank0
  7869  089B  00A0               	movwf	??_LCD_Init
  7870  089C  0820               	movf	??_LCD_Init,w
  7871  089D  00FD               	movwf	LCD_Init@cmd
  7872  089E  157D               	bsf	LCD_Init@cmd,2
  7873  089F  087D               	movf	LCD_Init@cmd,w
  7874  08A0  00A0               	movwf	??_LCD_Init
  7875  08A1  3004               	movlw	4
  7876  08A2                     u4035:	
  7877  08A2  1003               	clrc
  7878  08A3  0CA0               	rrf	??_LCD_Init,f
  7879  08A4  3EFF               	addlw	-1
  7880  08A5  1D03               	skipz
  7881  08A6  28A2               	goto	u4035
  7882  08A7  0820               	movf	??_LCD_Init,w
  7883  08A8  390F               	andlw	15
  7884  08A9  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7885  08AE  087D               	movf	LCD_Init@cmd,w
  7886  08AF  390F               	andlw	15
  7887  08B0  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7888                           
  7889                           ;lcd.c: 111: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0 
      +                          );
  7890  08B5  3000               	movlw	0
  7891  08B6  160A  158A  27A5  120A  158A  	fcall	_LCD_Write
  7892  08BB  3001               	movlw	1
  7893  08BC  160A  158A  27A5   	fcall	_LCD_Write
  7894  08BF  0008               	return
  7895  08C0                     __end_of_LCD_Init:	
  7896                           ;lcd.c: 113: return 1;
  7897                           ;	Return value of _LCD_Init is never used
  7898                           
  7899                           
  7900                           	psect	text24
  7901  1FA5                     __ptext24:	
  7902 ;; *************** function _LCD_Write *****************
  7903 ;; Defined at:
  7904 ;;		line 50 in file "lcd.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;  c               1    wreg     unsigned char 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  c               1    7[COMMON] unsigned char 
  7909 ;; Return value:  Size  Location     Type
  7910 ;;		None               void
  7911 ;; Registers used:
  7912 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7918 ;;      Params:         0       0       0       0       0
  7919 ;;      Locals:         1       0       0       0       0
  7920 ;;      Temps:          3       0       0       0       0
  7921 ;;      Totals:         4       0       0       0       0
  7922 ;;Total ram usage:        4 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    1
  7925 ;; This function calls:
  7926 ;;		_LCD_Out
  7927 ;; This function is called by:
  7928 ;;		_main
  7929 ;;		_LCD_Init
  7930 ;; This function uses a non-reentrant model
  7931 ;;
  7932                           
  7933                           
  7934                           ;psect for function _LCD_Write
  7935  1FA5                     _LCD_Write:	
  7936                           
  7937                           ;incstack = 0
  7938                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7939                           ;LCD_Write@c stored from wreg
  7940  1FA5  00F7               	movwf	LCD_Write@c
  7941                           
  7942                           ;lcd.c: 52: *(lcd.PORT) &= ~(1 << lcd.RS);
  7943  1FA6  3001               	movlw	1
  7944  1FA7  00F4               	movwf	??_LCD_Write
  7945  1FA8  1683               	bsf	3,5	;RP0=1, select bank1
  7946  1FA9  1303               	bcf	3,6	;RP1=0, select bank1
  7947  1FAA  084C               	movf	(_lcd^(0+128)+2),w
  7948  1FAB  3907               	andlw	7
  7949  1FAC  3E01               	addlw	1
  7950  1FAD  2FB0               	goto	u3224
  7951  1FAE                     u3225:	
  7952  1FAE  1003               	clrc
  7953  1FAF  0DF4               	rlf	??_LCD_Write,f
  7954  1FB0                     u3224:	
  7955  1FB0  3EFF               	addlw	-1
  7956  1FB1  1D03               	skipz
  7957  1FB2  2FAE               	goto	u3225
  7958  1FB3  0874               	movf	??_LCD_Write,w
  7959  1FB4  3AFF               	xorlw	255
  7960  1FB5  00F5               	movwf	??_LCD_Write+1
  7961  1FB6  084A               	movf	_lcd^(0+128),w
  7962  1FB7  0084               	movwf	4
  7963  1FB8  1783               	bsf	3,7
  7964  1FB9  1C4B               	btfss	(_lcd+1)^(0+128),0
  7965  1FBA  1383               	bcf	3,7
  7966  1FBB  0875               	movf	??_LCD_Write+1,w
  7967  1FBC  0580               	andwf	0,f
  7968                           
  7969                           ;lcd.c: 53: LCD_Out(c);
  7970  1FBD  0877               	movf	LCD_Write@c,w
  7971  1FBE  160A  118A  2440  160A  158A  	fcall	_LCD_Out
  7972                           
  7973                           ;lcd.c: 55: *(lcd.PORT) |= 1 << lcd.EN;
  7974  1FC3  3001               	movlw	1
  7975  1FC4  00F4               	movwf	??_LCD_Write
  7976  1FC5  1683               	bsf	3,5	;RP0=1, select bank1
  7977  1FC6  1303               	bcf	3,6	;RP1=0, select bank1
  7978  1FC7  0C4C               	rrf	(_lcd^(0+128)+2),w
  7979  1FC8  00F5               	movwf	??_LCD_Write+1
  7980  1FC9  0CF5               	rrf	??_LCD_Write+1,f
  7981  1FCA  0C75               	rrf	??_LCD_Write+1,w
  7982  1FCB  3907               	andlw	7
  7983  1FCC  3E01               	addlw	1
  7984  1FCD  2FD0               	goto	u3234
  7985  1FCE                     u3235:	
  7986  1FCE  1003               	clrc
  7987  1FCF  0DF4               	rlf	??_LCD_Write,f
  7988  1FD0                     u3234:	
  7989  1FD0  3EFF               	addlw	-1
  7990  1FD1  1D03               	skipz
  7991  1FD2  2FCE               	goto	u3235
  7992  1FD3  0874               	movf	??_LCD_Write,w
  7993  1FD4  00F6               	movwf	??_LCD_Write+2
  7994  1FD5  084A               	movf	_lcd^(0+128),w
  7995  1FD6  0084               	movwf	4
  7996  1FD7  1783               	bsf	3,7
  7997  1FD8  1C4B               	btfss	(_lcd+1)^(0+128),0
  7998  1FD9  1383               	bcf	3,7
  7999  1FDA  0876               	movf	??_LCD_Write+2,w
  8000  1FDB  0480               	iorwf	0,f
  8001                           
  8002                           ;lcd.c: 56: _delay((unsigned long)((4)*(8000000/4000.0)));
  8003  1FDC  300B               	movlw	11
  8004  1FDD  00F5               	movwf	??_LCD_Write+1
  8005  1FDE  3062               	movlw	98
  8006  1FDF  00F4               	movwf	??_LCD_Write
  8007  1FE0                     u4887:	
  8008  1FE0  0BF4               	decfsz	??_LCD_Write,f
  8009  1FE1  2FE0               	goto	u4887
  8010  1FE2  0BF5               	decfsz	??_LCD_Write+1,f
  8011  1FE3  2FE0               	goto	u4887
  8012  1FE4  0000               	nop
  8013                           
  8014                           ;lcd.c: 57: *(lcd.PORT) &= ~(1 << lcd.EN);
  8015  1FE5  3001               	movlw	1
  8016  1FE6  00F4               	movwf	??_LCD_Write
  8017  1FE7  1683               	bsf	3,5	;RP0=1, select bank1
  8018  1FE8  1303               	bcf	3,6	;RP1=0, select bank1
  8019  1FE9  0C4C               	rrf	(_lcd^(0+128)+2),w
  8020  1FEA  00F5               	movwf	??_LCD_Write+1
  8021  1FEB  0CF5               	rrf	??_LCD_Write+1,f
  8022  1FEC  0C75               	rrf	??_LCD_Write+1,w
  8023  1FED  3907               	andlw	7
  8024  1FEE  3E01               	addlw	1
  8025  1FEF  2FF2               	goto	u3244
  8026  1FF0                     u3245:	
  8027  1FF0  1003               	clrc
  8028  1FF1  0DF4               	rlf	??_LCD_Write,f
  8029  1FF2                     u3244:	
  8030  1FF2  3EFF               	addlw	-1
  8031  1FF3  1D03               	skipz
  8032  1FF4  2FF0               	goto	u3245
  8033  1FF5  0874               	movf	??_LCD_Write,w
  8034  1FF6  3AFF               	xorlw	255
  8035  1FF7  00F6               	movwf	??_LCD_Write+2
  8036  1FF8  084A               	movf	_lcd^(0+128),w
  8037  1FF9  0084               	movwf	4
  8038  1FFA  1783               	bsf	3,7
  8039  1FFB  1C4B               	btfss	(_lcd+1)^(0+128),0
  8040  1FFC  1383               	bcf	3,7
  8041  1FFD  0876               	movf	??_LCD_Write+2,w
  8042  1FFE  0580               	andwf	0,f
  8043  1FFF  0008               	return
  8044  2000                     __end_of_LCD_Write:	
  8045                           
  8046                           	psect	text25
  8047  1440                     __ptext25:	
  8048 ;; *************** function _LCD_Out *****************
  8049 ;; Defined at:
  8050 ;;		line 18 in file "lcd.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;  c               1    wreg     unsigned char 
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;  c               1    3[COMMON] unsigned char 
  8055 ;; Return value:  Size  Location     Type
  8056 ;;		None               void
  8057 ;; Registers used:
  8058 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8064 ;;      Params:         0       0       0       0       0
  8065 ;;      Locals:         1       0       0       0       0
  8066 ;;      Temps:          3       0       0       0       0
  8067 ;;      Totals:         4       0       0       0       0
  8068 ;;Total ram usage:        4 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; This function calls:
  8071 ;;		Nothing
  8072 ;; This function is called by:
  8073 ;;		_LCD_Write
  8074 ;;		_LCD_putc
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           
  8079                           ;psect for function _LCD_Out
  8080  1440                     _LCD_Out:	
  8081                           
  8082                           ;incstack = 0
  8083                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  8084                           ;LCD_Out@c stored from wreg
  8085  1440  00F3               	movwf	LCD_Out@c
  8086                           
  8087                           ;lcd.c: 20: if ( c & 1 ){
  8088  1441  1C73               	btfss	LCD_Out@c,0
  8089  1442  2C5A               	goto	l2168
  8090                           
  8091                           ;lcd.c: 21: *(lcd.PORT) |= 1 << lcd.D4;
  8092  1443  3001               	movlw	1
  8093  1444  00F0               	movwf	??_LCD_Out
  8094  1445  1683               	bsf	3,5	;RP0=1, select bank1
  8095  1446  1303               	bcf	3,6	;RP1=0, select bank1
  8096  1447  084D               	movf	(_lcd^(0+128)+3),w
  8097  1448  3907               	andlw	7
  8098  1449  3E01               	addlw	1
  8099  144A  2C4D               	goto	u2524
  8100  144B                     u2525:	
  8101  144B  1003               	clrc
  8102  144C  0DF0               	rlf	??_LCD_Out,f
  8103  144D                     u2524:	
  8104  144D  3EFF               	addlw	-1
  8105  144E  1D03               	skipz
  8106  144F  2C4B               	goto	u2525
  8107  1450  0870               	movf	??_LCD_Out,w
  8108  1451  00F1               	movwf	??_LCD_Out+1
  8109  1452  084A               	movf	_lcd^(0+128),w
  8110  1453  0084               	movwf	4
  8111  1454  1783               	bsf	3,7
  8112  1455  1C4B               	btfss	(_lcd+1)^(0+128),0
  8113  1456  1383               	bcf	3,7
  8114  1457  0871               	movf	??_LCD_Out+1,w
  8115  1458  0480               	iorwf	0,f
  8116                           
  8117                           ;lcd.c: 22: }
  8118  1459  2C71               	goto	l2170
  8119  145A                     l2168:	
  8120                           
  8121                           ;lcd.c: 23: else {
  8122                           ;lcd.c: 24: *(lcd.PORT) &= ~(1 << lcd.D4);
  8123  145A  3001               	movlw	1
  8124  145B  00F0               	movwf	??_LCD_Out
  8125  145C  1683               	bsf	3,5	;RP0=1, select bank1
  8126  145D  1303               	bcf	3,6	;RP1=0, select bank1
  8127  145E  084D               	movf	(_lcd^(0+128)+3),w
  8128  145F  3907               	andlw	7
  8129  1460  3E01               	addlw	1
  8130  1461  2C64               	goto	u2534
  8131  1462                     u2535:	
  8132  1462  1003               	clrc
  8133  1463  0DF0               	rlf	??_LCD_Out,f
  8134  1464                     u2534:	
  8135  1464  3EFF               	addlw	-1
  8136  1465  1D03               	skipz
  8137  1466  2C62               	goto	u2535
  8138  1467  0870               	movf	??_LCD_Out,w
  8139  1468  3AFF               	xorlw	255
  8140  1469  00F1               	movwf	??_LCD_Out+1
  8141  146A  084A               	movf	_lcd^(0+128),w
  8142  146B  0084               	movwf	4
  8143  146C  1783               	bsf	3,7
  8144  146D  1C4B               	btfss	(_lcd+1)^(0+128),0
  8145  146E  1383               	bcf	3,7
  8146  146F  0871               	movf	??_LCD_Out+1,w
  8147  1470  0580               	andwf	0,f
  8148  1471                     l2170:	
  8149                           
  8150                           ;lcd.c: 25: }
  8151                           ;lcd.c: 27: if ( c & 2 ) {
  8152  1471  1CF3               	btfss	LCD_Out@c,1
  8153  1472  2C8B               	goto	l2174
  8154                           
  8155                           ;lcd.c: 28: *(lcd.PORT) |= 1 << lcd.D5;
  8156  1473  3001               	movlw	1
  8157  1474  00F0               	movwf	??_LCD_Out
  8158  1475  0C4D               	rrf	(_lcd^(0+128)+3),w
  8159  1476  00F1               	movwf	??_LCD_Out+1
  8160  1477  0CF1               	rrf	??_LCD_Out+1,f
  8161  1478  0C71               	rrf	??_LCD_Out+1,w
  8162  1479  3907               	andlw	7
  8163  147A  3E01               	addlw	1
  8164  147B  2C7E               	goto	u2554
  8165  147C                     u2555:	
  8166  147C  1003               	clrc
  8167  147D  0DF0               	rlf	??_LCD_Out,f
  8168  147E                     u2554:	
  8169  147E  3EFF               	addlw	-1
  8170  147F  1D03               	skipz
  8171  1480  2C7C               	goto	u2555
  8172  1481  0870               	movf	??_LCD_Out,w
  8173  1482  00F2               	movwf	??_LCD_Out+2
  8174  1483  084A               	movf	_lcd^(0+128),w
  8175  1484  0084               	movwf	4
  8176  1485  1783               	bsf	3,7
  8177  1486  1C4B               	btfss	(_lcd+1)^(0+128),0
  8178  1487  1383               	bcf	3,7
  8179  1488  0872               	movf	??_LCD_Out+2,w
  8180  1489  0480               	iorwf	0,f
  8181                           
  8182                           ;lcd.c: 29: }
  8183  148A  2CA3               	goto	l2176
  8184  148B                     l2174:	
  8185                           
  8186                           ;lcd.c: 30: else {
  8187                           ;lcd.c: 31: *(lcd.PORT) &= ~(1 << lcd.D5);
  8188  148B  3001               	movlw	1
  8189  148C  00F0               	movwf	??_LCD_Out
  8190  148D  0C4D               	rrf	(_lcd^(0+128)+3),w
  8191  148E  00F1               	movwf	??_LCD_Out+1
  8192  148F  0CF1               	rrf	??_LCD_Out+1,f
  8193  1490  0C71               	rrf	??_LCD_Out+1,w
  8194  1491  3907               	andlw	7
  8195  1492  3E01               	addlw	1
  8196  1493  2C96               	goto	u2564
  8197  1494                     u2565:	
  8198  1494  1003               	clrc
  8199  1495  0DF0               	rlf	??_LCD_Out,f
  8200  1496                     u2564:	
  8201  1496  3EFF               	addlw	-1
  8202  1497  1D03               	skipz
  8203  1498  2C94               	goto	u2565
  8204  1499  0870               	movf	??_LCD_Out,w
  8205  149A  3AFF               	xorlw	255
  8206  149B  00F2               	movwf	??_LCD_Out+2
  8207  149C  084A               	movf	_lcd^(0+128),w
  8208  149D  0084               	movwf	4
  8209  149E  1783               	bsf	3,7
  8210  149F  1C4B               	btfss	(_lcd+1)^(0+128),0
  8211  14A0  1383               	bcf	3,7
  8212  14A1  0872               	movf	??_LCD_Out+2,w
  8213  14A2  0580               	andwf	0,f
  8214  14A3                     l2176:	
  8215                           
  8216                           ;lcd.c: 32: }
  8217                           ;lcd.c: 34: if ( c & 4 ) {
  8218  14A3  1D73               	btfss	LCD_Out@c,2
  8219  14A4  2CBA               	goto	l2180
  8220                           
  8221                           ;lcd.c: 35: *(lcd.PORT) |= 1 << lcd.D6;
  8222  14A5  3001               	movlw	1
  8223  14A6  00F0               	movwf	??_LCD_Out
  8224  14A7  084E               	movf	(_lcd^(0+128)+4),w
  8225  14A8  3907               	andlw	7
  8226  14A9  3E01               	addlw	1
  8227  14AA  2CAD               	goto	u2584
  8228  14AB                     u2585:	
  8229  14AB  1003               	clrc
  8230  14AC  0DF0               	rlf	??_LCD_Out,f
  8231  14AD                     u2584:	
  8232  14AD  3EFF               	addlw	-1
  8233  14AE  1D03               	skipz
  8234  14AF  2CAB               	goto	u2585
  8235  14B0  0870               	movf	??_LCD_Out,w
  8236  14B1  00F1               	movwf	??_LCD_Out+1
  8237  14B2  084A               	movf	_lcd^(0+128),w
  8238  14B3  0084               	movwf	4
  8239  14B4  1783               	bsf	3,7
  8240  14B5  1C4B               	btfss	(_lcd+1)^(0+128),0
  8241  14B6  1383               	bcf	3,7
  8242  14B7  0871               	movf	??_LCD_Out+1,w
  8243  14B8  0480               	iorwf	0,f
  8244                           
  8245                           ;lcd.c: 36: }
  8246  14B9  2CCF               	goto	l2182
  8247  14BA                     l2180:	
  8248                           
  8249                           ;lcd.c: 37: else {
  8250                           ;lcd.c: 38: *(lcd.PORT) &= ~(1 << lcd.D6);
  8251  14BA  3001               	movlw	1
  8252  14BB  00F0               	movwf	??_LCD_Out
  8253  14BC  084E               	movf	(_lcd^(0+128)+4),w
  8254  14BD  3907               	andlw	7
  8255  14BE  3E01               	addlw	1
  8256  14BF  2CC2               	goto	u2594
  8257  14C0                     u2595:	
  8258  14C0  1003               	clrc
  8259  14C1  0DF0               	rlf	??_LCD_Out,f
  8260  14C2                     u2594:	
  8261  14C2  3EFF               	addlw	-1
  8262  14C3  1D03               	skipz
  8263  14C4  2CC0               	goto	u2595
  8264  14C5  0870               	movf	??_LCD_Out,w
  8265  14C6  3AFF               	xorlw	255
  8266  14C7  00F1               	movwf	??_LCD_Out+1
  8267  14C8  084A               	movf	_lcd^(0+128),w
  8268  14C9  0084               	movwf	4
  8269  14CA  1783               	bsf	3,7
  8270  14CB  1C4B               	btfss	(_lcd+1)^(0+128),0
  8271  14CC  1383               	bcf	3,7
  8272  14CD  0871               	movf	??_LCD_Out+1,w
  8273  14CE  0580               	andwf	0,f
  8274  14CF                     l2182:	
  8275                           
  8276                           ;lcd.c: 39: }
  8277                           ;lcd.c: 41: if ( c & 8 ) {
  8278  14CF  1DF3               	btfss	LCD_Out@c,3
  8279  14D0  2CE9               	goto	l2186
  8280                           
  8281                           ;lcd.c: 42: *(lcd.PORT) |= 1 << lcd.D7;
  8282  14D1  3001               	movlw	1
  8283  14D2  00F0               	movwf	??_LCD_Out
  8284  14D3  0C4E               	rrf	(_lcd^(0+128)+4),w
  8285  14D4  00F1               	movwf	??_LCD_Out+1
  8286  14D5  0CF1               	rrf	??_LCD_Out+1,f
  8287  14D6  0C71               	rrf	??_LCD_Out+1,w
  8288  14D7  3907               	andlw	7
  8289  14D8  3E01               	addlw	1
  8290  14D9  2CDC               	goto	u2614
  8291  14DA                     u2615:	
  8292  14DA  1003               	clrc
  8293  14DB  0DF0               	rlf	??_LCD_Out,f
  8294  14DC                     u2614:	
  8295  14DC  3EFF               	addlw	-1
  8296  14DD  1D03               	skipz
  8297  14DE  2CDA               	goto	u2615
  8298  14DF  0870               	movf	??_LCD_Out,w
  8299  14E0  00F2               	movwf	??_LCD_Out+2
  8300  14E1  084A               	movf	_lcd^(0+128),w
  8301  14E2  0084               	movwf	4
  8302  14E3  1783               	bsf	3,7
  8303  14E4  1C4B               	btfss	(_lcd+1)^(0+128),0
  8304  14E5  1383               	bcf	3,7
  8305  14E6  0872               	movf	??_LCD_Out+2,w
  8306  14E7  0480               	iorwf	0,f
  8307                           
  8308                           ;lcd.c: 43: }
  8309  14E8  0008               	return
  8310  14E9                     l2186:	
  8311                           
  8312                           ;lcd.c: 44: else {
  8313                           ;lcd.c: 45: *(lcd.PORT) &= ~(1 << lcd.D7);
  8314  14E9  3001               	movlw	1
  8315  14EA  00F0               	movwf	??_LCD_Out
  8316  14EB  0C4E               	rrf	(_lcd^(0+128)+4),w
  8317  14EC  00F1               	movwf	??_LCD_Out+1
  8318  14ED  0CF1               	rrf	??_LCD_Out+1,f
  8319  14EE  0C71               	rrf	??_LCD_Out+1,w
  8320  14EF  3907               	andlw	7
  8321  14F0  3E01               	addlw	1
  8322  14F1  2CF4               	goto	u2624
  8323  14F2                     u2625:	
  8324  14F2  1003               	clrc
  8325  14F3  0DF0               	rlf	??_LCD_Out,f
  8326  14F4                     u2624:	
  8327  14F4  3EFF               	addlw	-1
  8328  14F5  1D03               	skipz
  8329  14F6  2CF2               	goto	u2625
  8330  14F7  0870               	movf	??_LCD_Out,w
  8331  14F8  3AFF               	xorlw	255
  8332  14F9  00F2               	movwf	??_LCD_Out+2
  8333  14FA  084A               	movf	_lcd^(0+128),w
  8334  14FB  0084               	movwf	4
  8335  14FC  1783               	bsf	3,7
  8336  14FD  1C4B               	btfss	(_lcd+1)^(0+128),0
  8337  14FE  1383               	bcf	3,7
  8338  14FF  0872               	movf	??_LCD_Out+2,w
  8339  1500  0580               	andwf	0,f
  8340  1501  0008               	return
  8341  1502                     __end_of_LCD_Out:	
  8342                           
  8343                           	psect	text26
  8344  1E45                     __ptext26:	
  8345 ;; *************** function _IO_Init *****************
  8346 ;; Defined at:
  8347 ;;		line 182 in file "main.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;		None
  8352 ;; Return value:  Size  Location     Type
  8353 ;;		None               void
  8354 ;; Registers used:
  8355 ;;		None
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8361 ;;      Params:         0       0       0       0       0
  8362 ;;      Locals:         0       0       0       0       0
  8363 ;;      Temps:          0       0       0       0       0
  8364 ;;      Totals:         0       0       0       0       0
  8365 ;;Total ram usage:        0 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; This function calls:
  8368 ;;		Nothing
  8369 ;; This function is called by:
  8370 ;;		_main
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           
  8375                           ;psect for function _IO_Init
  8376  1E45                     _IO_Init:	
  8377                           
  8378                           ;main.c: 185: OPTION_REGbits.nRBPU = 0;
  8379                           
  8380                           ;incstack = 0
  8381                           ; Regs used in _IO_Init: []
  8382  1E45  1683               	bsf	3,5	;RP0=1, select bank1
  8383  1E46  1303               	bcf	3,6	;RP1=0, select bank1
  8384  1E47  1381               	bcf	1,7	;volatile
  8385                           
  8386                           ;main.c: 187: TRISBbits.TRISB0 = 1;
  8387  1E48  1406               	bsf	6,0	;volatile
  8388                           
  8389                           ;main.c: 188: TRISBbits.TRISB1 = 1;
  8390  1E49  1486               	bsf	6,1	;volatile
  8391                           
  8392                           ;main.c: 189: TRISBbits.TRISB2 = 1;
  8393  1E4A  1506               	bsf	6,2	;volatile
  8394                           
  8395                           ;main.c: 190: TRISBbits.TRISB4 = 1;
  8396  1E4B  1606               	bsf	6,4	;volatile
  8397                           
  8398                           ;main.c: 193: TRISCbits.TRISC1 = 0;
  8399  1E4C  1087               	bcf	7,1	;volatile
  8400                           
  8401                           ;main.c: 194: TRISBbits.TRISB3 = 0;
  8402  1E4D  1186               	bcf	6,3	;volatile
  8403                           
  8404                           ;main.c: 196: PORTBbits.RB3 = 0;
  8405  1E4E  1283               	bcf	3,5	;RP0=0, select bank0
  8406  1E4F  1303               	bcf	3,6	;RP1=0, select bank0
  8407  1E50  1186               	bcf	6,3	;volatile
  8408                           
  8409                           ;main.c: 197: PORTCbits.RC1 = 1;
  8410  1E51  1487               	bsf	7,1	;volatile
  8411  1E52  0008               	return
  8412  1E53                     __end_of_IO_Init:	
  8413                           
  8414                           	psect	text27
  8415  129B                     __ptext27:	
  8416 ;; *************** function _ADC_Read *****************
  8417 ;; Defined at:
  8418 ;;		line 32 in file "adc.c"
  8419 ;; Parameters:    Size  Location     Type
  8420 ;;  channel         1    wreg     unsigned char 
  8421 ;;  samples         2    0[BANK0 ] unsigned int 
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;  channel         1   14[BANK0 ] unsigned char 
  8424 ;;  i               2   12[BANK0 ] int 
  8425 ;;  ADCResult       4    8[BANK0 ] unsigned long 
  8426 ;; Return value:  Size  Location     Type
  8427 ;;                  4    0[BANK0 ] unsigned long 
  8428 ;; Registers used:
  8429 ;;		wreg, status,2, status,0, pclath, cstack
  8430 ;; Tracked objects:
  8431 ;;		On entry : 0/0
  8432 ;;		On exit  : 0/0
  8433 ;;		Unchanged: 0/0
  8434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8435 ;;      Params:         0       4       0       0       0
  8436 ;;      Locals:         0       7       0       0       0
  8437 ;;      Temps:          0       4       0       0       0
  8438 ;;      Totals:         0      15       0       0       0
  8439 ;;Total ram usage:       15 bytes
  8440 ;; Hardware stack levels used:    1
  8441 ;; Hardware stack levels required when called:    1
  8442 ;; This function calls:
  8443 ;;		___lldiv
  8444 ;; This function is called by:
  8445 ;;		_main
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           
  8450                           ;psect for function _ADC_Read
  8451  129B                     _ADC_Read:	
  8452                           
  8453                           ;incstack = 0
  8454                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+pclath+cstack]
  8455                           ;ADC_Read@channel stored from wreg
  8456  129B  1283               	bcf	3,5	;RP0=0, select bank0
  8457  129C  1303               	bcf	3,6	;RP1=0, select bank0
  8458  129D  00AE               	movwf	ADC_Read@channel
  8459                           
  8460                           ;adc.c: 34: unsigned long ADCResult = 0;
  8461  129E  3000               	movlw	0
  8462  129F  00AB               	movwf	ADC_Read@ADCResult+3
  8463  12A0  3000               	movlw	0
  8464  12A1  00AA               	movwf	ADC_Read@ADCResult+2
  8465  12A2  3000               	movlw	0
  8466  12A3  00A9               	movwf	ADC_Read@ADCResult+1
  8467  12A4  3000               	movlw	0
  8468  12A5  00A8               	movwf	ADC_Read@ADCResult
  8469                           
  8470                           ;adc.c: 37: if ( samples < 1 ) {
  8471  12A6  0821               	movf	ADC_Read@samples+1,w
  8472  12A7  0420               	iorwf	ADC_Read@samples,w
  8473  12A8  1D03               	skipz
  8474  12A9  2AAE               	goto	l336
  8475                           
  8476                           ;adc.c: 38: samples = 1;
  8477  12AA  3001               	movlw	1
  8478  12AB  00A0               	movwf	ADC_Read@samples
  8479  12AC  3000               	movlw	0
  8480  12AD  00A1               	movwf	ADC_Read@samples+1
  8481  12AE                     l336:	
  8482                           
  8483                           ;adc.c: 39: }
  8484                           ;adc.c: 42: if ( channel > 4 ) {
  8485  12AE  3005               	movlw	5
  8486  12AF  022E               	subwf	ADC_Read@channel,w
  8487  12B0  1803               	btfsc	3,0
  8488                           
  8489                           ;adc.c: 43: channel = 0;
  8490  12B1  01AE               	clrf	ADC_Read@channel
  8491                           
  8492                           ;adc.c: 44: }
  8493                           ;adc.c: 46: ADCON0bits.CHS = channel;
  8494  12B2  082E               	movf	ADC_Read@channel,w
  8495  12B3  00A4               	movwf	??_ADC_Read
  8496  12B4  0DA4               	rlf	??_ADC_Read,f
  8497  12B5  0DA4               	rlf	??_ADC_Read,f
  8498  12B6  0DA4               	rlf	??_ADC_Read,f
  8499  12B7  081F               	movf	31,w	;volatile
  8500  12B8  0624               	xorwf	??_ADC_Read,w
  8501  12B9  39C7               	andlw	-57
  8502  12BA  0624               	xorwf	??_ADC_Read,w
  8503  12BB  009F               	movwf	31	;volatile
  8504                           
  8505                           ;adc.c: 47: _delay((unsigned long)((15)*(8000000/4000000.0)));
  8506  12BC  3009               	movlw	9
  8507  12BD  00A4               	movwf	??_ADC_Read
  8508  12BE                     u4897:	
  8509  12BE  0BA4               	decfsz	??_ADC_Read,f
  8510  12BF  2ABE               	goto	u4897
  8511  12C0  2AC1               	nop2	;nop
  8512                           
  8513                           ;adc.c: 49: for ( int i = 0; i < samples; ++i ) {
  8514  12C1  1283               	bcf	3,5	;RP0=0, select bank0
  8515  12C2  1303               	bcf	3,6	;RP1=0, select bank0
  8516  12C3  01AC               	clrf	ADC_Read@i
  8517  12C4  01AD               	clrf	ADC_Read@i+1
  8518  12C5                     l338:	
  8519  12C5  0821               	movf	ADC_Read@samples+1,w
  8520  12C6  022D               	subwf	ADC_Read@i+1,w
  8521  12C7  1D03               	skipz
  8522  12C8  2ACB               	goto	u4095
  8523  12C9  0820               	movf	ADC_Read@samples,w
  8524  12CA  022C               	subwf	ADC_Read@i,w
  8525  12CB                     u4095:	
  8526  12CB  1803               	btfsc	3,0
  8527  12CC  2AF8               	goto	l2848
  8528                           
  8529                           ;adc.c: 51: ADCON0bits.GO = 1;
  8530  12CD  151F               	bsf	31,2	;volatile
  8531  12CE                     l340:	
  8532                           ;adc.c: 53: while (ADCON0bits.nDONE) continue;
  8533                           
  8534  12CE  191F               	btfsc	31,2	;volatile
  8535  12CF  2ACE               	goto	l340
  8536                           
  8537                           ;adc.c: 55: ADCResult += ( ADRESH << 8 ) + ADRESL ;
  8538  12D0  1683               	bsf	3,5	;RP0=1, select bank1
  8539  12D1  1303               	bcf	3,6	;RP1=0, select bank1
  8540  12D2  081E               	movf	30,w	;volatile
  8541  12D3  1283               	bcf	3,5	;RP0=0, select bank0
  8542  12D4  1303               	bcf	3,6	;RP1=0, select bank0
  8543  12D5  00A4               	movwf	??_ADC_Read
  8544  12D6  081E               	movf	30,w	;volatile
  8545  12D7  00A5               	movwf	??_ADC_Read+1
  8546  12D8  3000               	movlw	0
  8547  12D9  1BA5               	btfsc	??_ADC_Read+1,7
  8548  12DA  30FF               	movlw	255
  8549  12DB  00A6               	movwf	??_ADC_Read+2
  8550  12DC  00A7               	movwf	??_ADC_Read+3
  8551  12DD  0824               	movf	??_ADC_Read,w
  8552  12DE  07A8               	addwf	ADC_Read@ADCResult,f
  8553  12DF  0825               	movf	??_ADC_Read+1,w
  8554  12E0  1103               	clrz
  8555  12E1  1803               	skipnc
  8556  12E2  3E01               	addlw	1
  8557  12E3  1D03               	btfss	3,2
  8558  12E4  07A9               	addwf	ADC_Read@ADCResult+1,f
  8559  12E5  0826               	movf	??_ADC_Read+2,w
  8560  12E6  1103               	clrz
  8561  12E7  1803               	skipnc
  8562  12E8  3E01               	addlw	1
  8563  12E9  1D03               	btfss	3,2
  8564  12EA  07AA               	addwf	ADC_Read@ADCResult+2,f
  8565  12EB  0827               	movf	??_ADC_Read+3,w
  8566  12EC  1103               	clrz
  8567  12ED  1803               	skipnc
  8568  12EE  3E01               	addlw	1
  8569  12EF  1D03               	btfss	3,2
  8570  12F0  07AB               	addwf	ADC_Read@ADCResult+3,f
  8571  12F1  3001               	movlw	1
  8572  12F2  07AC               	addwf	ADC_Read@i,f
  8573  12F3  1803               	skipnc
  8574  12F4  0AAD               	incf	ADC_Read@i+1,f
  8575  12F5  3000               	movlw	0
  8576  12F6  07AD               	addwf	ADC_Read@i+1,f
  8577  12F7  2AC5               	goto	l338
  8578  12F8                     l2848:	
  8579                           
  8580                           ;adc.c: 57: }
  8581                           ;adc.c: 59: return ADCResult / samples;
  8582  12F8  0820               	movf	ADC_Read@samples,w
  8583  12F9  00F0               	movwf	___lldiv@divisor
  8584  12FA  0821               	movf	ADC_Read@samples+1,w
  8585  12FB  00F1               	movwf	___lldiv@divisor+1
  8586  12FC  01F2               	clrf	___lldiv@divisor+2
  8587  12FD  01F3               	clrf	___lldiv@divisor+3
  8588  12FE  082B               	movf	ADC_Read@ADCResult+3,w
  8589  12FF  00F7               	movwf	___lldiv@dividend+3
  8590  1300  082A               	movf	ADC_Read@ADCResult+2,w
  8591  1301  00F6               	movwf	___lldiv@dividend+2
  8592  1302  0829               	movf	ADC_Read@ADCResult+1,w
  8593  1303  00F5               	movwf	___lldiv@dividend+1
  8594  1304  0828               	movf	ADC_Read@ADCResult,w
  8595  1305  00F4               	movwf	___lldiv@dividend
  8596  1306  160A  118A  2176   	fcall	___lldiv
  8597  1309  0873               	movf	?___lldiv+3,w
  8598  130A  1283               	bcf	3,5	;RP0=0, select bank0
  8599  130B  1303               	bcf	3,6	;RP1=0, select bank0
  8600  130C  00A3               	movwf	?_ADC_Read+3
  8601  130D  0872               	movf	?___lldiv+2,w
  8602  130E  00A2               	movwf	?_ADC_Read+2
  8603  130F  0871               	movf	?___lldiv+1,w
  8604  1310  00A1               	movwf	?_ADC_Read+1
  8605  1311  0870               	movf	?___lldiv,w
  8606  1312  00A0               	movwf	?_ADC_Read
  8607  1313  0008               	return
  8608  1314                     __end_of_ADC_Read:	
  8609                           
  8610                           	psect	text28
  8611  1176                     __ptext28:	
  8612 ;; *************** function ___lldiv *****************
  8613 ;; Defined at:
  8614 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/lldiv.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;  divisor         4    0[COMMON] unsigned long 
  8617 ;;  dividend        4    4[COMMON] unsigned long 
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;  quotient        4    9[COMMON] unsigned long 
  8620 ;;  counter         1   13[COMMON] unsigned char 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  4    0[COMMON] unsigned long 
  8623 ;; Registers used:
  8624 ;;		wreg, status,2, status,0
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8630 ;;      Params:         8       0       0       0       0
  8631 ;;      Locals:         5       0       0       0       0
  8632 ;;      Temps:          1       0       0       0       0
  8633 ;;      Totals:        14       0       0       0       0
  8634 ;;Total ram usage:       14 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; This function calls:
  8637 ;;		Nothing
  8638 ;; This function is called by:
  8639 ;;		_ADC_Read
  8640 ;;		_sprintf
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           
  8645                           ;psect for function ___lldiv
  8646  1176                     ___lldiv:	
  8647                           
  8648                           ;incstack = 0
  8649                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8650  1176  3000               	movlw	0
  8651  1177  00FC               	movwf	___lldiv@quotient+3
  8652  1178  3000               	movlw	0
  8653  1179  00FB               	movwf	___lldiv@quotient+2
  8654  117A  3000               	movlw	0
  8655  117B  00FA               	movwf	___lldiv@quotient+1
  8656  117C  3000               	movlw	0
  8657  117D  00F9               	movwf	___lldiv@quotient
  8658  117E  0873               	movf	___lldiv@divisor+3,w
  8659  117F  0472               	iorwf	___lldiv@divisor+2,w
  8660  1180  0471               	iorwf	___lldiv@divisor+1,w
  8661  1181  0470               	iorwf	___lldiv@divisor,w
  8662  1182  1903               	skipnz
  8663  1183  29CB               	goto	l2726
  8664  1184  01FD               	clrf	___lldiv@counter
  8665  1185  0AFD               	incf	___lldiv@counter,f
  8666  1186                     l2712:	
  8667  1186  1BF3               	btfsc	___lldiv@divisor+3,7
  8668  1187  2996               	goto	l2714
  8669  1188  3001               	movlw	1
  8670  1189  00F8               	movwf	??___lldiv
  8671  118A                     u3865:	
  8672  118A  1003               	clrc
  8673  118B  0DF0               	rlf	___lldiv@divisor,f
  8674  118C  0DF1               	rlf	___lldiv@divisor+1,f
  8675  118D  0DF2               	rlf	___lldiv@divisor+2,f
  8676  118E  0DF3               	rlf	___lldiv@divisor+3,f
  8677  118F  0BF8               	decfsz	??___lldiv,f
  8678  1190  298A               	goto	u3865
  8679  1191  3001               	movlw	1
  8680  1192  00F8               	movwf	??___lldiv
  8681  1193  0878               	movf	??___lldiv,w
  8682  1194  07FD               	addwf	___lldiv@counter,f
  8683  1195  2986               	goto	l2712
  8684  1196                     l2714:	
  8685  1196  3001               	movlw	1
  8686  1197  00F8               	movwf	??___lldiv
  8687  1198                     u3885:	
  8688  1198  1003               	clrc
  8689  1199  0DF9               	rlf	___lldiv@quotient,f
  8690  119A  0DFA               	rlf	___lldiv@quotient+1,f
  8691  119B  0DFB               	rlf	___lldiv@quotient+2,f
  8692  119C  0DFC               	rlf	___lldiv@quotient+3,f
  8693  119D  0BF8               	decfsz	??___lldiv,f
  8694  119E  2998               	goto	u3885
  8695  119F  0873               	movf	___lldiv@divisor+3,w
  8696  11A0  0277               	subwf	___lldiv@dividend+3,w
  8697  11A1  1D03               	skipz
  8698  11A2  29AD               	goto	u3895
  8699  11A3  0872               	movf	___lldiv@divisor+2,w
  8700  11A4  0276               	subwf	___lldiv@dividend+2,w
  8701  11A5  1D03               	skipz
  8702  11A6  29AD               	goto	u3895
  8703  11A7  0871               	movf	___lldiv@divisor+1,w
  8704  11A8  0275               	subwf	___lldiv@dividend+1,w
  8705  11A9  1D03               	skipz
  8706  11AA  29AD               	goto	u3895
  8707  11AB  0870               	movf	___lldiv@divisor,w
  8708  11AC  0274               	subwf	___lldiv@dividend,w
  8709  11AD                     u3895:	
  8710  11AD  1C03               	skipc
  8711  11AE  29BE               	goto	l2722
  8712  11AF  0870               	movf	___lldiv@divisor,w
  8713  11B0  02F4               	subwf	___lldiv@dividend,f
  8714  11B1  0871               	movf	___lldiv@divisor+1,w
  8715  11B2  1C03               	skipc
  8716  11B3  0F71               	incfsz	___lldiv@divisor+1,w
  8717  11B4  02F5               	subwf	___lldiv@dividend+1,f
  8718  11B5  0872               	movf	___lldiv@divisor+2,w
  8719  11B6  1C03               	skipc
  8720  11B7  0F72               	incfsz	___lldiv@divisor+2,w
  8721  11B8  02F6               	subwf	___lldiv@dividend+2,f
  8722  11B9  0873               	movf	___lldiv@divisor+3,w
  8723  11BA  1C03               	skipc
  8724  11BB  0F73               	incfsz	___lldiv@divisor+3,w
  8725  11BC  02F7               	subwf	___lldiv@dividend+3,f
  8726  11BD  1479               	bsf	___lldiv@quotient,0
  8727  11BE                     l2722:	
  8728  11BE  3001               	movlw	1
  8729  11BF                     u3905:	
  8730  11BF  1003               	clrc
  8731  11C0  0CF3               	rrf	___lldiv@divisor+3,f
  8732  11C1  0CF2               	rrf	___lldiv@divisor+2,f
  8733  11C2  0CF1               	rrf	___lldiv@divisor+1,f
  8734  11C3  0CF0               	rrf	___lldiv@divisor,f
  8735  11C4  3EFF               	addlw	-1
  8736  11C5  1D03               	skipz
  8737  11C6  29BF               	goto	u3905
  8738  11C7  3001               	movlw	1
  8739  11C8  02FD               	subwf	___lldiv@counter,f
  8740  11C9  1D03               	btfss	3,2
  8741  11CA  2996               	goto	l2714
  8742  11CB                     l2726:	
  8743  11CB  087C               	movf	___lldiv@quotient+3,w
  8744  11CC  00F3               	movwf	?___lldiv+3
  8745  11CD  087B               	movf	___lldiv@quotient+2,w
  8746  11CE  00F2               	movwf	?___lldiv+2
  8747  11CF  087A               	movf	___lldiv@quotient+1,w
  8748  11D0  00F1               	movwf	?___lldiv+1
  8749  11D1  0879               	movf	___lldiv@quotient,w
  8750  11D2  00F0               	movwf	?___lldiv
  8751  11D3  0008               	return
  8752  11D4                     __end_of___lldiv:	
  8753                           
  8754                           	psect	text29
  8755  1E7D                     __ptext29:	
  8756 ;; *************** function _ADC_Init *****************
  8757 ;; Defined at:
  8758 ;;		line 14 in file "adc.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;		None
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;		None
  8763 ;; Return value:  Size  Location     Type
  8764 ;;		None               void
  8765 ;; Registers used:
  8766 ;;		wreg, status,2, status,0
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8772 ;;      Params:         0       0       0       0       0
  8773 ;;      Locals:         0       0       0       0       0
  8774 ;;      Temps:          1       0       0       0       0
  8775 ;;      Totals:         1       0       0       0       0
  8776 ;;Total ram usage:        1 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; This function calls:
  8779 ;;		Nothing
  8780 ;; This function is called by:
  8781 ;;		_main
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           
  8786                           ;psect for function _ADC_Init
  8787  1E7D                     _ADC_Init:	
  8788                           
  8789                           ;adc.c: 16: TRISA = 0xFF;
  8790                           
  8791                           ;incstack = 0
  8792                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  8793  1E7D  30FF               	movlw	255
  8794  1E7E  1683               	bsf	3,5	;RP0=1, select bank1
  8795  1E7F  1303               	bcf	3,6	;RP1=0, select bank1
  8796  1E80  0085               	movwf	5	;volatile
  8797                           
  8798                           ;adc.c: 18: ADCON0bits.ADCS = 1;
  8799  1E81  1283               	bcf	3,5	;RP0=0, select bank0
  8800  1E82  1303               	bcf	3,6	;RP1=0, select bank0
  8801  1E83  081F               	movf	31,w	;volatile
  8802  1E84  393F               	andlw	-193
  8803  1E85  3840               	iorlw	64
  8804  1E86  009F               	movwf	31	;volatile
  8805                           
  8806                           ;adc.c: 19: ADCON1bits.ADCS2 = 1;
  8807  1E87  1683               	bsf	3,5	;RP0=1, select bank1
  8808  1E88  1303               	bcf	3,6	;RP1=0, select bank1
  8809  1E89  171F               	bsf	31,6	;volatile
  8810                           
  8811                           ;adc.c: 21: ADCON1bits.PCFG = 2;
  8812  1E8A  081F               	movf	31,w	;volatile
  8813  1E8B  39F0               	andlw	-16
  8814  1E8C  3802               	iorlw	2
  8815  1E8D  009F               	movwf	31	;volatile
  8816                           
  8817                           ;adc.c: 23: ADCON1bits.ADFM = 1;
  8818  1E8E  179F               	bsf	31,7	;volatile
  8819                           
  8820                           ;adc.c: 25: ADCON0bits.CHS = 0;
  8821  1E8F  30C7               	movlw	-57
  8822  1E90  1283               	bcf	3,5	;RP0=0, select bank0
  8823  1E91  1303               	bcf	3,6	;RP1=0, select bank0
  8824  1E92  059F               	andwf	31,f	;volatile
  8825                           
  8826                           ;adc.c: 26: _delay((unsigned long)((15)*(8000000/4000000.0)));
  8827  1E93  3009               	movlw	9
  8828  1E94  00F0               	movwf	??_ADC_Init
  8829  1E95                     u4907:	
  8830  1E95  0BF0               	decfsz	??_ADC_Init,f
  8831  1E96  2E95               	goto	u4907
  8832  1E97  2E98               	nop2	;nop
  8833                           
  8834                           ;adc.c: 28: ADCON0bits.ADON = 1;
  8835  1E98  1283               	bcf	3,5	;RP0=0, select bank0
  8836  1E99  1303               	bcf	3,6	;RP1=0, select bank0
  8837  1E9A  141F               	bsf	31,0	;volatile
  8838  1E9B  0008               	return
  8839  1E9C                     __end_of_ADC_Init:	
  8840  007E                     btemp	set	126	;btemp
  8841  007E                     wtemp	set	126
  8842  007E                     wtemp0	set	126
  8843  0080                     wtemp1	set	128
  8844  0082                     wtemp2	set	130
  8845  0084                     wtemp3	set	132
  8846  0086                     wtemp4	set	134
  8847  0088                     wtemp5	set	136
  8848  007F                     wtemp6	set	127
  8849  007E                     ttemp	set	126
  8850  007E                     ttemp0	set	126
  8851  0081                     ttemp1	set	129
  8852  0084                     ttemp2	set	132
  8853  0087                     ttemp3	set	135
  8854  007F                     ttemp4	set	127
  8855  007E                     ltemp	set	126
  8856  007E                     ltemp0	set	126
  8857  0082                     ltemp1	set	130
  8858  0086                     ltemp2	set	134
  8859  0080                     ltemp3	set	128


Data Sizes:
    Strings     119
    Constant    118
    Data        5
    BSS         0
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      78
    BANK1            80     42      47
    BANK3            96     77      82
    BANK2            96      0       0

Pointer List with Targets:

    main$878	PTR unsigned char  size(1) Largest target is 45
		 -> main@current_str(BANK3[45]), 

    main$871	PTR unsigned char  size(1) Largest target is 45
		 -> main@current_str(BANK3[45]), sp__ADC_Read(COMMON[4]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[7]), STR_3(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 45
		 -> main@current_str(BANK3[45]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S450$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    LCD_putrs@a	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_7(CODE[21]), STR_6(CODE[21]), STR_5(CODE[21]), STR_2(CODE[21]), 
		 -> STR_1(CODE[21]), 

    LCD_puts@a	PTR unsigned char  size(1) Largest target is 45
		 -> main@current_str(BANK3[45]), 

    display.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    F1209.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    S19$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _sprintf->___lldiv
    _sprintf->__div_to_l_
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___ftge->___bmul
    _LCD_puts->_LCD_putc
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out
    _ADC_Read->___lldiv

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___lltoft
    ___bmul->___awdiv
    ___lltoft->_ADC_Read
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___bmul

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                83    83      0   61727
                                             76 BANK0      2     2      0
                                              0 BANK3     77    77      0
                           _ADC_Init
                           _ADC_Read
                            _IO_Init
                           _LCD_Init
                          _LCD_Write
                          _LCD_putrs
                           _LCD_puts
                             ___bmul
                            ___ftadd
                             ___ftge
                            ___ftmul
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             50    46      4   45861
                                             72 BANK0      4     0      4
                                              0 BANK1     42    42      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    9726
                                             37 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              19    16      3    9528
                                             37 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    5011
                                             21 BANK0     16    10      6
                           _ADC_Read (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     742
                                             12 COMMON     1     1      0
                                              4 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1664
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1820
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     455
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     598
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3048
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2626
                                             15 BANK0      6     2      4
                           _ADC_Read (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     615
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     480
                                             46 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3898
                                             66 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3701
                                             53 BANK0     13     7      6
                           _ADC_Read (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2405
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     896
                                              7 BANK0     12     6      6
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             4     4      0     387
                                              8 COMMON     4     4      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (1) _LCD_putrs                                            3     3      0     387
                                              8 COMMON     3     3      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             4     4      0     132
                                              4 COMMON     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     256
                                              8 COMMON     6     1      5
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Write                                            4     4      0     110
                                              4 COMMON     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (3) _LCD_Out                                              4     4      0      88
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _IO_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                            15    11      4     854
                                              0 BANK0     15    11      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     618
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
     ___lldiv
   _IO_Init
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
     _LCD_Out
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   _LCD_puts
     _LCD_putc
       _LCD_Out
   ___bmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   ___ftadd
     _ADC_Read (ARG)
       ___lldiv
     ___ftmul (ARG)
       _ADC_Read (ARG)
         ___lldiv
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___ftpack (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       _ADC_Read (ARG)
         ___lldiv
       ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
   ___ftge
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftmul
     _ADC_Read (ARG)
       ___lldiv
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       _ADC_Read (ARG)
         ___lldiv
       ___ftpack (ARG)
   ___lltoft
     _ADC_Read (ARG)
       ___lldiv
     ___ftpack (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       _ADC_Read (ARG)
         ___lldiv
       ___ftmul (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           _ADC_Read (ARG)
             ___lldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             _ADC_Read (ARG)
               ___lldiv
             ___ftpack (ARG)
     ___ftge
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       _ADC_Read (ARG)
         ___lldiv
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         _ADC_Read (ARG)
           ___lldiv
         ___ftmul (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             _ADC_Read (ARG)
               ___lldiv
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             _ADC_Read (ARG)
               ___lldiv
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               _ADC_Read (ARG)
                 ___lldiv
               ___ftpack (ARG)
       ___lltoft (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___ftpack (ARG)
     ___fttol
       ___ftmul (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           _ADC_Read (ARG)
             ___lldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             _ADC_Read (ARG)
               ___lldiv
             ___ftpack (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       _ADC_Read (ARG)
         ___lldiv
       ___ftpack (ARG)
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     4D      52       9       85.4%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2A      2F       7       58.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4E      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      DD      12        0.0%
ABS                  0      0      DD       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Jun  4 14:18:53 2015

                      pc 0002           ___bmul@product 0025              __CFG_CP$OFF 0000  
                     l43 0D86                       l44 0D80                       l36 0D5F  
                     l45 0D81                       l37 0D4D                       l48 0DA4  
                     l88 0DC4                       l99 0F34             ___awdiv@sign 0021  
                     fsr 0004      ___wmul@multiplicand 0072             ___ftadd@exp1 0061  
           ___ftadd@exp2 0060             ___ftadd@sign 005F                      l100 0F62  
                    l340 12CE                      l336 12AE                      l424 053E  
                    l338 12C5                      l418 04FE                      l439 0724  
                    l393 01B9                      l722 1282                      l538 1100  
                    l716 1269                      l745 166D                      l771 1534  
                    l696 17AB             __CFG_CPD$OFF 0000          LCD_Init@display 0078  
                    _lcd 00CA                      fsr0 0004                      indf 0000  
           ___awmod@sign 0076             __CFG_FOSC$HS 0000              _sprintf$463 00A9  
            _sprintf$876 00A6             __CFG_LVP$OFF 0000          __end_of_LCD_Out 1502  
                   l3000 050E                     l3002 0527                     l2212 1125  
                   l3020 05B6                     l3100 00E3                     l2142 1242  
                   l2230 1146                     l3014 05A3                     l3102 07D9  
                   l3112 1E9F                     l2152 126E                     l2144 124E  
                   l2304 1604                     l2240 1167                     l3032 05F1  
                   l2170 1471                     l2154 1278                     l2146 1253  
                   l2138 123B                     l2322 1633                     l2218 1130  
                   l3026 05D2                     l2180 14BA                     l2340 167F  
                   l2324 163F                     l2316 161E                     l2244 116F  
                   l2236 115C                     l2228 1138                     l2260 1F69  
                   l3052 070F                     l3204 0E04                     l3140 0D66  
                   l3124 0D33                     l2182 14CF                     l2174 148B  
                   l2334 165D                     l2326 1644                     l2270 1F7D  
                   l2190 0808                     l3062 073C                     l3046 06FE  
                   l3054 0714                     l3214 0F50                     l3134 0D4E  
                   l2176 14A3                     l2168 145A                     l2344 1691  
                   l2336 1669                     l2328 1648                     l2600 17CC  
                   l2256 1F62                     l2504 1E5F                     l3080 0787  
                   l3072 076C                     l3224 0F69                     l3216 0F51  
                   l3152 0D8D                     l2186 14E9                     l2354 16B4  
                   l2610 17F4                     l2602 17DC                     l2514 151C  
                   l2282 1F9E                     l2274 1F8B                     l2194 080E  
                   l2370 0037                     l3066 0756                     l2612 17F7  
                   l2268 1F6F                     l2364 0021                     l2452 0A2A  
                   l2444 09A0                     l3084 07A6                     l3180 0DDD  
                   l2294 15EE                     l2702 1399                     l2278 1F96  
                   l2382 0076                     l3094 07C3                     l3086 07AA  
                   l3078 0783                     l2712 1186                     l2632 11FD  
                   l2608 17E9                     l2536 1575                     l2528 1555  
                   l3088 07AE                     l2722 11BE                     l2714 1196  
                   l2298 15F5                     l2618 10F8                     l2554 15AE  
                   l2546 1591                     l2394 009E                     l2386 0086  
                   l2474 0B90                     l3186 0DE5                     l2636 1224  
                   l2556 15B9                     l2548 15A1                     l2492 0CDC  
                   l2468 0B22                     l3268 0FC9                     l3196 0EDA  
                   l2726 11CB                     l2830 1EBE                     l2742 1F42  
                   l2574 170E                     l2558 15BC                     l2398 00AE  
                   l2486 0C6E                     l2478 0BAF                     l2902 01E1  
                   l2736 1F14                     l2584 1755                     l2568 16EF  
                   l2912 0226                     l2770 083E                     l2738 1F24  
                   l2746 1F4F                     l2754 1EE3                     l2668 132E  
                   l2756 1EF5                     l2940 032E                     l2860 00FD  
                   l2774 0847                     l2766 0834                     l2694 137D  
                   l2686 1360                     l2848 12F8                     l2696 1388  
                   l2688 1370                     l2952 03B2                     l2944 0374  
                   l2936 0307                     l2928 0290                     l2698 138B  
                   l2866 0115                     l2874 0159                     l2972 049A  
                   l2956 03D3                     l2894 01BB                     l2886 0172  
                   l2968 041D                     l2896 01D1                     l2888 01B3  
                   l2986 04DC                     l2978 04A0                     l2998 0508  
                   STR_1 10D0                     STR_2 107C                     STR_3 10E5  
                   STR_4 10EC                     STR_5 10A6                     STR_6 1091  
                   STR_7 10BB                     u3025 165E                     u3105 0043  
                   u3115 0055                     u4005 0830                     u3205 00B7  
                   u4015 083A                     u3224 1FB0                     u3304 1432  
                   u3225 1FAE                     u4025 0844                     u3305 1430  
                   u2425 1247                     u3145 0087                     u3234 1FD0  
                   u3235 1FCE                     u4035 08A2                     u3155 008F  
                   u2524 144D                     u3244 1FF2                     u2525 144B  
                   u3245 1FF0                     u2445 1262                     u2614 14DC  
                   u2534 1464                     u3254 13AD                     u2615 14DA  
                   u2535 1462                     u3255 13AB                     u2624 14F4  
                   u2625 14F2                     u3265 13BC                     u2465 1271  
                   u3425 1557                     u2705 1147                     u4305 04A3  
                   u2554 147E                     u3274 13D5                     u2555 147C  
                   u3275 13D3                     u3515 15B0                     u3435 1568  
                   u2715 1153                     u3195 00AF                     u4315 04D2  
                   u4235 0339                     u2564 1496                     u3284 13F3  
                   u2565 1494                     u3285 13F1                     u3701 11F0  
                   u3605 17CD                     u3445 1576                     u2725 115D  
                   u2805 1F83                     u4405 05CC                     u4245 037F  
                   u3294 1414                     u3702 11F1                     u4095 12CB  
                   u3295 1412                     u3703 11F6                     u2495 1289  
                   u2815 1F8C                     u2584 14AD                     u3704 11F7  
                   u2585 14AB                     u3721 1217                     u4425 0660  
                   u2594 14C2                     u3722 1218                     u2595 14C0  
                   u3723 121D                     u3635 17EB                     u3555 1757  
                   u4435 06C6                     u4355 0517                     u4275 03B0  
                   u4195 023E                     u3724 121E                     u3565 1786  
                   u3485 1592                     u2685 113B                     u2935 161F  
                   u4535 0778                     u4375 0549                     u3905 11BF  
                   u3825 137F                     u3665 1101                     u2785 1F72  
                   u4545 0796                     u3675 1108                     u4395 05BF  
                   u2965 1634                     u3765 1335                     u4485 0733  
                   u3935 1F18                     u4495 074D                     u4735 0E0B  
                   u4807 0D75                     u3865 118A                     u4817 0DCC  
                   u4907 1E95                     u2995 1649                     u3795 1361  
                   u3955 1F32                     u4827 0F43                     u3885 1198  
                   u4837 13E3                     u3965 1F43                     u3895 11AD  
                   u4847 1422                     u4857 084D                     u3985 1EE8  
                   u4867 085E                     u4877 086F                     u4797 0D42  
                   u4887 1FE0                     u4897 12BE              main@current 01BD  
        __end_of_IO_Init 1E53             __CFG_WRT$OFF 0000                     _main 0CFB  
           ___ftpack@arg 0070             ___ftpack@exp 0073                     btemp 007E  
       __end_of_ADC_Init 1E9C         __end_of_ADC_Read 1314            __CFG_BOREN$ON 0000  
                   ltemp 007E                     start 0000                     ttemp 007E  
                   wtemp 007E       __size_of_LCD_Write 005B              LCD_Init@cmd 007D  
      ___bmul@multiplier 0026             ___ftmul@cntr 0043             ___ftmul@sign 0044  
     __size_of_LCD_putrs 0022             ___fttol@exp1 005B             ___fttol@lval 0057  
       __end_of_LCD_Init 08C0         __end_of_LCD_putc 1440         __end_of_LCD_puts 1EBB  
                  ?_main 0070          __end_of___awdiv 1176          __end_of___ftadd 16CE  
          __CFG_WDTE$OFF 0000          __end_of___awmod 1FA5          __end_of___ftneg 1E45  
        __end_of___lldiv 11D4          __end_of___ftmul 00DC          ___awdiv@divisor 0077  
        __end_of___llmod 1F58          __end_of___ftsub 1E7D          __end_of___fttol 13A2  
        ___awdiv@counter 0020                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087             ___lltoft@exp 0034          __end_of_dpowers 102E  
                  _scale 0A5C          __end_of_isdigit 1E61            ___ftpack@sign 0074  
                  main@i 01DB                    pclath 000A                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    ttemp4 007F                    status 0003  
                  wtemp0 007E                    wtemp1 0080                    wtemp2 0082  
                  wtemp3 0084                    wtemp4 0086                    wtemp5 0088  
                  wtemp6 007F          __end_of_sprintf 07DE          __initialization 07DE  
           __end_of_main 1000                   ??_main 006C            ___fttol@sign1 0056  
              ??_LCD_Out 0070     __size_of__tdiv_to_l_ 00C3        __end_of_LCD_Write 2000  
              ??_IO_Init 0070        __end_of_LCD_putrs 1EDD         ___llmod@dividend 0074  
                 ?_scale 0045                   _ADRESH 001E                   _ADRESL 009E  
       ___awdiv@dividend 0079                ADC_Read@i 002C         __end_of___ftpack 129B  
       __end_of___lltoft 1F0C           __CFG_PWRTE$OFF 0000         __end_of__powers_ 107C  
                 ___bmul 0804                   ___ftge 11D4                   ___wmul 10F6  
              ??___awdiv 007B                ??___ftadd 005B                ??___awmod 0074  
              ??___ftneg 0073                ??___lldiv 0078                ??___ftmul 003B  
              ??___llmod 0078                ??___ftsub 007E                ??___fttol 0052  
        ADC_Read@channel 002E            main@screen_id 01DA                   _fround 08C0  
       ___awdiv@quotient 0022          ___awmod@divisor 0070          ___awmod@counter 0075  
  ___ftmul@f3_as_product 0040                ??_isdigit 0070          ADC_Read@samples 0020  
              ?_ADC_Init 0070                ?_ADC_Read 0020                ??_sprintf 00A0  
  main@toggled_backlight 01D2  __end_of__initialization 07FC                ?_LCD_Init 0078  
             ___ftadd@f1 0055               ___ftadd@f2 0058               ___ftge@ff1 0027  
             ___ftge@ff2 002A                ?_LCD_putc 0070                ?_LCD_puts 0070  
             ___ftneg@f1 0070      ___bmul@multiplicand 0024               ___ftmul@f1 0035  
             ___ftmul@f2 0038               ___ftsub@f1 0065               ___ftsub@f2 0062  
             ___fttol@f1 004E           __pcstackCOMMON 0070             __pidataBANK3 0004  
             ___lltoft@c 002F            __end_of_scale 0CFB                LCD_putc@c 0077  
              LCD_puts@a 007B                LCD_puts@i 0079               __div_to_l_ 16CE  
         _OPTION_REGbits 0081               ??_ADC_Init 0070               ??_ADC_Read 0024  
        __div_to_l_@exp1 0025          __div_to_l_@cntr 0024             sprintf@integ 00B6  
                ??_scale 0048          __div_to_l_@quot 0020             sprintf@width 00BF  
             ??_LCD_Init 0020               ??_LCD_putc 0074               ??_LCD_puts 0078  
          __div_to_l_@f1 0070            __div_to_l_@f2 0073               __pmaintext 0CFB  
                ?___bmul 0024                  ?___ftge 0027                  ?___wmul 0070  
                ?_fround 0045                ?___ftpack 0070                ?___lltoft 002F  
                _LCD_Out 1440                  _IO_Init 1E45               __stringtab 1000  
      __end_of__npowers_ 1055          __size_of___bmul 0013          __size_of___ftge 005F  
                ___awdiv 1119                  ___ftadd 15C5                  ___awmod 1F58  
                ___ftneg 1E3D                  ___lldiv 1176          __size_of___wmul 0023  
                ___ftmul 0009                  ___llmod 1F0C                  ___ftsub 1E61  
                ___fttol 1314               _fround$873 0051               _fround$874 004E  
             ??___ftpack 0075          __size_of_fround 019C       main@toggled_screen 01D1  
             ??___lltoft 0033                  __ptext1 00DC                  __ptext2 0A5C  
                __ptext3 1E53                  __ptext4 08C0                  __ptext5 0009  
                __ptext6 0804                  __ptext7 1F58                  __ptext8 1119  
                __ptext9 1502              ?__div_to_l_ 0070                  _dpowers 1006  
                _isdigit 1E53         ___awmod@dividend 0072                  main@lcd 01CC  
                _sprintf 00DC                _LCD_Write 1FA5     end_of_initialization 07FC  
              _LCD_putrs 1EBB          ___lldiv@divisor 0070          ___lldiv@counter 007D  
         __tdiv_to_l_@f1 0070           __tdiv_to_l_@f2 0073            ??__tdiv_to_l_ 0076  
              _PORTBbits 0006                _PORTCbits 0007                _TRISBbits 0086  
              _TRISCbits 0087        __size_of_ADC_Init 001F        __size_of_ADC_Read 0079  
             ?_LCD_Write 0070               ?_LCD_putrs 0070        __size_of_LCD_Init 00A9  
    __size_of__div_to_l_ 0132        __size_of_LCD_putc 009E              ___ftmul@exp 003F  
      __size_of_LCD_puts 001F           __end_of___bmul 0817           __end_of___ftge 1233  
         __end_of___wmul 1119               LCD_Write@c 0077           __end_of_fround 0A5C  
    start_initialization 07DE      __end_of__tdiv_to_l_ 15C5        ADC_Read@ADCResult 0028  
             LCD_putrs@a 007A               LCD_putrs@i 0078          ___llmod@divisor 0070  
        ___llmod@counter 0079                 ??___bmul 007C                 ??___ftge 002D  
               ??___wmul 0074            sprintf@vd_465 00B2              __pdataBANK3 01DD  
               ??_fround 0048               fround@prec 0054        __size_of___ftpack 0068  
               ?_LCD_Out 0070        __size_of___lltoft 002F                ___latbits 0002  
          __pcstackBANK0 0020            __pcstackBANK1 00A0            __pcstackBANK3 0190  
               LCD_Out@c 0073      __end_of__stringdata 10F3                 ?_IO_Init 0070  
            ??_LCD_Write 0074              ??_LCD_putrs 0078              sprintf@_val 00B9  
            sprintf@flag 00BD              sprintf@fval 00C3              sprintf@prec 00C7  
              __pnvBANK1 00CA                 ?___awdiv 0077                 ?___ftadd 0055  
               ?___awmod 0070                 ?___ftneg 0070                 ?___lldiv 0070  
               ?___ftmul 0035                 ?___llmod 0070                 ?___ftsub 0062  
              __npowers_ 102E                 ?___fttol 004E                __pstrings 1000  
            __tdiv_to_l_ 1502             ??__div_to_l_ 0076                 ?_isdigit 0070  
               _ADC_Init 1E7D                 _ADC_Read 129B                _scale$875 004A  
               ?_sprintf 0068           __size_of_scale 029F        main@toggled_power 01D3  
               _LCD_Init 0817           ___wmul@product 0074                 _LCD_putc 13A2  
               _LCD_puts 1E9C       __end_of__div_to_l_ 1800                main@F1209 01DD  
             _ADCON0bits 001F              __stringbase 1005               _ADCON1bits 009F  
            __stringdata 107C        ___wmul@multiplier 0070          main@current_str 0190  
       __size_of_LCD_Out 00C2         __size_of_IO_Init 000E         __size_of___awdiv 005D  
       __size_of___ftadd 0109         __size_of___awmod 004D         __size_of___ftneg 0008  
       __size_of___lldiv 005E         __size_of___ftmul 00D3         __size_of___llmod 004C  
       __size_of___ftsub 001C         __size_of___fttol 008E                 ___ftpack 1233  
     __end_of__stringtab 1006                 ___lltoft 1EDD              _isdigit$663 0070  
      main@start_channel 01D4               sprintf@exp 00C1         __size_of_isdigit 000E  
               _main$877 01D6                 _main$878 01D9                 __ptext10 16CE  
               __ptext11 10F6                 __ptext20 1E9C                 __ptext12 1EDD  
               __ptext21 1EBB                 __ptext13 1F0C                 __ptext22 13A2  
               __ptext14 1314                 __ptext23 0817                 __ptext15 1E61  
               __ptext24 1FA5                 __ptext16 15C5                 __ptext25 1440  
               __ptext17 1233                 __ptext26 1E45                 __ptext18 1E3D  
               __ptext27 129B                 __ptext19 11D4                 __ptext28 1176  
               __ptext29 1E7D                 __powers_ 1055         __size_of_sprintf 0702  
          __size_of_main 0305                 isdigit@c 0071                 scale@scl 004D  
              sprintf@ap 00AD         __tdiv_to_l_@exp1 0025                sprintf@vd 00AE  
       __tdiv_to_l_@cntr 0024                sprintf@sp 00C6         __tdiv_to_l_@quot 0020  
       ___lldiv@dividend 0074                stringcode 1000             ?__tdiv_to_l_ 0070  
               sprintf@c 00C9                 sprintf@f 0068         ___lldiv@quotient 0079  
               stringdir 1000                 stringtab 1000         main@stop_channel 01D5  
