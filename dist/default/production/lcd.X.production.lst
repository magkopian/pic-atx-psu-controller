

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Jul 19 20:49:28 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000D                     	;# 
    59  000E                     	;# 
    60  000E                     	;# 
    61  000F                     	;# 
    62  0010                     	;# 
    63  0011                     	;# 
    64  0012                     	;# 
    65  0013                     	;# 
    66  0014                     	;# 
    67  0015                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001B                     	;# 
    75  001B                     	;# 
    76  001C                     	;# 
    77  001D                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  0081                     	;# 
    81  0085                     	;# 
    82  0086                     	;# 
    83  0087                     	;# 
    84  008C                     	;# 
    85  008D                     	;# 
    86  008E                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0093                     	;# 
    90  0094                     	;# 
    91  0098                     	;# 
    92  0099                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009E                     	;# 
    96  009F                     	;# 
    97  010C                     	;# 
    98  010D                     	;# 
    99  010E                     	;# 
   100  010F                     	;# 
   101  018C                     	;# 
   102  018D                     	;# 
   103  0000                     	;# 
   104  0001                     	;# 
   105  0002                     	;# 
   106  0003                     	;# 
   107  0004                     	;# 
   108  0005                     	;# 
   109  0006                     	;# 
   110  0007                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  000E                     	;# 
   116  000E                     	;# 
   117  000F                     	;# 
   118  0010                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001B                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  0081                     	;# 
   137  0085                     	;# 
   138  0086                     	;# 
   139  0087                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  008E                     	;# 
   143  0091                     	;# 
   144  0092                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009E                     	;# 
   152  009F                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  010F                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000D                     	;# 
   171  000E                     	;# 
   172  000E                     	;# 
   173  000F                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0013                     	;# 
   178  0014                     	;# 
   179  0015                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001B                     	;# 
   187  001B                     	;# 
   188  001C                     	;# 
   189  001D                     	;# 
   190  001E                     	;# 
   191  001F                     	;# 
   192  0081                     	;# 
   193  0085                     	;# 
   194  0086                     	;# 
   195  0087                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215                           
   216                           	psect	idataBANK2
   217  10F3                     __pidataBANK2:	
   218                           
   219                           ;initializer for main@F1211
   220  10F3  3408               	retlw	8
   221  10F4  34AC               	retlw	172
   222  10F5  343D               	retlw	61
   223  10F6  345C               	retlw	92
   224  10F7  340F               	retlw	15
   225  10F8  343D               	retlw	61
   226  10F9  3408               	retlw	8
   227  10FA  34AC               	retlw	172
   228  10FB  343D               	retlw	61
   229  10FC  3448               	retlw	72
   230  10FD  3461               	retlw	97
   231  10FE  343D               	retlw	61
   232  10FF  345C               	retlw	92
   233  1100  340F               	retlw	15
   234  1101  343D               	retlw	61
   235                           
   236                           ;initializer for main@F1213
   237  1102  34B4               	retlw	180
   238  1103  342C               	retlw	44
   239  1104  3442               	retlw	66
   240  1105  34A4               	retlw	164
   241  1106  348F               	retlw	143
   242  1107  3441               	retlw	65
   243  1108  34B4               	retlw	180
   244  1109  342C               	retlw	44
   245  110A  3442               	retlw	66
   246  110B  34B8               	retlw	184
   247  110C  34E1               	retlw	225
   248  110D  3441               	retlw	65
   249  110E  34A4               	retlw	164
   250  110F  348F               	retlw	143
   251  1110  3441               	retlw	65
   252                           
   253                           	psect	idataBANK3
   254  0005                     __pidataBANK3:	
   255                           
   256                           ;initializer for main@F1209
   257  0005  3407               	retlw	7
   258  0006  3400               	retlw	0
   259  0007  341A               	retlw	26
   260  0008  342C               	retlw	44
   261  0009  343E               	retlw	62
   262                           
   263                           	psect	strings
   264  1000                     __pstrings:	
   265  1000                     stringtab:	
   266  1000                     __stringtab:	
   267  1000                     stringcode:	
   268                           ;	String table - string pointers are 1 byte each
   269                           
   270  1000                     stringdir:	
   271  1000  3010               	movlw	high stringdir
   272  1001  008A               	movwf	10
   273  1002  0804               	movf	4,w
   274  1003  0A84               	incf	4,f
   275  1004  0782               	addwf	2,f
   276  1005                     __stringbase:	
   277  1005  3400               	retlw	0
   278  1006                     __end_of__stringtab:	
   279  1006                     _dpowers:	
   280  1006  3401               	retlw	1
   281  1007  3400               	retlw	0
   282  1008  3400               	retlw	0
   283  1009  3400               	retlw	0
   284  100A  340A               	retlw	10
   285  100B  3400               	retlw	0
   286  100C  3400               	retlw	0
   287  100D  3400               	retlw	0
   288  100E  3464               	retlw	100
   289  100F  3400               	retlw	0
   290  1010  3400               	retlw	0
   291  1011  3400               	retlw	0
   292  1012  34E8               	retlw	232
   293  1013  3403               	retlw	3
   294  1014  3400               	retlw	0
   295  1015  3400               	retlw	0
   296  1016  3410               	retlw	16
   297  1017  3427               	retlw	39
   298  1018  3400               	retlw	0
   299  1019  3400               	retlw	0
   300  101A  34A0               	retlw	160
   301  101B  3486               	retlw	134
   302  101C  3401               	retlw	1
   303  101D  3400               	retlw	0
   304  101E  3440               	retlw	64
   305  101F  3442               	retlw	66
   306  1020  340F               	retlw	15
   307  1021  3400               	retlw	0
   308  1022  3480               	retlw	128
   309  1023  3496               	retlw	150
   310  1024  3498               	retlw	152
   311  1025  3400               	retlw	0
   312  1026  3400               	retlw	0
   313  1027  34E1               	retlw	225
   314  1028  34F5               	retlw	245
   315  1029  3405               	retlw	5
   316  102A  3400               	retlw	0
   317  102B  34CA               	retlw	202
   318  102C  349A               	retlw	154
   319  102D  343B               	retlw	59
   320  102E                     __end_of_dpowers:	
   321  102E                     __npowers_:	
   322  102E  3400               	retlw	0
   323  102F  3480               	retlw	128
   324  1030  343F               	retlw	63
   325  1031  34CD               	retlw	205
   326  1032  34CC               	retlw	204
   327  1033  343D               	retlw	61
   328  1034  34D7               	retlw	215
   329  1035  3423               	retlw	35
   330  1036  343C               	retlw	60
   331  1037  3412               	retlw	18
   332  1038  3483               	retlw	131
   333  1039  343A               	retlw	58
   334  103A  34B7               	retlw	183
   335  103B  34D1               	retlw	209
   336  103C  3438               	retlw	56
   337  103D  34C6               	retlw	198
   338  103E  3427               	retlw	39
   339  103F  3437               	retlw	55
   340  1040  3438               	retlw	56
   341  1041  3486               	retlw	134
   342  1042  3435               	retlw	53
   343  1043  34C0               	retlw	192
   344  1044  34D6               	retlw	214
   345  1045  3433               	retlw	51
   346  1046  34CC               	retlw	204
   347  1047  342B               	retlw	43
   348  1048  3432               	retlw	50
   349  1049  3470               	retlw	112
   350  104A  3489               	retlw	137
   351  104B  3430               	retlw	48
   352  104C  34E7               	retlw	231
   353  104D  34DB               	retlw	219
   354  104E  342E               	retlw	46
   355  104F  34E5               	retlw	229
   356  1050  343C               	retlw	60
   357  1051  341E               	retlw	30
   358  1052  3442               	retlw	66
   359  1053  34A2               	retlw	162
   360  1054  340D               	retlw	13
   361  1055                     __end_of__npowers_:	
   362  1055                     __powers_:	
   363  1055  3400               	retlw	0
   364  1056  3480               	retlw	128
   365  1057  343F               	retlw	63
   366  1058  3400               	retlw	0
   367  1059  3420               	retlw	32
   368  105A  3441               	retlw	65
   369  105B  3400               	retlw	0
   370  105C  34C8               	retlw	200
   371  105D  3442               	retlw	66
   372  105E  3400               	retlw	0
   373  105F  347A               	retlw	122
   374  1060  3444               	retlw	68
   375  1061  3440               	retlw	64
   376  1062  341C               	retlw	28
   377  1063  3446               	retlw	70
   378  1064  3450               	retlw	80
   379  1065  34C3               	retlw	195
   380  1066  3447               	retlw	71
   381  1067  3424               	retlw	36
   382  1068  3474               	retlw	116
   383  1069  3449               	retlw	73
   384  106A  3497               	retlw	151
   385  106B  3418               	retlw	24
   386  106C  344B               	retlw	75
   387  106D  34BC               	retlw	188
   388  106E  34BE               	retlw	190
   389  106F  344C               	retlw	76
   390  1070  346B               	retlw	107
   391  1071  346E               	retlw	110
   392  1072  344E               	retlw	78
   393  1073  3403               	retlw	3
   394  1074  3415               	retlw	21
   395  1075  3450               	retlw	80
   396  1076  3479               	retlw	121
   397  1077  34AD               	retlw	173
   398  1078  3460               	retlw	96
   399  1079  34F3               	retlw	243
   400  107A  3449               	retlw	73
   401  107B  3471               	retlw	113
   402  107C                     __end_of__powers_:	
   403  107C                     __stringdata:	
   404  107C                     STR_2:	
   405  107C  3420               	retlw	32	;' '
   406  107D  3420               	retlw	32	;' '
   407  107E  3420               	retlw	32	;' '
   408  107F  3420               	retlw	32	;' '
   409  1080  3420               	retlw	32	;' '
   410  1081  3420               	retlw	32	;' '
   411  1082  3420               	retlw	32	;' '
   412  1083  3420               	retlw	32	;' '
   413  1084  342A               	retlw	42	;'*'
   414  1085  342A               	retlw	42	;'*'
   415  1086  342A               	retlw	42	;'*'
   416  1087  342A               	retlw	42	;'*'
   417  1088  3420               	retlw	32	;' '
   418  1089  3420               	retlw	32	;' '
   419  108A  3420               	retlw	32	;' '
   420  108B  3420               	retlw	32	;' '
   421  108C  3420               	retlw	32	;' '
   422  108D  3420               	retlw	32	;' '
   423  108E  3420               	retlw	32	;' '
   424  108F  3420               	retlw	32	;' '
   425  1090  3400               	retlw	0
   426  1091                     STR_6:	
   427  1091  3420               	retlw	32	;' '
   428  1092  3420               	retlw	32	;' '
   429  1093  3420               	retlw	32	;' '
   430  1094  3420               	retlw	32	;' '
   431  1095  3420               	retlw	32	;' '
   432  1096  3420               	retlw	32	;' '
   433  1097  3420               	retlw	32	;' '
   434  1098  3420               	retlw	32	;' '
   435  1099  3433               	retlw	51	;'3'
   436  109A  342E               	retlw	46	;'.'
   437  109B  3433               	retlw	51	;'3'
   438  109C  3456               	retlw	86	;'V'
   439  109D  3420               	retlw	32	;' '
   440  109E  3420               	retlw	32	;' '
   441  109F  3420               	retlw	32	;' '
   442  10A0  3420               	retlw	32	;' '
   443  10A1  3420               	retlw	32	;' '
   444  10A2  3420               	retlw	32	;' '
   445  10A3  3420               	retlw	32	;' '
   446  10A4  3420               	retlw	32	;' '
   447  10A5  3400               	retlw	0
   448  10A6                     STR_5:	
   449  10A6  3420               	retlw	32	;' '
   450  10A7  3420               	retlw	32	;' '
   451  10A8  3420               	retlw	32	;' '
   452  10A9  3420               	retlw	32	;' '
   453  10AA  3435               	retlw	53	;'5'
   454  10AB  3456               	retlw	86	;'V'
   455  10AC  3420               	retlw	32	;' '
   456  10AD  3420               	retlw	32	;' '
   457  10AE  3420               	retlw	32	;' '
   458  10AF  3420               	retlw	32	;' '
   459  10B0  3420               	retlw	32	;' '
   460  10B1  3420               	retlw	32	;' '
   461  10B2  3420               	retlw	32	;' '
   462  10B3  342D               	retlw	45	;'-'
   463  10B4  3435               	retlw	53	;'5'
   464  10B5  3456               	retlw	86	;'V'
   465  10B6  3420               	retlw	32	;' '
   466  10B7  3420               	retlw	32	;' '
   467  10B8  3420               	retlw	32	;' '
   468  10B9  3420               	retlw	32	;' '
   469  10BA  3400               	retlw	0
   470  10BB                     STR_7:	
   471  10BB  3420               	retlw	32	;' '
   472  10BC  3420               	retlw	32	;' '
   473  10BD  3420               	retlw	32	;' '
   474  10BE  3420               	retlw	32	;' '
   475  10BF  3431               	retlw	49	;'1'
   476  10C0  3432               	retlw	50	;'2'
   477  10C1  3456               	retlw	86	;'V'
   478  10C2  3420               	retlw	32	;' '
   479  10C3  3420               	retlw	32	;' '
   480  10C4  3420               	retlw	32	;' '
   481  10C5  3420               	retlw	32	;' '
   482  10C6  3420               	retlw	32	;' '
   483  10C7  3420               	retlw	32	;' '
   484  10C8  342D               	retlw	45	;'-'
   485  10C9  3431               	retlw	49	;'1'
   486  10CA  3432               	retlw	50	;'2'
   487  10CB  3456               	retlw	86	;'V'
   488  10CC  3420               	retlw	32	;' '
   489  10CD  3420               	retlw	32	;' '
   490  10CE  3420               	retlw	32	;' '
   491  10CF  3400               	retlw	0
   492  10D0                     STR_1:	
   493  10D0  3420               	retlw	32	;' '
   494  10D1  342A               	retlw	42	;'*'
   495  10D2  342A               	retlw	42	;'*'
   496  10D3  342A               	retlw	42	;'*'
   497  10D4  3420               	retlw	32	;' '
   498  10D5  3420               	retlw	32	;' '
   499  10D6  3453               	retlw	83	;'S'
   500  10D7  3454               	retlw	84	;'T'
   501  10D8  3441               	retlw	65	;'A'
   502  10D9  344E               	retlw	78	;'N'
   503  10DA  3444               	retlw	68	;'D'
   504  10DB  3420               	retlw	32	;' '
   505  10DC  3442               	retlw	66	;'B'
   506  10DD  3459               	retlw	89	;'Y'
   507  10DE  3420               	retlw	32	;' '
   508  10DF  3420               	retlw	32	;' '
   509  10E0  342A               	retlw	42	;'*'
   510  10E1  342A               	retlw	42	;'*'
   511  10E2  342A               	retlw	42	;'*'
   512  10E3  3420               	retlw	32	;' '
   513  10E4  3400               	retlw	0
   514  10E5                     STR_3:	
   515  10E5  3425               	retlw	37	;'%'
   516  10E6  3436               	retlw	54	;'6'
   517  10E7  342E               	retlw	46	;'.'
   518  10E8  3433               	retlw	51	;'3'
   519  10E9  3466               	retlw	102	;'f'
   520  10EA  3441               	retlw	65	;'A'
   521  10EB  3400               	retlw	0
   522  10EC                     STR_4:	
   523  10EC  3425               	retlw	37	;'%'
   524  10ED  3437               	retlw	55	;'7'
   525  10EE  342E               	retlw	46	;'.'
   526  10EF  3433               	retlw	51	;'3'
   527  10F0  3466               	retlw	102	;'f'
   528  10F1  3441               	retlw	65	;'A'
   529  10F2  3400               	retlw	0
   530  10F3                     __end_of__stringdata:	
   531                           
   532                           ; #config settings
   533  0000                     
   534                           	psect	nvBANK3
   535  01D9                     __pnvBANK3:	
   536  01D9                     _lcd:	
   537  01D9                     	ds	5
   538  001F                     _ADCON0bits	set	31
   539  001E                     _ADRESH	set	30
   540  0005                     _PORTA	set	5
   541  0006                     _PORTB	set	6
   542  0006                     _PORTBbits	set	6
   543  0007                     _PORTCbits	set	7
   544  0007                     _PORTC	set	7
   545  009F                     _ADCON1bits	set	159
   546  009E                     _ADRESL	set	158
   547  0081                     _OPTION_REGbits	set	129
   548  0085                     _TRISA	set	133
   549  0086                     _TRISB	set	134
   550  0086                     _TRISBbits	set	134
   551  0087                     _TRISC	set	135
   552  0087                     _TRISCbits	set	135
   553                           
   554                           	psect	cinit
   555  07E3                     start_initialization:	
   556  07E3                     __initialization:	
   557                           
   558                           ; Initialize objects allocated to BANK3
   559  07E3  1783               	bsf	3,7	;select IRP bank2
   560  07E4  30E3               	movlw	low (__pdataBANK3+5)
   561  07E5  00FD               	movwf	btemp+-1
   562  07E6  3000               	movlw	high __pidataBANK3
   563  07E7  00FE               	movwf	btemp
   564  07E8  3005               	movlw	low __pidataBANK3
   565  07E9  00FF               	movwf	btemp+1
   566  07EA  30DE               	movlw	low __pdataBANK3
   567  07EB  0084               	movwf	4
   568  07EC  160A  158A  25A5  120A  118A  	fcall	init_ram0
   569                           
   570                           ; Initialize objects allocated to BANK2
   571  07F1  302E               	movlw	low (__pdataBANK2+30)
   572  07F2  00FD               	movwf	btemp+-1
   573  07F3  3010               	movlw	high __pidataBANK2
   574  07F4  00FE               	movwf	btemp
   575  07F5  30F3               	movlw	low __pidataBANK2
   576  07F6  00FF               	movwf	btemp+1
   577  07F7  3010               	movlw	low __pdataBANK2
   578  07F8  0084               	movwf	4
   579  07F9  160A  158A  25A5   	fcall	init_ram0
   580  07FC                     end_of_initialization:	
   581                           ;End of C runtime variable initialization code
   582                           
   583  07FC                     __end_of__initialization:	
   584  07FC  0183               	clrf	3
   585  07FD  120A  158A  2C7E   	ljmp	_main	;jump to C main() function
   586                           
   587                           	psect	dataBANK3
   588  01DE                     __pdataBANK3:	
   589  01DE                     main@F1209:	
   590  01DE                     	ds	5
   591                           
   592                           	psect	dataBANK2
   593  0110                     __pdataBANK2:	
   594  0110                     main@F1211:	
   595  0110                     	ds	15
   596  011F                     main@F1213:	
   597  011F                     	ds	15
   598                           
   599                           	psect	inittext
   600  1DA1                     init_fetch0:	
   601                           ;	Called with low address in FSR and high address in W
   602                           
   603  1DA1  087E               	movf	126,w
   604  1DA2  008A               	movwf	10
   605  1DA3  087F               	movf	127,w
   606  1DA4  0082               	movwf	2
   607  1DA5                     init_ram0:	
   608                           ;Called with:
   609                           ;	high address of idata address in btemp 
   610                           ;	low address of idata address in btemp+1 
   611                           ;	low address of data in FSR
   612                           ;	high address + 1 of data in btemp-1
   613                           
   614  1DA5  25A1  160A  158A   	fcall	init_fetch0
   615  1DA8  0080               	movwf	0
   616  1DA9  0A84               	incf	4,f
   617  1DAA  0804               	movf	4,w
   618  1DAB  067D               	xorwf	125,w
   619  1DAC  1903               	btfsc	3,2
   620  1DAD  3400               	retlw	0
   621  1DAE  0AFF               	incf	127,f
   622  1DAF  1903               	btfsc	3,2
   623  1DB0  0AFE               	incf	126,f
   624  1DB1  2DA5               	goto	init_ram0
   625                           
   626                           	psect	cstackBANK3
   627  0190                     __pcstackBANK3:	
   628  0190                     main@current_str:	
   629                           
   630                           ; 45 bytes @ 0x0
   631  0190                     	ds	45
   632  01BD                     main@current:	
   633                           
   634                           ; 15 bytes @ 0x2D
   635  01BD                     	ds	15
   636  01CC                     main@lcd:	
   637                           
   638                           ; 5 bytes @ 0x3C
   639  01CC                     	ds	5
   640  01D1                     main@stop_channel:	
   641                           
   642                           ; 1 bytes @ 0x41
   643  01D1                     	ds	1
   644  01D2                     _main$881:	
   645                           
   646                           ; 3 bytes @ 0x42
   647  01D2                     	ds	3
   648  01D5                     _main$882:	
   649                           
   650                           ; 1 bytes @ 0x45
   651  01D5                     	ds	1
   652  01D6                     main@screen_id:	
   653                           
   654                           ; 1 bytes @ 0x46
   655  01D6                     	ds	1
   656  01D7                     main@i:	
   657                           
   658                           ; 2 bytes @ 0x47
   659  01D7                     	ds	2
   660                           
   661                           	psect	cstackBANK1
   662  00A0                     __pcstackBANK1:	
   663  00A0                     ??_sprintf:	
   664                           
   665                           ; 0 bytes @ 0x0
   666  00A0                     	ds	6
   667  00A6                     _sprintf$880:	
   668                           
   669                           ; 3 bytes @ 0x6
   670  00A6                     	ds	3
   671  00A9                     _sprintf$467:	
   672                           
   673                           ; 4 bytes @ 0x9
   674  00A9                     	ds	4
   675  00AD                     sprintf@ap:	
   676                           
   677                           ; 1 bytes @ 0xD
   678  00AD                     	ds	1
   679  00AE                     sprintf@vd:	
   680                           
   681                           ; 4 bytes @ 0xE
   682  00AE                     	ds	4
   683  00B2                     sprintf@vd_469:	
   684                           
   685                           ; 4 bytes @ 0x12
   686  00B2                     	ds	4
   687  00B6                     sprintf@integ:	
   688                           
   689                           ; 3 bytes @ 0x16
   690  00B6                     	ds	3
   691  00B9                     sprintf@_val:	
   692                           
   693                           ; 4 bytes @ 0x19
   694  00B9                     	ds	4
   695  00BD                     sprintf@flag:	
   696                           
   697                           ; 2 bytes @ 0x1D
   698  00BD                     	ds	2
   699  00BF                     sprintf@width:	
   700                           
   701                           ; 2 bytes @ 0x1F
   702  00BF                     	ds	2
   703  00C1                     sprintf@exp:	
   704                           
   705                           ; 2 bytes @ 0x21
   706  00C1                     	ds	2
   707  00C3                     sprintf@fval:	
   708                           
   709                           ; 3 bytes @ 0x23
   710  00C3                     	ds	3
   711  00C6                     sprintf@sp:	
   712                           
   713                           ; 1 bytes @ 0x26
   714  00C6                     	ds	1
   715  00C7                     sprintf@prec:	
   716                           
   717                           ; 2 bytes @ 0x27
   718  00C7                     	ds	2
   719  00C9                     sprintf@c:	
   720                           
   721                           ; 1 bytes @ 0x29
   722  00C9                     	ds	1
   723  00CA                     ??_main:	
   724                           
   725                           ; 0 bytes @ 0x2A
   726  00CA                     	ds	6
   727  00D0                     main@current_mult:	
   728                           
   729                           ; 15 bytes @ 0x30
   730  00D0                     	ds	15
   731  00DF                     main@current_sub:	
   732                           
   733                           ; 15 bytes @ 0x3F
   734  00DF                     	ds	15
   735  00EE                     main@toggled_power:	
   736                           
   737                           ; 1 bytes @ 0x4E
   738  00EE                     	ds	1
   739  00EF                     main@start_channel:	
   740                           
   741                           ; 1 bytes @ 0x4F
   742  00EF                     	ds	1
   743                           
   744                           	psect	cstackCOMMON
   745  0070                     __pcstackCOMMON:	
   746  0070                     ?_ADC_Init:	
   747  0070                     ??_ADC_Init:	
   748                           ; 0 bytes @ 0x0
   749                           
   750  0070                     ?_IO_Init:	
   751                           ; 0 bytes @ 0x0
   752                           
   753  0070                     ??_IO_Init:	
   754                           ; 0 bytes @ 0x0
   755                           
   756  0070                     ?_LCD_Write:	
   757                           ; 0 bytes @ 0x0
   758                           
   759  0070                     ?_LCD_putrs:	
   760                           ; 0 bytes @ 0x0
   761                           
   762  0070                     ?_LCD_puts:	
   763                           ; 0 bytes @ 0x0
   764                           
   765  0070                     ?_isdigit:	
   766                           ; 0 bytes @ 0x0
   767                           
   768  0070                     ??_isdigit:	
   769                           ; 1 bit 
   770                           
   771  0070                     ?_LCD_Out:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ??_LCD_Out:	
   775                           ; 0 bytes @ 0x0
   776                           
   777  0070                     ?_LCD_putc:	
   778                           ; 0 bytes @ 0x0
   779                           
   780  0070                     ?_main:	
   781                           ; 0 bytes @ 0x0
   782                           
   783  0070                     ?___wmul:	
   784                           ; 2 bytes @ 0x0
   785                           
   786  0070                     ?___awmod:	
   787                           ; 2 bytes @ 0x0
   788                           
   789  0070                     ?___ftpack:	
   790                           ; 2 bytes @ 0x0
   791                           
   792  0070                     ?__tdiv_to_l_:	
   793                           ; 3 bytes @ 0x0
   794                           
   795  0070                     ?__div_to_l_:	
   796                           ; 4 bytes @ 0x0
   797                           
   798  0070                     ?___lldiv:	
   799                           ; 4 bytes @ 0x0
   800                           
   801  0070                     ?___llmod:	
   802                           ; 4 bytes @ 0x0
   803                           
   804  0070                     _isdigit$667:	
   805                           ; 4 bytes @ 0x0
   806                           
   807  0070                     ___wmul@multiplier:	
   808                           ; 1 bytes @ 0x0
   809                           
   810  0070                     ___awmod@divisor:	
   811                           ; 2 bytes @ 0x0
   812                           
   813  0070                     __div_to_l_@f1:	
   814                           ; 2 bytes @ 0x0
   815                           
   816  0070                     ___ftpack@arg:	
   817                           ; 3 bytes @ 0x0
   818                           
   819  0070                     __tdiv_to_l_@f1:	
   820                           ; 3 bytes @ 0x0
   821                           
   822  0070                     ___lldiv@divisor:	
   823                           ; 3 bytes @ 0x0
   824                           
   825  0070                     ___llmod@divisor:	
   826                           ; 4 bytes @ 0x0
   827                           
   828                           
   829                           ; 4 bytes @ 0x0
   830  0070                     	ds	1
   831  0071                     isdigit@c:	
   832                           
   833                           ; 1 bytes @ 0x1
   834  0071                     	ds	1
   835  0072                     ___wmul@multiplicand:	
   836  0072                     ___awmod@dividend:	
   837                           ; 2 bytes @ 0x2
   838                           
   839                           
   840                           ; 2 bytes @ 0x2
   841  0072                     	ds	1
   842  0073                     LCD_Out@c:	
   843  0073                     ___ftpack@exp:	
   844                           ; 1 bytes @ 0x3
   845                           
   846  0073                     __div_to_l_@f2:	
   847                           ; 1 bytes @ 0x3
   848                           
   849  0073                     __tdiv_to_l_@f2:	
   850                           ; 3 bytes @ 0x3
   851                           
   852                           
   853                           ; 3 bytes @ 0x3
   854  0073                     	ds	1
   855  0074                     ??_LCD_Write:	
   856  0074                     ??_LCD_putc:	
   857                           ; 0 bytes @ 0x4
   858                           
   859  0074                     ??___wmul:	
   860                           ; 0 bytes @ 0x4
   861                           
   862  0074                     ??___awmod:	
   863                           ; 0 bytes @ 0x4
   864                           
   865  0074                     ___ftpack@sign:	
   866                           ; 0 bytes @ 0x4
   867                           
   868  0074                     ___wmul@product:	
   869                           ; 1 bytes @ 0x4
   870                           
   871  0074                     ___lldiv@dividend:	
   872                           ; 2 bytes @ 0x4
   873                           
   874  0074                     ___llmod@dividend:	
   875                           ; 4 bytes @ 0x4
   876                           
   877                           
   878                           ; 4 bytes @ 0x4
   879  0074                     	ds	1
   880  0075                     ??___ftpack:	
   881  0075                     ___awmod@counter:	
   882                           ; 0 bytes @ 0x5
   883                           
   884                           
   885                           ; 1 bytes @ 0x5
   886  0075                     	ds	1
   887  0076                     ??__tdiv_to_l_:	
   888  0076                     ??__div_to_l_:	
   889                           ; 0 bytes @ 0x6
   890                           
   891  0076                     ___awmod@sign:	
   892                           ; 0 bytes @ 0x6
   893                           
   894                           
   895                           ; 1 bytes @ 0x6
   896  0076                     	ds	1
   897  0077                     ?___awdiv:	
   898  0077                     LCD_Write@c:	
   899                           ; 2 bytes @ 0x7
   900                           
   901  0077                     LCD_putc@c:	
   902                           ; 1 bytes @ 0x7
   903                           
   904  0077                     ___awdiv@divisor:	
   905                           ; 1 bytes @ 0x7
   906                           
   907                           
   908                           ; 2 bytes @ 0x7
   909  0077                     	ds	1
   910  0078                     ??_LCD_putrs:	
   911  0078                     ??_LCD_puts:	
   912                           ; 0 bytes @ 0x8
   913                           
   914  0078                     ??___lldiv:	
   915                           ; 0 bytes @ 0x8
   916                           
   917  0078                     ??___llmod:	
   918                           ; 0 bytes @ 0x8
   919                           
   920  0078                     ?_LCD_Init:	
   921                           ; 0 bytes @ 0x8
   922                           
   923  0078                     LCD_putrs@i:	
   924                           ; 1 bytes @ 0x8
   925                           
   926  0078                     LCD_Init@display:	
   927                           ; 2 bytes @ 0x8
   928                           
   929                           
   930                           ; 5 bytes @ 0x8
   931  0078                     	ds	1
   932  0079                     ___llmod@counter:	
   933  0079                     LCD_puts@i:	
   934                           ; 1 bytes @ 0x9
   935                           
   936  0079                     ___awdiv@dividend:	
   937                           ; 2 bytes @ 0x9
   938                           
   939  0079                     ___lldiv@quotient:	
   940                           ; 2 bytes @ 0x9
   941                           
   942                           
   943                           ; 4 bytes @ 0x9
   944  0079                     	ds	1
   945  007A                     LCD_putrs@a:	
   946                           
   947                           ; 1 bytes @ 0xA
   948  007A                     	ds	1
   949  007B                     ??___awdiv:	
   950  007B                     LCD_puts@a:	
   951                           ; 0 bytes @ 0xB
   952                           
   953                           
   954                           ; 1 bytes @ 0xB
   955  007B                     	ds	1
   956  007C                     ??___bmul:	
   957                           
   958                           ; 0 bytes @ 0xC
   959  007C                     	ds	1
   960  007D                     ??___ftneg:	
   961  007D                     LCD_Init@cmd:	
   962                           ; 0 bytes @ 0xD
   963                           
   964  007D                     ___lldiv@counter:	
   965                           ; 1 bytes @ 0xD
   966                           
   967                           
   968                           ; 1 bytes @ 0xD
   969  007D                     	ds	1
   970  007E                     ??___ftsub:	
   971                           
   972                           	psect	cstackBANK0
   973  0020                     __pcstackBANK0:	
   974                           ; 0 bytes @ 0xE
   975                           
   976  0020                     ??_LCD_Init:	
   977  0020                     ?_ADC_Read:	
   978                           ; 0 bytes @ 0x0
   979                           
   980  0020                     ___awdiv@counter:	
   981                           ; 4 bytes @ 0x0
   982                           
   983  0020                     ADC_Read@samples:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0020                     __div_to_l_@quot:	
   987                           ; 2 bytes @ 0x0
   988                           
   989  0020                     __tdiv_to_l_@quot:	
   990                           ; 4 bytes @ 0x0
   991                           
   992                           
   993                           ; 4 bytes @ 0x0
   994  0020                     	ds	1
   995  0021                     ___awdiv@sign:	
   996                           
   997                           ; 1 bytes @ 0x1
   998  0021                     	ds	1
   999  0022                     ___awdiv@quotient:	
  1000                           
  1001                           ; 2 bytes @ 0x2
  1002  0022                     	ds	2
  1003  0024                     ??_ADC_Read:	
  1004  0024                     ?___bmul:	
  1005                           ; 0 bytes @ 0x4
  1006                           
  1007  0024                     ___bmul@multiplicand:	
  1008                           ; 1 bytes @ 0x4
  1009                           
  1010  0024                     __div_to_l_@cntr:	
  1011                           ; 1 bytes @ 0x4
  1012                           
  1013  0024                     __tdiv_to_l_@cntr:	
  1014                           ; 1 bytes @ 0x4
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0x4
  1018  0024                     	ds	1
  1019  0025                     ___bmul@product:	
  1020  0025                     __div_to_l_@exp1:	
  1021                           ; 1 bytes @ 0x5
  1022                           
  1023  0025                     __tdiv_to_l_@exp1:	
  1024                           ; 1 bytes @ 0x5
  1025                           
  1026                           
  1027                           ; 1 bytes @ 0x5
  1028  0025                     	ds	1
  1029  0026                     ___bmul@multiplier:	
  1030                           
  1031                           ; 1 bytes @ 0x6
  1032  0026                     	ds	1
  1033  0027                     ?___ftge:	
  1034  0027                     ?___ftneg:	
  1035                           ; 1 bit 
  1036                           
  1037  0027                     ___ftge@ff1:	
  1038                           ; 3 bytes @ 0x7
  1039                           
  1040  0027                     ___ftneg@f1:	
  1041                           ; 3 bytes @ 0x7
  1042                           
  1043                           
  1044                           ; 3 bytes @ 0x7
  1045  0027                     	ds	1
  1046  0028                     ADC_Read@ADCResult:	
  1047                           
  1048                           ; 4 bytes @ 0x8
  1049  0028                     	ds	2
  1050  002A                     ___ftge@ff2:	
  1051                           
  1052                           ; 3 bytes @ 0xA
  1053  002A                     	ds	2
  1054  002C                     ADC_Read@i:	
  1055                           
  1056                           ; 2 bytes @ 0xC
  1057  002C                     	ds	1
  1058  002D                     ??___ftge:	
  1059                           
  1060                           ; 0 bytes @ 0xD
  1061  002D                     	ds	1
  1062  002E                     ADC_Read@channel:	
  1063                           
  1064                           ; 1 bytes @ 0xE
  1065  002E                     	ds	1
  1066  002F                     ?___lltoft:	
  1067  002F                     ___lltoft@c:	
  1068                           ; 3 bytes @ 0xF
  1069                           
  1070                           
  1071                           ; 4 bytes @ 0xF
  1072  002F                     	ds	4
  1073  0033                     ??___lltoft:	
  1074                           
  1075                           ; 0 bytes @ 0x13
  1076  0033                     	ds	1
  1077  0034                     ___lltoft@exp:	
  1078                           
  1079                           ; 1 bytes @ 0x14
  1080  0034                     	ds	1
  1081  0035                     ?___ftmul:	
  1082  0035                     ___ftmul@f1:	
  1083                           ; 3 bytes @ 0x15
  1084                           
  1085                           
  1086                           ; 3 bytes @ 0x15
  1087  0035                     	ds	3
  1088  0038                     ___ftmul@f2:	
  1089                           
  1090                           ; 3 bytes @ 0x18
  1091  0038                     	ds	3
  1092  003B                     ??___ftmul:	
  1093                           
  1094                           ; 0 bytes @ 0x1B
  1095  003B                     	ds	4
  1096  003F                     ___ftmul@exp:	
  1097                           
  1098                           ; 1 bytes @ 0x1F
  1099  003F                     	ds	1
  1100  0040                     ___ftmul@f3_as_product:	
  1101                           
  1102                           ; 3 bytes @ 0x20
  1103  0040                     	ds	3
  1104  0043                     ___ftmul@cntr:	
  1105                           
  1106                           ; 1 bytes @ 0x23
  1107  0043                     	ds	1
  1108  0044                     ___ftmul@sign:	
  1109                           
  1110                           ; 1 bytes @ 0x24
  1111  0044                     	ds	1
  1112  0045                     ?_fround:	
  1113  0045                     ?_scale:	
  1114                           ; 3 bytes @ 0x25
  1115                           
  1116                           
  1117                           ; 3 bytes @ 0x25
  1118  0045                     	ds	3
  1119  0048                     ??_fround:	
  1120  0048                     ??_scale:	
  1121                           ; 0 bytes @ 0x28
  1122                           
  1123                           
  1124                           ; 0 bytes @ 0x28
  1125  0048                     	ds	2
  1126  004A                     _scale$879:	
  1127                           
  1128                           ; 3 bytes @ 0x2A
  1129  004A                     	ds	3
  1130  004D                     scale@scl:	
  1131                           
  1132                           ; 1 bytes @ 0x2D
  1133  004D                     	ds	1
  1134  004E                     ?___fttol:	
  1135  004E                     ___fttol@f1:	
  1136                           ; 4 bytes @ 0x2E
  1137                           
  1138  004E                     _fround$878:	
  1139                           ; 3 bytes @ 0x2E
  1140                           
  1141                           
  1142                           ; 3 bytes @ 0x2E
  1143  004E                     	ds	3
  1144  0051                     _fround$877:	
  1145                           
  1146                           ; 3 bytes @ 0x31
  1147  0051                     	ds	1
  1148  0052                     ??___fttol:	
  1149                           
  1150                           ; 0 bytes @ 0x32
  1151  0052                     	ds	2
  1152  0054                     fround@prec:	
  1153                           
  1154                           ; 1 bytes @ 0x34
  1155  0054                     	ds	1
  1156  0055                     ?___ftadd:	
  1157  0055                     ___ftadd@f1:	
  1158                           ; 3 bytes @ 0x35
  1159                           
  1160                           
  1161                           ; 3 bytes @ 0x35
  1162  0055                     	ds	1
  1163  0056                     ___fttol@sign1:	
  1164                           
  1165                           ; 1 bytes @ 0x36
  1166  0056                     	ds	1
  1167  0057                     ___fttol@lval:	
  1168                           
  1169                           ; 4 bytes @ 0x37
  1170  0057                     	ds	1
  1171  0058                     ___ftadd@f2:	
  1172                           
  1173                           ; 3 bytes @ 0x38
  1174  0058                     	ds	3
  1175  005B                     ??___ftadd:	
  1176  005B                     ___fttol@exp1:	
  1177                           ; 0 bytes @ 0x3B
  1178                           
  1179                           
  1180                           ; 1 bytes @ 0x3B
  1181  005B                     	ds	4
  1182  005F                     ___ftadd@sign:	
  1183                           
  1184                           ; 1 bytes @ 0x3F
  1185  005F                     	ds	1
  1186  0060                     ___ftadd@exp2:	
  1187                           
  1188                           ; 1 bytes @ 0x40
  1189  0060                     	ds	1
  1190  0061                     ___ftadd@exp1:	
  1191                           
  1192                           ; 1 bytes @ 0x41
  1193  0061                     	ds	1
  1194  0062                     ?___ftsub:	
  1195  0062                     ___ftsub@f2:	
  1196                           ; 3 bytes @ 0x42
  1197                           
  1198                           
  1199                           ; 3 bytes @ 0x42
  1200  0062                     	ds	3
  1201  0065                     ___ftsub@f1:	
  1202                           
  1203                           ; 3 bytes @ 0x45
  1204  0065                     	ds	3
  1205  0068                     ?_sprintf:	
  1206  0068                     sprintf@f:	
  1207                           ; 2 bytes @ 0x48
  1208                           
  1209                           
  1210                           ; 1 bytes @ 0x48
  1211  0068                     	ds	4
  1212  006C                     main@toggled_screen:	
  1213                           
  1214                           ; 1 bytes @ 0x4C
  1215  006C                     	ds	1
  1216  006D                     main@toggled_backlight:	
  1217                           
  1218                           ; 1 bytes @ 0x4D
  1219  006D                     	ds	1
  1220                           
  1221                           	psect	maintext
  1222  0C7E                     __pmaintext:	
  1223 ;;
  1224 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1225 ;;
  1226 ;; *************** function _main *****************
  1227 ;; Defined at:
  1228 ;;		line 69 in file "main.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;		None
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  i               2   71[BANK3 ] int 
  1233 ;;  current_str    45    0[BANK3 ] unsigned char [9][5]
  1234 ;;  current        15   45[BANK3 ] [5]
  1235 ;;  current_sub    15   63[BANK1 ] [5]
  1236 ;;  current_mult   15   48[BANK1 ] [5]
  1237 ;;  lcd             5   60[BANK3 ] struct .
  1238 ;;  screen_id       1   70[BANK3 ] unsigned char 
  1239 ;;  stop_channel    1   65[BANK3 ] unsigned char 
  1240 ;;  start_channe    1   79[BANK1 ] unsigned char 
  1241 ;;  toggled_powe    1   78[BANK1 ] unsigned char 
  1242 ;;  toggled_back    1   77[BANK0 ] unsigned char 
  1243 ;;  toggled_scre    1   76[BANK0 ] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2   32[COMMON] int 
  1246 ;; Registers used:
  1247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 17F/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1253 ;;      Params:         0       0       0       0       0
  1254 ;;      Locals:         0       2      32      73       0
  1255 ;;      Temps:          0       0       6       0       0
  1256 ;;      Totals:         0       2      38      73       0
  1257 ;;Total ram usage:      113 bytes
  1258 ;; Hardware stack levels required when called:    4
  1259 ;; This function calls:
  1260 ;;		_ADC_Init
  1261 ;;		_ADC_Read
  1262 ;;		_IO_Init
  1263 ;;		_LCD_Init
  1264 ;;		_LCD_Write
  1265 ;;		_LCD_putrs
  1266 ;;		_LCD_puts
  1267 ;;		___bmul
  1268 ;;		___ftadd
  1269 ;;		___ftge
  1270 ;;		___ftmul
  1271 ;;		___ftneg
  1272 ;;		___lltoft
  1273 ;;		_sprintf
  1274 ;; This function is called by:
  1275 ;;		Startup code after reset
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           
  1280                           ;psect for function _main
  1281  0C7E                     _main:	
  1282                           
  1283                           ;main.c: 70: bool toggled_screen = 0, toggled_backlight = 0, toggled_power = 0;
  1284                           
  1285                           ;incstack = 0
  1286                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1287  0C7E  1283               	bcf	3,5	;RP0=0, select bank0
  1288  0C7F  1303               	bcf	3,6	;RP1=0, select bank0
  1289  0C80  01EC               	clrf	main@toggled_screen
  1290  0C81  01ED               	clrf	main@toggled_backlight
  1291  0C82  1683               	bsf	3,5	;RP0=1, select bank1
  1292  0C83  1303               	bcf	3,6	;RP1=0, select bank1
  1293  0C84  01EE               	clrf	main@toggled_power^(0+128)
  1294                           
  1295                           ;main.c: 71: double current[5];
  1296                           ;main.c: 72: char current_str[5][9];
  1297                           ;main.c: 73: unsigned char screen_id = 0, start_channel = 0, stop_channel = 0;
  1298  0C85  1683               	bsf	3,5	;RP0=1, select bank3
  1299  0C86  1703               	bsf	3,6	;RP1=1, select bank3
  1300  0C87  01D6               	clrf	main@screen_id^(0+384)
  1301  0C88  1683               	bsf	3,5	;RP0=1, select bank1
  1302  0C89  1303               	bcf	3,6	;RP1=0, select bank1
  1303  0C8A  01EF               	clrf	main@start_channel^(0+128)
  1304  0C8B  1683               	bsf	3,5	;RP0=1, select bank3
  1305  0C8C  1703               	bsf	3,6	;RP1=1, select bank3
  1306  0C8D  01D1               	clrf	main@stop_channel^(0+384)
  1307                           
  1308                           ;main.c: 74: LCD lcd = { &PORTC, 2, 3, 4, 5, 6, 7 };
  1309  0C8E  30CC               	movlw	main@lcd& (0+255)
  1310  0C8F  0084               	movwf	4
  1311  0C90  085E               	movf	main@F1209^(0+384),w
  1312  0C91  1783               	bsf	3,7	;select IRP bank3
  1313  0C92  0080               	movwf	0
  1314  0C93  0A84               	incf	4,f
  1315  0C94  085F               	movf	(main@F1209^(0+384)+1),w
  1316  0C95  0080               	movwf	0
  1317  0C96  0A84               	incf	4,f
  1318  0C97  0860               	movf	(main@F1209^(0+384)+2),w
  1319  0C98  0080               	movwf	0
  1320  0C99  0A84               	incf	4,f
  1321  0C9A  0861               	movf	(main@F1209^(0+384)+3),w
  1322  0C9B  0080               	movwf	0
  1323  0C9C  0A84               	incf	4,f
  1324  0C9D  0862               	movf	(main@F1209^(0+384)+4),w
  1325  0C9E  0080               	movwf	0
  1326                           
  1327                           ;main.c: 75: double current_mult[5] = { 0.0840, 0.0350, 0.0840, 0.0550, 0.0350 };
  1328  0C9F  30D0               	movlw	main@current_mult& (0+255)
  1329  0CA0  0084               	movwf	4
  1330  0CA1  3010               	movlw	low main@F1211
  1331  0CA2  1683               	bsf	3,5	;RP0=1, select bank1
  1332  0CA3  1303               	bcf	3,6	;RP1=0, select bank1
  1333  0CA4  00CA               	movwf	??_main^(0+128)
  1334  0CA5  0804               	movf	4,w
  1335  0CA6  00CB               	movwf	(??_main^(0+128)+1)
  1336  0CA7  300F               	movlw	15
  1337  0CA8  00CC               	movwf	(??_main^(0+128)+2)
  1338  0CA9                     u4620:	
  1339  0CA9  084A               	movf	??_main^(0+128),w
  1340  0CAA  0084               	movwf	4
  1341  0CAB  1783               	bsf	3,7	;select IRP bank2
  1342  0CAC  0800               	movf	0,w
  1343  0CAD  00CD               	movwf	(??_main^(0+128)+3)
  1344  0CAE  0ACA               	incf	??_main^(0+128),f
  1345  0CAF  084B               	movf	(??_main^(0+128)+1),w
  1346  0CB0  0084               	movwf	4
  1347  0CB1  1383               	bcf	3,7	;select IRP bank1
  1348  0CB2  084D               	movf	(??_main^(0+128)+3),w
  1349  0CB3  0080               	movwf	0
  1350  0CB4  0ACB               	incf	(??_main^(0+128)+1),f
  1351  0CB5  0BCC               	decfsz	(??_main^(0+128)+2),f
  1352  0CB6  2CA9               	goto	u4620
  1353                           
  1354                           ;main.c: 76: double current_sub[5] = { 43.176, 17.955, 43.176, 28.215, 17.955 };
  1355  0CB7  30DF               	movlw	main@current_sub& (0+255)
  1356  0CB8  0084               	movwf	4
  1357  0CB9  301F               	movlw	low main@F1213
  1358  0CBA  00CA               	movwf	??_main^(0+128)
  1359  0CBB  0804               	movf	4,w
  1360  0CBC  00CB               	movwf	(??_main^(0+128)+1)
  1361  0CBD  300F               	movlw	15
  1362  0CBE  00CC               	movwf	(??_main^(0+128)+2)
  1363  0CBF                     u4630:	
  1364  0CBF  084A               	movf	??_main^(0+128),w
  1365  0CC0  0084               	movwf	4
  1366  0CC1  1783               	bsf	3,7	;select IRP bank2
  1367  0CC2  0800               	movf	0,w
  1368  0CC3  00CD               	movwf	(??_main^(0+128)+3)
  1369  0CC4  0ACA               	incf	??_main^(0+128),f
  1370  0CC5  084B               	movf	(??_main^(0+128)+1),w
  1371  0CC6  0084               	movwf	4
  1372  0CC7  1383               	bcf	3,7	;select IRP bank1
  1373  0CC8  084D               	movf	(??_main^(0+128)+3),w
  1374  0CC9  0080               	movwf	0
  1375  0CCA  0ACB               	incf	(??_main^(0+128)+1),f
  1376  0CCB  0BCC               	decfsz	(??_main^(0+128)+2),f
  1377  0CCC  2CBF               	goto	u4630
  1378                           
  1379                           ;main.c: 79: LCD_Init(lcd);
  1380  0CCD  3078               	movlw	LCD_Init@display& (0+255)
  1381  0CCE  0084               	movwf	4
  1382  0CCF  1683               	bsf	3,5	;RP0=1, select bank3
  1383  0CD0  1703               	bsf	3,6	;RP1=1, select bank3
  1384  0CD1  084C               	movf	main@lcd^(0+384),w
  1385  0CD2  0080               	movwf	0
  1386  0CD3  0A84               	incf	4,f
  1387  0CD4  084D               	movf	(main@lcd^(0+384)+1),w
  1388  0CD5  0080               	movwf	0
  1389  0CD6  0A84               	incf	4,f
  1390  0CD7  084E               	movf	(main@lcd^(0+384)+2),w
  1391  0CD8  0080               	movwf	0
  1392  0CD9  0A84               	incf	4,f
  1393  0CDA  084F               	movf	(main@lcd^(0+384)+3),w
  1394  0CDB  0080               	movwf	0
  1395  0CDC  0A84               	incf	4,f
  1396  0CDD  0850               	movf	(main@lcd^(0+384)+4),w
  1397  0CDE  0080               	movwf	0
  1398  0CDF  160A  118A  237D  120A  158A  	fcall	_LCD_Init
  1399                           
  1400                           ;main.c: 80: ADC_Init();
  1401  0CE4  160A  158A  25CE  120A  158A  	fcall	_ADC_Init
  1402                           
  1403                           ;main.c: 81: IO_Init();
  1404  0CE9  160A  158A  2585  120A  158A  	fcall	_IO_Init
  1405  0CEE                     l3136:	
  1406                           ;main.c: 83: for ( ;; ) {
  1407                           
  1408                           
  1409                           ;main.c: 86: if ( PORTBbits.RB0 == 0 && toggled_power == 0 ) {
  1410  0CEE  1283               	bcf	3,5	;RP0=0, select bank0
  1411  0CEF  1303               	bcf	3,6	;RP1=0, select bank0
  1412  0CF0  1806               	btfsc	6,0	;volatile
  1413  0CF1  2D18               	goto	l40
  1414  0CF2  1683               	bsf	3,5	;RP0=1, select bank1
  1415  0CF3  1303               	bcf	3,6	;RP1=0, select bank1
  1416  0CF4  08EE               	movf	main@toggled_power^(0+128),f
  1417  0CF5  1D03               	skipz
  1418  0CF6  2D18               	goto	l40
  1419                           
  1420                           ;main.c: 87: _delay((unsigned long)((1)*(8000000/4000.0)));
  1421  0CF7  3003               	movlw	3
  1422  0CF8  00CB               	movwf	(??_main^(0+128)+1)
  1423  0CF9  3097               	movlw	151
  1424  0CFA  00CA               	movwf	??_main^(0+128)
  1425  0CFB                     u4837:	
  1426  0CFB  0BCA               	decfsz	??_main^(0+128),f
  1427  0CFC  2CFB               	goto	u4837
  1428  0CFD  0BCB               	decfsz	(??_main^(0+128)+1),f
  1429  0CFE  2CFB               	goto	u4837
  1430  0CFF  2D00               	nop2
  1431                           
  1432                           ;main.c: 89: if ( PORTBbits.RB3 == 0 ) {
  1433  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  1434  0D01  1303               	bcf	3,6	;RP1=0, select bank0
  1435  0D02  1986               	btfsc	6,3	;volatile
  1436  0D03  2D06               	goto	l41
  1437                           
  1438                           ;main.c: 90: PORTBbits.RB3 = 1;
  1439  0D04  1586               	bsf	6,3	;volatile
  1440                           
  1441                           ;main.c: 91: }
  1442  0D05  2D07               	goto	l3146
  1443  0D06                     l41:	
  1444                           
  1445                           ;main.c: 92: else {
  1446                           ;main.c: 93: PORTBbits.RB3 = 0;
  1447  0D06  1186               	bcf	6,3	;volatile
  1448  0D07                     l3146:	
  1449                           ;main.c: 94: }
  1450                           ;main.c: 96: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0 
      +                          );
  1451                           
  1452  0D07  3000               	movlw	0
  1453  0D08  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1454  0D0D  3001               	movlw	1
  1455  0D0E  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1456                           
  1457                           ;main.c: 97: toggled_power = 1;
  1458  0D13  1683               	bsf	3,5	;RP0=1, select bank1
  1459  0D14  1303               	bcf	3,6	;RP1=0, select bank1
  1460  0D15  01EE               	clrf	main@toggled_power^(0+128)
  1461  0D16  0AEE               	incf	main@toggled_power^(0+128),f
  1462                           
  1463                           ;main.c: 98: }
  1464  0D17  2D1E               	goto	l3152
  1465  0D18                     l40:	
  1466                           
  1467                           ;main.c: 99: else if ( PORTBbits.RB0 == 1 ) {
  1468  0D18  1283               	bcf	3,5	;RP0=0, select bank0
  1469  0D19  1C06               	btfss	6,0	;volatile
  1470  0D1A  2D1E               	goto	l3152
  1471                           
  1472                           ;main.c: 100: toggled_power = 0;
  1473  0D1B  1683               	bsf	3,5	;RP0=1, select bank1
  1474  0D1C  1303               	bcf	3,6	;RP1=0, select bank1
  1475  0D1D  01EE               	clrf	main@toggled_power^(0+128)
  1476  0D1E                     l3152:	
  1477                           
  1478                           ;main.c: 101: }
  1479                           ;main.c: 104: if ( PORTBbits.RB2 == 0 && toggled_backlight == 0 ) {
  1480  0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  1481  0D1F  1906               	btfsc	6,2	;volatile
  1482  0D20  2D39               	goto	l47
  1483  0D21  08ED               	movf	main@toggled_backlight,f
  1484  0D22  1D03               	skipz
  1485  0D23  2D39               	goto	l47
  1486                           
  1487                           ;main.c: 105: _delay((unsigned long)((1)*(8000000/4000.0)));
  1488  0D24  3003               	movlw	3
  1489  0D25  1683               	bsf	3,5	;RP0=1, select bank1
  1490  0D26  1303               	bcf	3,6	;RP1=0, select bank1
  1491  0D27  00CB               	movwf	(??_main^(0+128)+1)
  1492  0D28  3097               	movlw	151
  1493  0D29  00CA               	movwf	??_main^(0+128)
  1494  0D2A                     u4847:	
  1495  0D2A  0BCA               	decfsz	??_main^(0+128),f
  1496  0D2B  2D2A               	goto	u4847
  1497  0D2C  0BCB               	decfsz	(??_main^(0+128)+1),f
  1498  0D2D  2D2A               	goto	u4847
  1499  0D2E  2D2F               	nop2
  1500                           
  1501                           ;main.c: 107: if ( PORTCbits.RC1 == 0 ) {
  1502  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  1503  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  1504  0D31  1887               	btfsc	7,1	;volatile
  1505  0D32  2D35               	goto	l48
  1506                           
  1507                           ;main.c: 108: PORTCbits.RC1 = 1;
  1508  0D33  1487               	bsf	7,1	;volatile
  1509                           
  1510                           ;main.c: 109: }
  1511  0D34  2D36               	goto	l49
  1512  0D35                     l48:	
  1513                           
  1514                           ;main.c: 110: else {
  1515                           ;main.c: 111: PORTCbits.RC1 = 0;
  1516  0D35  1087               	bcf	7,1	;volatile
  1517  0D36                     l49:	
  1518                           
  1519                           ;main.c: 112: }
  1520                           ;main.c: 114: toggled_backlight = 1;
  1521  0D36  01ED               	clrf	main@toggled_backlight
  1522  0D37  0AED               	incf	main@toggled_backlight,f
  1523                           
  1524                           ;main.c: 115: }
  1525  0D38  2D3C               	goto	l3164
  1526  0D39                     l47:	
  1527                           
  1528                           ;main.c: 116: else if ( PORTBbits.RB2 == 1 ) {
  1529  0D39  1D06               	btfss	6,2	;volatile
  1530  0D3A  2D3C               	goto	l3164
  1531                           
  1532                           ;main.c: 117: toggled_backlight = 0;
  1533  0D3B  01ED               	clrf	main@toggled_backlight
  1534  0D3C                     l3164:	
  1535                           
  1536                           ;main.c: 118: }
  1537                           ;main.c: 121: if ( PORTBbits.RB3 == 0 ) {
  1538  0D3C  1986               	btfsc	6,3	;volatile
  1539  0D3D  2D51               	goto	l52
  1540                           
  1541                           ;main.c: 122: do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Write( 
      +                          0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0xF0
      +                          ) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 2 ) { do { LCD_Wr
  1542  0D3E  300C               	movlw	12
  1543  0D3F  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1544  0D44  3000               	movlw	0
  1545  0D45  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1546                           
  1547                           ;main.c: 123: LCD_putrs(" ***  STAND BY  *** ");
  1548  0D4A  30CB               	movlw	(STR_1-__stringbase)& (0+255)
  1549  0D4B  160A  158A  260C  120A  158A  	fcall	_LCD_putrs
  1550                           
  1551                           ;main.c: 124: continue;
  1552  0D50  2CEE               	goto	l3136
  1553  0D51                     l52:	
  1554                           ;main.c: 125: }
  1555                           
  1556                           
  1557                           ;main.c: 126: else if ( PORTBbits.RB4 == 1 ) {
  1558  0D51  1E06               	btfss	6,4	;volatile
  1559  0D52  2D8C               	goto	l3192
  1560                           
  1561                           ;main.c: 127: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0
      +                           );
  1562  0D53  3000               	movlw	0
  1563  0D54  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1564  0D59  3001               	movlw	1
  1565  0D5A  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1566                           
  1567                           ;main.c: 128: do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Write( 
      +                          0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0xF0
      +                          ) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 2 ) { do { LCD_Wr
  1568  0D5F  300C               	movlw	12
  1569  0D60  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1570  0D65  3000               	movlw	0
  1571  0D66  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1572                           
  1573                           ;main.c: 129: LCD_putrs("        ****        ");
  1574  0D6B  3077               	movlw	(STR_2-__stringbase)& (0+255)
  1575  0D6C  160A  158A  260C  120A  158A  	fcall	_LCD_putrs
  1576  0D71                     l92:	
  1577                           ;main.c: 131: while ( PORTBbits.RB4 == 1 );
  1578                           
  1579  0D71  1283               	bcf	3,5	;RP0=0, select bank0
  1580  0D72  1303               	bcf	3,6	;RP1=0, select bank0
  1581  0D73  1A06               	btfsc	6,4	;volatile
  1582  0D74  2D71               	goto	l92
  1583                           
  1584                           ;main.c: 132: _delay((unsigned long)((1)*(8000000/4000.0)));
  1585  0D75  3003               	movlw	3
  1586  0D76  1683               	bsf	3,5	;RP0=1, select bank1
  1587  0D77  1303               	bcf	3,6	;RP1=0, select bank1
  1588  0D78  00CB               	movwf	(??_main^(0+128)+1)
  1589  0D79  3097               	movlw	151
  1590  0D7A  00CA               	movwf	??_main^(0+128)
  1591  0D7B                     u4857:	
  1592  0D7B  0BCA               	decfsz	??_main^(0+128),f
  1593  0D7C  2D7B               	goto	u4857
  1594  0D7D  0BCB               	decfsz	(??_main^(0+128)+1),f
  1595  0D7E  2D7B               	goto	u4857
  1596  0D7F  2D80               	nop2
  1597                           
  1598                           ;main.c: 133: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0
      +                           );
  1599  0D80  3000               	movlw	0
  1600  0D81  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1601  0D86  3001               	movlw	1
  1602  0D87  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  1603  0D8C                     l3192:	
  1604                           
  1605                           ;main.c: 134: }
  1606                           ;main.c: 137: if ( screen_id == 0 ) {
  1607  0D8C  1683               	bsf	3,5	;RP0=1, select bank3
  1608  0D8D  1703               	bsf	3,6	;RP1=1, select bank3
  1609  0D8E  08D6               	movf	main@screen_id^(0+384),f
  1610  0D8F  1D03               	skipz
  1611  0D90  2D96               	goto	l3198
  1612                           
  1613                           ;main.c: 138: start_channel = 0;
  1614  0D91  1683               	bsf	3,5	;RP0=1, select bank1
  1615  0D92  1303               	bcf	3,6	;RP1=0, select bank1
  1616  0D93  01EF               	clrf	main@start_channel^(0+128)
  1617                           
  1618                           ;main.c: 139: stop_channel = 2;
  1619  0D94  3002               	movlw	2
  1620  0D95  2D9D               	goto	L1
  1621  0D96                     l3198:	
  1622                           ;main.c: 140: }
  1623                           
  1624                           
  1625                           ;main.c: 141: else {
  1626                           ;main.c: 142: start_channel = 3;
  1627  0D96  3003               	movlw	3
  1628  0D97  1683               	bsf	3,5	;RP0=1, select bank1
  1629  0D98  1303               	bcf	3,6	;RP1=0, select bank1
  1630  0D99  00CA               	movwf	??_main^(0+128)
  1631  0D9A  084A               	movf	??_main^(0+128),w
  1632  0D9B  00EF               	movwf	main@start_channel^(0+128)
  1633                           
  1634                           ;main.c: 143: stop_channel = 4;
  1635  0D9C  3004               	movlw	4
  1636  0D9D                     L1:	
  1637  0D9D  00CA               	movwf	??_main^(0+128)
  1638  0D9E  084A               	movf	??_main^(0+128),w
  1639  0D9F  1683               	bsf	3,5	;RP0=1, select bank3
  1640  0DA0  1703               	bsf	3,6	;RP1=1, select bank3
  1641  0DA1  00D1               	movwf	main@stop_channel^(0+384)
  1642                           
  1643                           ;main.c: 144: }
  1644                           ;main.c: 146: for ( int i = start_channel; i <= stop_channel; ++i ) {
  1645  0DA2  1683               	bsf	3,5	;RP0=1, select bank1
  1646  0DA3  1303               	bcf	3,6	;RP1=0, select bank1
  1647  0DA4  086F               	movf	main@start_channel^(0+128),w
  1648  0DA5  00CA               	movwf	??_main^(0+128)
  1649  0DA6  01CB               	clrf	(??_main^(0+128)+1)
  1650  0DA7  084A               	movf	??_main^(0+128),w
  1651  0DA8  1683               	bsf	3,5	;RP0=1, select bank3
  1652  0DA9  1703               	bsf	3,6	;RP1=1, select bank3
  1653  0DAA  00D7               	movwf	main@i^(0+384)
  1654  0DAB  1683               	bsf	3,5	;RP0=1, select bank1
  1655  0DAC  1303               	bcf	3,6	;RP1=0, select bank1
  1656  0DAD  084B               	movf	(??_main+1)^(0+128),w
  1657  0DAE  1683               	bsf	3,5	;RP0=1, select bank3
  1658  0DAF  1703               	bsf	3,6	;RP1=1, select bank3
  1659  0DB0  00D8               	movwf	(main@i+1)^(0+384)
  1660  0DB1                     l3216:	
  1661  0DB1  0858               	movf	(main@i+1)^(0+384),w
  1662  0DB2  3A80               	xorlw	128
  1663  0DB3  3C80               	sublw	128
  1664  0DB4  1D03               	skipz
  1665  0DB5  2DB8               	goto	u4775
  1666  0DB6  0857               	movf	main@i^(0+384),w
  1667  0DB7  0251               	subwf	main@stop_channel^(0+384),w
  1668  0DB8                     u4775:	
  1669  0DB8  1C03               	btfss	3,0
  1670  0DB9  2F3A               	goto	l103
  1671                           
  1672                           ;main.c: 147: current[i] = ( current_mult[i] * ADC_Read(i, 1000) - current_sub[i] );
  1673  0DBA  3003               	movlw	3
  1674  0DBB  1683               	bsf	3,5	;RP0=1, select bank1
  1675  0DBC  1303               	bcf	3,6	;RP1=0, select bank1
  1676  0DBD  00CA               	movwf	??_main^(0+128)
  1677  0DBE  084A               	movf	??_main^(0+128),w
  1678  0DBF  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0DC0  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0DC1  00A4               	movwf	___bmul@multiplicand
  1681  0DC2  1683               	bsf	3,5	;RP0=1, select bank3
  1682  0DC3  1703               	bsf	3,6	;RP1=1, select bank3
  1683  0DC4  0857               	movf	main@i^(0+384),w
  1684  0DC5  120A  158A  2001  120A  158A  	fcall	___bmul
  1685  0DCA  3EDF               	addlw	main@current_sub& (0+255)
  1686  0DCB  0084               	movwf	4
  1687  0DCC  1383               	bcf	3,7	;select IRP bank1
  1688  0DCD  0800               	movf	0,w
  1689  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  1690  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  1691  0DD0  00A7               	movwf	___ftneg@f1
  1692  0DD1  0A84               	incf	4,f
  1693  0DD2  0800               	movf	0,w
  1694  0DD3  00A8               	movwf	___ftneg@f1+1
  1695  0DD4  0A84               	incf	4,f
  1696  0DD5  0800               	movf	0,w
  1697  0DD6  00A9               	movwf	___ftneg@f1+2
  1698  0DD7  160A  158A  257B  120A  158A  	fcall	___ftneg
  1699  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  1700  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  1701  0DDE  0827               	movf	?___ftneg,w
  1702  0DDF  00D5               	movwf	___ftadd@f1
  1703  0DE0  0828               	movf	?___ftneg+1,w
  1704  0DE1  00D6               	movwf	___ftadd@f1+1
  1705  0DE2  0829               	movf	?___ftneg+2,w
  1706  0DE3  00D7               	movwf	___ftadd@f1+2
  1707  0DE4  3003               	movlw	3
  1708  0DE5  1683               	bsf	3,5	;RP0=1, select bank1
  1709  0DE6  1303               	bcf	3,6	;RP1=0, select bank1
  1710  0DE7  00CB               	movwf	(??_main+1)^(0+128)
  1711  0DE8  084B               	movf	(??_main+1)^(0+128),w
  1712  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  1713  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  1714  0DEB  00A4               	movwf	___bmul@multiplicand
  1715  0DEC  1683               	bsf	3,5	;RP0=1, select bank3
  1716  0DED  1703               	bsf	3,6	;RP1=1, select bank3
  1717  0DEE  0857               	movf	main@i^(0+384),w
  1718  0DEF  120A  158A  2001  120A  158A  	fcall	___bmul
  1719  0DF4  3ED0               	addlw	main@current_mult& (0+255)
  1720  0DF5  0084               	movwf	4
  1721  0DF6  1383               	bcf	3,7	;select IRP bank1
  1722  0DF7  0800               	movf	0,w
  1723  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  1724  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  1725  0DFA  00B5               	movwf	___ftmul@f1
  1726  0DFB  0A84               	incf	4,f
  1727  0DFC  0800               	movf	0,w
  1728  0DFD  00B6               	movwf	___ftmul@f1+1
  1729  0DFE  0A84               	incf	4,f
  1730  0DFF  0800               	movf	0,w
  1731  0E00  00B7               	movwf	___ftmul@f1+2
  1732  0E01  30E8               	movlw	232
  1733  0E02  00A0               	movwf	ADC_Read@samples
  1734  0E03  3003               	movlw	3
  1735  0E04  00A1               	movwf	ADC_Read@samples+1
  1736  0E05  1683               	bsf	3,5	;RP0=1, select bank3
  1737  0E06  1703               	bsf	3,6	;RP1=1, select bank3
  1738  0E07  0857               	movf	main@i^(0+384),w
  1739  0E08  160A  118A  21D8  120A  158A  	fcall	_ADC_Read
  1740  0E0D  1283               	bcf	3,5	;RP0=0, select bank0
  1741  0E0E  1303               	bcf	3,6	;RP1=0, select bank0
  1742  0E0F  0823               	movf	?_ADC_Read+3,w
  1743  0E10  00B2               	movwf	___lltoft@c+3
  1744  0E11  0822               	movf	?_ADC_Read+2,w
  1745  0E12  00B1               	movwf	___lltoft@c+2
  1746  0E13  0821               	movf	?_ADC_Read+1,w
  1747  0E14  00B0               	movwf	___lltoft@c+1
  1748  0E15  0820               	movf	?_ADC_Read,w
  1749  0E16  00AF               	movwf	___lltoft@c
  1750  0E17  120A  158A  2014  120A  158A  	fcall	___lltoft
  1751  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  1752  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  1753  0E1E  082F               	movf	?___lltoft,w
  1754  0E1F  00B8               	movwf	___ftmul@f2
  1755  0E20  0830               	movf	?___lltoft+1,w
  1756  0E21  00B9               	movwf	___ftmul@f2+1
  1757  0E22  0831               	movf	?___lltoft+2,w
  1758  0E23  00BA               	movwf	___ftmul@f2+2
  1759  0E24  160A  118A  24F2  120A  158A  	fcall	___ftmul
  1760  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  1761  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  1762  0E2B  0835               	movf	?___ftmul,w
  1763  0E2C  00D8               	movwf	___ftadd@f2
  1764  0E2D  0836               	movf	?___ftmul+1,w
  1765  0E2E  00D9               	movwf	___ftadd@f2+1
  1766  0E2F  0837               	movf	?___ftmul+2,w
  1767  0E30  00DA               	movwf	___ftadd@f2+2
  1768  0E31  160A  118A  25C5  120A  158A  	fcall	___ftadd
  1769  0E36  1283               	bcf	3,5	;RP0=0, select bank0
  1770  0E37  1303               	bcf	3,6	;RP1=0, select bank0
  1771  0E38  0855               	movf	?___ftadd,w
  1772  0E39  1683               	bsf	3,5	;RP0=1, select bank1
  1773  0E3A  1303               	bcf	3,6	;RP1=0, select bank1
  1774  0E3B  00CC               	movwf	(??_main+2)^(0+128)
  1775  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
  1776  0E3D  1303               	bcf	3,6	;RP1=0, select bank0
  1777  0E3E  0856               	movf	?___ftadd+1,w
  1778  0E3F  1683               	bsf	3,5	;RP0=1, select bank1
  1779  0E40  1303               	bcf	3,6	;RP1=0, select bank1
  1780  0E41  00CD               	movwf	((??_main+2)^(0+128)+1)
  1781  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  1782  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  1783  0E44  0857               	movf	?___ftadd+2,w
  1784  0E45  1683               	bsf	3,5	;RP0=1, select bank1
  1785  0E46  1303               	bcf	3,6	;RP1=0, select bank1
  1786  0E47  00CE               	movwf	((??_main+2)^(0+128)+2)
  1787  0E48  3003               	movlw	3
  1788  0E49  00CF               	movwf	(??_main+5)^(0+128)
  1789  0E4A  084F               	movf	(??_main+5)^(0+128),w
  1790  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  1791  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  1792  0E4D  00A4               	movwf	___bmul@multiplicand
  1793  0E4E  1683               	bsf	3,5	;RP0=1, select bank3
  1794  0E4F  1703               	bsf	3,6	;RP1=1, select bank3
  1795  0E50  0857               	movf	main@i^(0+384),w
  1796  0E51  120A  158A  2001  120A  158A  	fcall	___bmul
  1797  0E56  3EBD               	addlw	main@current& (0+255)
  1798  0E57  0084               	movwf	4
  1799  0E58  1683               	bsf	3,5	;RP0=1, select bank1
  1800  0E59  1303               	bcf	3,6	;RP1=0, select bank1
  1801  0E5A  084C               	movf	(??_main+2)^(0+128),w
  1802  0E5B  1783               	bsf	3,7	;select IRP bank3
  1803  0E5C  0080               	movwf	0
  1804  0E5D  0A84               	incf	4,f
  1805  0E5E  084D               	movf	(??_main+3)^(0+128),w
  1806  0E5F  0080               	movwf	0
  1807  0E60  0A84               	incf	4,f
  1808  0E61  084E               	movf	(??_main+4)^(0+128),w
  1809  0E62  0080               	movwf	0
  1810                           
  1811                           ;main.c: 149: if ( current[i] >= 0 ) {
  1812  0E63  3003               	movlw	3
  1813  0E64  00CA               	movwf	??_main^(0+128)
  1814  0E65  084A               	movf	??_main^(0+128),w
  1815  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  1816  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  1817  0E68  00A4               	movwf	___bmul@multiplicand
  1818  0E69  1683               	bsf	3,5	;RP0=1, select bank3
  1819  0E6A  1703               	bsf	3,6	;RP1=1, select bank3
  1820  0E6B  0857               	movf	main@i^(0+384),w
  1821  0E6C  120A  158A  2001  120A  158A  	fcall	___bmul
  1822  0E71  3EBD               	addlw	main@current& (0+255)
  1823  0E72  0084               	movwf	4
  1824  0E73  1783               	bsf	3,7	;select IRP bank3
  1825  0E74  0800               	movf	0,w
  1826  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  1827  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  1828  0E77  00A7               	movwf	___ftge@ff1
  1829  0E78  0A84               	incf	4,f
  1830  0E79  0800               	movf	0,w
  1831  0E7A  00A8               	movwf	___ftge@ff1+1
  1832  0E7B  0A84               	incf	4,f
  1833  0E7C  0800               	movf	0,w
  1834  0E7D  00A9               	movwf	___ftge@ff1+2
  1835  0E7E  3000               	movlw	0
  1836  0E7F  00AA               	movwf	___ftge@ff2
  1837  0E80  3000               	movlw	0
  1838  0E81  00AB               	movwf	___ftge@ff2+1
  1839  0E82  3000               	movlw	0
  1840  0E83  00AC               	movwf	___ftge@ff2+2
  1841  0E84  160A  118A  2111  120A  158A  	fcall	___ftge
  1842  0E89  1C03               	btfss	3,0
  1843  0E8A  2EDA               	goto	l3208
  1844                           
  1845                           ;main.c: 150: current_str[i][0] = ' ';
  1846  0E8B  3020               	movlw	32
  1847  0E8C  1683               	bsf	3,5	;RP0=1, select bank1
  1848  0E8D  1303               	bcf	3,6	;RP1=0, select bank1
  1849  0E8E  00CA               	movwf	??_main^(0+128)
  1850  0E8F  3009               	movlw	9
  1851  0E90  00CB               	movwf	(??_main+1)^(0+128)
  1852  0E91  084B               	movf	(??_main+1)^(0+128),w
  1853  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  1854  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  1855  0E94  00A4               	movwf	___bmul@multiplicand
  1856  0E95  1683               	bsf	3,5	;RP0=1, select bank3
  1857  0E96  1703               	bsf	3,6	;RP1=1, select bank3
  1858  0E97  0857               	movf	main@i^(0+384),w
  1859  0E98  120A  158A  2001  120A  158A  	fcall	___bmul
  1860  0E9D  3E90               	addlw	main@current_str& (0+255)
  1861  0E9E  0084               	movwf	4
  1862  0E9F  1683               	bsf	3,5	;RP0=1, select bank1
  1863  0EA0  1303               	bcf	3,6	;RP1=0, select bank1
  1864  0EA1  084A               	movf	??_main^(0+128),w
  1865  0EA2  1783               	bsf	3,7	;select IRP bank3
  1866  0EA3  0080               	movwf	0
  1867                           
  1868                           ;main.c: 151: sprintf(&current_str[i][1], "%6.3fA", current[i]);
  1869  0EA4  3003               	movlw	3
  1870  0EA5  00CA               	movwf	??_main^(0+128)
  1871  0EA6  084A               	movf	??_main^(0+128),w
  1872  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  1873  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  1874  0EA9  00A4               	movwf	___bmul@multiplicand
  1875  0EAA  1683               	bsf	3,5	;RP0=1, select bank3
  1876  0EAB  1703               	bsf	3,6	;RP1=1, select bank3
  1877  0EAC  0857               	movf	main@i^(0+384),w
  1878  0EAD  120A  158A  2001  120A  158A  	fcall	___bmul
  1879  0EB2  3EBD               	addlw	main@current& (0+255)
  1880  0EB3  0084               	movwf	4
  1881  0EB4  1783               	bsf	3,7	;select IRP bank3
  1882  0EB5  0800               	movf	0,w
  1883  0EB6  1683               	bsf	3,5	;RP0=1, select bank3
  1884  0EB7  1703               	bsf	3,6	;RP1=1, select bank3
  1885  0EB8  00D2               	movwf	_main$881^(0+384)
  1886  0EB9  0A84               	incf	4,f
  1887  0EBA  0800               	movf	0,w
  1888  0EBB  00D3               	movwf	(_main$881+1)^(0+384)
  1889  0EBC  0A84               	incf	4,f
  1890  0EBD  0800               	movf	0,w
  1891  0EBE  00D4               	movwf	(_main$881+2)^(0+384)
  1892                           
  1893                           ;main.c: 151: sprintf(&current_str[i][1], "%6.3fA", current[i]);
  1894  0EBF  3009               	movlw	9
  1895  0EC0  1683               	bsf	3,5	;RP0=1, select bank1
  1896  0EC1  1303               	bcf	3,6	;RP1=0, select bank1
  1897  0EC2  00CA               	movwf	??_main^(0+128)
  1898  0EC3  084A               	movf	??_main^(0+128),w
  1899  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  1900  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  1901  0EC6  00A4               	movwf	___bmul@multiplicand
  1902  0EC7  1683               	bsf	3,5	;RP0=1, select bank3
  1903  0EC8  1703               	bsf	3,6	;RP1=1, select bank3
  1904  0EC9  0857               	movf	main@i^(0+384),w
  1905  0ECA  120A  158A  2001  120A  158A  	fcall	___bmul
  1906  0ECF  3E01               	addlw	1
  1907  0ED0  3E90               	addlw	main@current_str& (0+255)
  1908  0ED1  1683               	bsf	3,5	;RP0=1, select bank1
  1909  0ED2  1303               	bcf	3,6	;RP1=0, select bank1
  1910  0ED3  00CB               	movwf	(??_main+1)^(0+128)
  1911  0ED4  084B               	movf	(??_main+1)^(0+128),w
  1912  0ED5  1683               	bsf	3,5	;RP0=1, select bank3
  1913  0ED6  1703               	bsf	3,6	;RP1=1, select bank3
  1914  0ED7  00D5               	movwf	_main$882^(0+384)
  1915                           
  1916                           ;main.c: 151: sprintf(&current_str[i][1], "%6.3fA", current[i]);
  1917  0ED8  30E0               	movlw	(STR_3-__stringbase)& (0+255)
  1918  0ED9  2F10               	goto	L2
  1919  0EDA                     l3208:	
  1920                           ;main.c: 152: }
  1921                           
  1922                           
  1923                           ;main.c: 153: else {
  1924                           ;main.c: 154: sprintf(current_str[i], "%7.3fA", current[i]);
  1925  0EDA  3003               	movlw	3
  1926  0EDB  1683               	bsf	3,5	;RP0=1, select bank1
  1927  0EDC  1303               	bcf	3,6	;RP1=0, select bank1
  1928  0EDD  00CA               	movwf	??_main^(0+128)
  1929  0EDE  084A               	movf	??_main^(0+128),w
  1930  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0EE1  00A4               	movwf	___bmul@multiplicand
  1933  0EE2  1683               	bsf	3,5	;RP0=1, select bank3
  1934  0EE3  1703               	bsf	3,6	;RP1=1, select bank3
  1935  0EE4  0857               	movf	main@i^(0+384),w
  1936  0EE5  120A  158A  2001  120A  158A  	fcall	___bmul
  1937  0EEA  3EBD               	addlw	main@current& (0+255)
  1938  0EEB  0084               	movwf	4
  1939  0EEC  1783               	bsf	3,7	;select IRP bank3
  1940  0EED  0800               	movf	0,w
  1941  0EEE  1683               	bsf	3,5	;RP0=1, select bank3
  1942  0EEF  1703               	bsf	3,6	;RP1=1, select bank3
  1943  0EF0  00D2               	movwf	_main$881^(0+384)
  1944  0EF1  0A84               	incf	4,f
  1945  0EF2  0800               	movf	0,w
  1946  0EF3  00D3               	movwf	(_main$881+1)^(0+384)
  1947  0EF4  0A84               	incf	4,f
  1948  0EF5  0800               	movf	0,w
  1949  0EF6  00D4               	movwf	(_main$881+2)^(0+384)
  1950                           
  1951                           ;main.c: 153: else {
  1952                           ;main.c: 154: sprintf(current_str[i], "%7.3fA", current[i]);
  1953  0EF7  3009               	movlw	9
  1954  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  1955  0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  1956  0EFA  00CA               	movwf	??_main^(0+128)
  1957  0EFB  084A               	movf	??_main^(0+128),w
  1958  0EFC  1283               	bcf	3,5	;RP0=0, select bank0
  1959  0EFD  1303               	bcf	3,6	;RP1=0, select bank0
  1960  0EFE  00A4               	movwf	___bmul@multiplicand
  1961  0EFF  1683               	bsf	3,5	;RP0=1, select bank3
  1962  0F00  1703               	bsf	3,6	;RP1=1, select bank3
  1963  0F01  0857               	movf	main@i^(0+384),w
  1964  0F02  120A  158A  2001  120A  158A  	fcall	___bmul
  1965  0F07  3E90               	addlw	main@current_str& (0+255)
  1966  0F08  1683               	bsf	3,5	;RP0=1, select bank1
  1967  0F09  1303               	bcf	3,6	;RP1=0, select bank1
  1968  0F0A  00CB               	movwf	(??_main+1)^(0+128)
  1969  0F0B  084B               	movf	(??_main+1)^(0+128),w
  1970  0F0C  1683               	bsf	3,5	;RP0=1, select bank3
  1971  0F0D  1703               	bsf	3,6	;RP1=1, select bank3
  1972  0F0E  00D5               	movwf	_main$882^(0+384)
  1973                           
  1974                           ;main.c: 153: else {
  1975                           ;main.c: 154: sprintf(current_str[i], "%7.3fA", current[i]);
  1976  0F0F  30E7               	movlw	(STR_4-__stringbase)& (0+255)
  1977  0F10                     L2:	
  1978  0F10  1683               	bsf	3,5	;RP0=1, select bank1
  1979  0F11  1303               	bcf	3,6	;RP1=0, select bank1
  1980  0F12  00CA               	movwf	??_main^(0+128)
  1981  0F13  084A               	movf	??_main^(0+128),w
  1982  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  1983  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  1984  0F16  00E8               	movwf	sprintf@f
  1985  0F17  1683               	bsf	3,5	;RP0=1, select bank3
  1986  0F18  1703               	bsf	3,6	;RP1=1, select bank3
  1987  0F19  0852               	movf	_main$881^(0+384),w
  1988  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  1989  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  1990  0F1C  00E9               	movwf	?_sprintf+1
  1991  0F1D  1683               	bsf	3,5	;RP0=1, select bank3
  1992  0F1E  1703               	bsf	3,6	;RP1=1, select bank3
  1993  0F1F  0853               	movf	(_main$881+1)^(0+384),w
  1994  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  1995  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  1996  0F22  00EA               	movwf	?_sprintf+2
  1997  0F23  1683               	bsf	3,5	;RP0=1, select bank3
  1998  0F24  1703               	bsf	3,6	;RP1=1, select bank3
  1999  0F25  0854               	movf	(_main$881+2)^(0+384),w
  2000  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0F28  00EB               	movwf	?_sprintf+3
  2003  0F29  1683               	bsf	3,5	;RP0=1, select bank3
  2004  0F2A  1703               	bsf	3,6	;RP1=1, select bank3
  2005  0F2B  0855               	movf	_main$882^(0+384),w
  2006  0F2C  120A  118A  20CD  120A  158A  	fcall	_sprintf
  2007  0F31  3001               	movlw	1
  2008  0F32  1683               	bsf	3,5	;RP0=1, select bank3
  2009  0F33  1703               	bsf	3,6	;RP1=1, select bank3
  2010  0F34  07D7               	addwf	main@i^(0+384),f
  2011  0F35  1803               	skipnc
  2012  0F36  0AD8               	incf	(main@i+1)^(0+384),f
  2013  0F37  3000               	movlw	0
  2014  0F38  07D8               	addwf	(main@i+1)^(0+384),f
  2015  0F39  2DB1               	goto	l3216
  2016  0F3A                     l103:	
  2017                           
  2018                           ;main.c: 155: }
  2019                           ;main.c: 156: }
  2020                           ;main.c: 160: if ( PORTBbits.RB1 == 0 && toggled_screen == 0 ) {
  2021  0F3A  1283               	bcf	3,5	;RP0=0, select bank0
  2022  0F3B  1303               	bcf	3,6	;RP1=0, select bank0
  2023  0F3C  1886               	btfsc	6,1	;volatile
  2024  0F3D  2F66               	goto	l104
  2025  0F3E  08EC               	movf	main@toggled_screen,f
  2026  0F3F  1D03               	skipz
  2027  0F40  2F66               	goto	l104
  2028                           
  2029                           ;main.c: 161: _delay((unsigned long)((1)*(8000000/4000.0)));
  2030  0F41  3003               	movlw	3
  2031  0F42  1683               	bsf	3,5	;RP0=1, select bank1
  2032  0F43  1303               	bcf	3,6	;RP1=0, select bank1
  2033  0F44  00CB               	movwf	(??_main^(0+128)+1)
  2034  0F45  3097               	movlw	151
  2035  0F46  00CA               	movwf	??_main^(0+128)
  2036  0F47                     u4867:	
  2037  0F47  0BCA               	decfsz	??_main^(0+128),f
  2038  0F48  2F47               	goto	u4867
  2039  0F49  0BCB               	decfsz	(??_main^(0+128)+1),f
  2040  0F4A  2F47               	goto	u4867
  2041  0F4B  2F4C               	nop2
  2042                           
  2043                           ;main.c: 163: if ( screen_id == 0 ) {
  2044  0F4C  1683               	bsf	3,5	;RP0=1, select bank3
  2045  0F4D  1703               	bsf	3,6	;RP1=1, select bank3
  2046  0F4E  08D6               	movf	main@screen_id^(0+384),f
  2047  0F4F  1D03               	skipz
  2048  0F50  2F54               	goto	l3226
  2049                           
  2050                           ;main.c: 164: screen_id = 1;
  2051  0F51  01D6               	clrf	main@screen_id^(0+384)
  2052  0F52  0AD6               	incf	main@screen_id^(0+384),f
  2053                           
  2054                           ;main.c: 165: }
  2055  0F53  2F55               	goto	l3228
  2056  0F54                     l3226:	
  2057                           
  2058                           ;main.c: 166: else {
  2059                           ;main.c: 167: screen_id = 0;
  2060  0F54  01D6               	clrf	main@screen_id^(0+384)
  2061  0F55                     l3228:	
  2062                           ;main.c: 168: }
  2063                           ;main.c: 170: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0
      +                           );
  2064                           
  2065  0F55  3000               	movlw	0
  2066  0F56  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2067  0F5B  3001               	movlw	1
  2068  0F5C  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2069                           
  2070                           ;main.c: 171: toggled_screen = 1;
  2071  0F61  1283               	bcf	3,5	;RP0=0, select bank0
  2072  0F62  1303               	bcf	3,6	;RP1=0, select bank0
  2073  0F63  01EC               	clrf	main@toggled_screen
  2074  0F64  0AEC               	incf	main@toggled_screen,f
  2075                           
  2076                           ;main.c: 172: }
  2077  0F65  2F69               	goto	l3236
  2078  0F66                     l104:	
  2079                           
  2080                           ;main.c: 173: else if ( PORTBbits.RB1 == 1 ) {
  2081  0F66  1C86               	btfss	6,1	;volatile
  2082  0F67  2F69               	goto	l3236
  2083                           
  2084                           ;main.c: 174: toggled_screen = 0;
  2085  0F68  01EC               	clrf	main@toggled_screen
  2086  0F69                     l3236:	
  2087                           ;main.c: 175: }
  2088                           ;main.c: 178: do { if ( screen_id == 0 ) { do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 
      +                          0 & 0xF0) >> 4 ); LCD_Write( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do 
      +                          { LCD_Write( (0xC0 + 0 & 0xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } els
  2089                           
  2090  0F69  1683               	bsf	3,5	;RP0=1, select bank3
  2091  0F6A  1703               	bsf	3,6	;RP1=1, select bank3
  2092  0F6B  08D6               	movf	main@screen_id^(0+384),f
  2093  0F6C  1D03               	skipz
  2094  0F6D  2FC9               	goto	l3280
  2095  0F6E  3008               	movlw	8
  2096  0F6F  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2097  0F74  3000               	movlw	0
  2098  0F75  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2099  0F7A  30A1               	movlw	(STR_5-__stringbase)& (0+255)
  2100  0F7B  160A  158A  260C  120A  158A  	fcall	_LCD_putrs
  2101  0F80  300C               	movlw	12
  2102  0F81  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2103  0F86  3000               	movlw	0
  2104  0F87  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2105  0F8C  3090               	movlw	main@current_str& (0+255)
  2106  0F8D  160A  158A  25ED  120A  158A  	fcall	_LCD_puts
  2107  0F92  300C               	movlw	12
  2108  0F93  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2109  0F98  300A               	movlw	10
  2110  0F99  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2111  0F9E  3099               	movlw	(main@current_str+9)& (0+255)
  2112  0F9F  160A  158A  25ED  120A  158A  	fcall	_LCD_puts
  2113  0FA4  3009               	movlw	9
  2114  0FA5  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2115  0FAA  3004               	movlw	4
  2116  0FAB  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2117  0FB0  308C               	movlw	(STR_6-__stringbase)& (0+255)
  2118  0FB1  160A  158A  260C  120A  158A  	fcall	_LCD_putrs
  2119  0FB6  300D               	movlw	13
  2120  0FB7  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2121  0FBC  3009               	movlw	9
  2122  0FBD  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2123  0FC2  30A2               	movlw	(main@current_str+18)& (0+255)
  2124  0FC3  160A  158A  25ED  120A  158A  	fcall	_LCD_puts
  2125  0FC8  2CEE               	goto	l3136
  2126  0FC9                     l3280:	
  2127  0FC9  300C               	movlw	12
  2128  0FCA  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2129  0FCF  3000               	movlw	0
  2130  0FD0  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2131  0FD5  30B6               	movlw	(STR_7-__stringbase)& (0+255)
  2132  0FD6  160A  158A  260C  120A  158A  	fcall	_LCD_putrs
  2133  0FDB  3009               	movlw	9
  2134  0FDC  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2135  0FE1  3004               	movlw	4
  2136  0FE2  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2137  0FE7  30AB               	movlw	(main@current_str+27)& (0+255)
  2138  0FE8  160A  158A  25ED  120A  158A  	fcall	_LCD_puts
  2139  0FED  3009               	movlw	9
  2140  0FEE  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2141  0FF3  300E               	movlw	14
  2142  0FF4  160A  158A  26EA  120A  158A  	fcall	_LCD_Write
  2143  0FF9  30B4               	movlw	(main@current_str+36)& (0+255)
  2144  0FFA  160A  158A  25ED  120A  158A  	fcall	_LCD_puts
  2145                           
  2146                           ;main.c: 180: }
  2147  0FFF  2CEE               	goto	l3136
  2148  1000                     __end_of_main:	
  2149                           ;main.c: 182: return (0);
  2150                           ;	Return value of _main is never used
  2151                           
  2152                           
  2153                           	psect	text1
  2154  00CD                     __ptext1:	
  2155 ;; *************** function _sprintf *****************
  2156 ;; Defined at:
  2157 ;;		line 492 in file "/opt/microchip/xc8/v1.33/sources/common/doprnt.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  sp              1    wreg     PTR unsigned char 
  2160 ;;		 -> main@current_str(45), 
  2161 ;;  f               1   72[BANK0 ] PTR const unsigned char 
  2162 ;;		 -> STR_4(7), STR_3(7), 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  sp              1   38[BANK1 ] PTR unsigned char 
  2165 ;;		 -> main@current_str(45), 
  2166 ;;  vd              4   14[BANK1 ] unsigned long 
  2167 ;;  vd              4   18[BANK1 ] unsigned long 
  2168 ;;  _val            4   25[BANK1 ] struct .
  2169 ;;  fval            3   35[BANK1 ] struct .
  2170 ;;  integ           3   22[BANK1 ] struct .
  2171 ;;  ival            3    0        struct .
  2172 ;;  prec            2   39[BANK1 ] int 
  2173 ;;  exp             2   33[BANK1 ] int 
  2174 ;;  width           2   31[BANK1 ] int 
  2175 ;;  flag            2   29[BANK1 ] unsigned short 
  2176 ;;  c               1   41[BANK1 ] char 
  2177 ;;  ap              1   13[BANK1 ] PTR void [1]
  2178 ;;		 -> ?_sprintf(2), 
  2179 ;;  d               1    0        unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  2   72[BANK0 ] int 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2189 ;;      Params:         0       4       0       0       0
  2190 ;;      Locals:         0       0      36       0       0
  2191 ;;      Temps:          0       0       6       0       0
  2192 ;;      Totals:         0       4      42       0       0
  2193 ;;Total ram usage:       46 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    3
  2196 ;; This function calls:
  2197 ;;		___awdiv
  2198 ;;		___ftadd
  2199 ;;		___ftge
  2200 ;;		___ftmul
  2201 ;;		___ftneg
  2202 ;;		___ftsub
  2203 ;;		___fttol
  2204 ;;		___lldiv
  2205 ;;		___llmod
  2206 ;;		___lltoft
  2207 ;;		___wmul
  2208 ;;		__div_to_l_
  2209 ;;		__tdiv_to_l_
  2210 ;;		_fround
  2211 ;;		_isdigit
  2212 ;;		_scale
  2213 ;; This function is called by:
  2214 ;;		_main
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           
  2219                           ;psect for function _sprintf
  2220  00CD                     _sprintf:	
  2221                           
  2222                           ;incstack = 0
  2223                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2224                           ;sprintf@sp stored from wreg
  2225  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  2226  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  2227  00CF  00C6               	movwf	sprintf@sp^(0+128)
  2228                           
  2229                           ;doprnt.c: 494: va_list ap;
  2230                           ;doprnt.c: 499: signed char c;
  2231                           ;doprnt.c: 501: int width;
  2232                           ;doprnt.c: 504: int prec;
  2233                           ;doprnt.c: 508: unsigned short flag;
  2234                           ;doprnt.c: 515: char d;
  2235                           ;doprnt.c: 516: double fval, integ;
  2236                           ;doprnt.c: 517: int exp;
  2237                           ;doprnt.c: 518: double ival;
  2238                           ;doprnt.c: 519: union {
  2239                           ;doprnt.c: 520: unsigned long _val;
  2240                           ;doprnt.c: 521: struct {
  2241                           ;doprnt.c: 522: const char * _cp;
  2242                           ;doprnt.c: 523: unsigned _len;
  2243                           ;doprnt.c: 524: } _str;
  2244                           ;doprnt.c: 525: } _val;
  2245                           ;doprnt.c: 542: *ap = __va_start();
  2246  00D0  3069               	movlw	(?_sprintf+1)& (0+255)
  2247  00D1  00A0               	movwf	??_sprintf^(0+128)
  2248  00D2  0820               	movf	??_sprintf^(0+128),w
  2249  00D3  00AD               	movwf	sprintf@ap^(0+128)
  2250  00D4                     l3108:	
  2251                           ;doprnt.c: 545: while(c = *f++) {
  2252                           
  2253  00D4  3001               	movlw	1
  2254  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  2255  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  2256  00D7  07E8               	addwf	sprintf@f,f
  2257  00D8  30FF               	movlw	-1
  2258  00D9  0768               	addwf	sprintf@f,w
  2259  00DA  0084               	movwf	4
  2260  00DB  160A  118A  2000  120A  118A  	fcall	stringdir
  2261  00E0  1683               	bsf	3,5	;RP0=1, select bank1
  2262  00E1  1303               	bcf	3,6	;RP1=0, select bank1
  2263  00E2  00A0               	movwf	??_sprintf^(0+128)
  2264  00E3  0820               	movf	??_sprintf^(0+128),w
  2265  00E4  00C9               	movwf	sprintf@c^(0+128)
  2266  00E5  08C9               	movf	sprintf@c^(0+128),f
  2267  00E6  1903               	btfsc	3,2
  2268  00E7  2FDE               	goto	l3110
  2269                           
  2270                           ;doprnt.c: 547: if(c != '%')
  2271  00E8  0849               	movf	sprintf@c^(0+128),w
  2272  00E9  3A25               	xorlw	37
  2273  00EA  1903               	skipnz
  2274  00EB  28EE               	goto	l2868
  2275                           
  2276                           ;doprnt.c: 549: {
  2277                           ;doprnt.c: 550: ((*sp++ = (c)));
  2278  00EC  0849               	movf	sprintf@c^(0+128),w
  2279  00ED  2FD3               	goto	L8
  2280  00EE                     l2868:	
  2281                           ;doprnt.c: 551: continue;
  2282                           
  2283                           
  2284                           ;doprnt.c: 552: }
  2285                           ;doprnt.c: 555: width = 0;
  2286  00EE  01BF               	clrf	sprintf@width^(0+128)
  2287  00EF  01C0               	clrf	(sprintf@width+1)^(0+128)
  2288                           
  2289                           ;doprnt.c: 557: flag = 0;
  2290  00F0  01BD               	clrf	sprintf@flag^(0+128)
  2291  00F1  01BE               	clrf	(sprintf@flag+1)^(0+128)
  2292                           
  2293                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2294  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  2295  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  2296  00F4  0868               	movf	sprintf@f,w
  2297  00F5  0084               	movwf	4
  2298  00F6  160A  118A  2000  120A  118A  	fcall	stringdir
  2299  00FB  160A  158A  2593  120A  118A  	fcall	_isdigit
  2300  0100  1C03               	btfss	3,0
  2301  0101  294A               	goto	l2882
  2302                           
  2303                           ;doprnt.c: 607: width = 0;
  2304  0102  1683               	bsf	3,5	;RP0=1, select bank1
  2305  0103  1303               	bcf	3,6	;RP1=0, select bank1
  2306  0104  01BF               	clrf	sprintf@width^(0+128)
  2307  0105  01C0               	clrf	(sprintf@width+1)^(0+128)
  2308  0106                     l2874:	
  2309                           ;doprnt.c: 608: do {
  2310                           
  2311                           
  2312                           ;doprnt.c: 609: width *= 10;
  2313  0106  300A               	movlw	10
  2314  0107  00F0               	movwf	___wmul@multiplier
  2315  0108  3000               	movlw	0
  2316  0109  00F1               	movwf	___wmul@multiplier+1
  2317  010A  1683               	bsf	3,5	;RP0=1, select bank1
  2318  010B  1303               	bcf	3,6	;RP1=0, select bank1
  2319  010C  0840               	movf	(sprintf@width+1)^(0+128),w
  2320  010D  01F3               	clrf	___wmul@multiplicand+1
  2321  010E  07F3               	addwf	___wmul@multiplicand+1,f
  2322  010F  083F               	movf	sprintf@width^(0+128),w
  2323  0110  01F2               	clrf	___wmul@multiplicand
  2324  0111  07F2               	addwf	___wmul@multiplicand,f
  2325  0112  160A  158A  262E  120A  118A  	fcall	___wmul
  2326  0117  0871               	movf	?___wmul+1,w
  2327  0118  1683               	bsf	3,5	;RP0=1, select bank1
  2328  0119  1303               	bcf	3,6	;RP1=0, select bank1
  2329  011A  01C0               	clrf	(sprintf@width+1)^(0+128)
  2330  011B  07C0               	addwf	(sprintf@width+1)^(0+128),f
  2331  011C  0870               	movf	?___wmul,w
  2332  011D  01BF               	clrf	sprintf@width^(0+128)
  2333  011E  07BF               	addwf	sprintf@width^(0+128),f
  2334                           
  2335                           ;doprnt.c: 610: width += *f++ - '0';
  2336  011F  1283               	bcf	3,5	;RP0=0, select bank0
  2337  0120  1303               	bcf	3,6	;RP1=0, select bank0
  2338  0121  0868               	movf	sprintf@f,w
  2339  0122  0084               	movwf	4
  2340  0123  160A  118A  2000  120A  118A  	fcall	stringdir
  2341  0128  3ED0               	addlw	208
  2342  0129  1683               	bsf	3,5	;RP0=1, select bank1
  2343  012A  1303               	bcf	3,6	;RP1=0, select bank1
  2344  012B  00A0               	movwf	??_sprintf^(0+128)
  2345  012C  30FF               	movlw	255
  2346  012D  1803               	skipnc
  2347  012E  3000               	movlw	0
  2348  012F  00A1               	movwf	(??_sprintf^(0+128)+1)
  2349  0130  0820               	movf	??_sprintf^(0+128),w
  2350  0131  07BF               	addwf	sprintf@width^(0+128),f
  2351  0132  1803               	skipnc
  2352  0133  0AC0               	incf	(sprintf@width+1)^(0+128),f
  2353  0134  0821               	movf	(??_sprintf+1)^(0+128),w
  2354  0135  07C0               	addwf	(sprintf@width+1)^(0+128),f
  2355  0136  3001               	movlw	1
  2356  0137  00A0               	movwf	??_sprintf^(0+128)
  2357  0138  0820               	movf	??_sprintf^(0+128),w
  2358  0139  1283               	bcf	3,5	;RP0=0, select bank0
  2359  013A  1303               	bcf	3,6	;RP1=0, select bank0
  2360  013B  07E8               	addwf	sprintf@f,f
  2361                           
  2362                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2363  013C  0868               	movf	sprintf@f,w
  2364  013D  0084               	movwf	4
  2365  013E  160A  118A  2000  120A  118A  	fcall	stringdir
  2366  0143  160A  158A  2593  120A  118A  	fcall	_isdigit
  2367  0148  1803               	btfsc	3,0
  2368  0149  2906               	goto	l2874
  2369  014A                     l2882:	
  2370                           
  2371                           ;doprnt.c: 617: }
  2372                           ;doprnt.c: 620: if(*f == '.') {
  2373  014A  1283               	bcf	3,5	;RP0=0, select bank0
  2374  014B  1303               	bcf	3,6	;RP1=0, select bank0
  2375  014C  0868               	movf	sprintf@f,w
  2376  014D  0084               	movwf	4
  2377  014E  160A  118A  2000  120A  118A  	fcall	stringdir
  2378  0153  3A2E               	xorlw	46
  2379  0154  1D03               	skipz
  2380  0155  29A4               	goto	l2896
  2381                           
  2382                           ;doprnt.c: 621: flag |= 0x4000;
  2383  0156  1683               	bsf	3,5	;RP0=1, select bank1
  2384  0157  1303               	bcf	3,6	;RP1=0, select bank1
  2385  0158  173E               	bsf	(sprintf@flag^(0+128)+1),6
  2386                           
  2387                           ;doprnt.c: 622: f++;
  2388  0159  3001               	movlw	1
  2389  015A  00A0               	movwf	??_sprintf^(0+128)
  2390  015B  0820               	movf	??_sprintf^(0+128),w
  2391  015C  1283               	bcf	3,5	;RP0=0, select bank0
  2392  015D  1303               	bcf	3,6	;RP1=0, select bank0
  2393  015E  07E8               	addwf	sprintf@f,f
  2394                           
  2395                           ;doprnt.c: 629: {
  2396                           ;doprnt.c: 630: prec = 0;
  2397  015F  1683               	bsf	3,5	;RP0=1, select bank1
  2398  0160  1303               	bcf	3,6	;RP1=0, select bank1
  2399  0161  01C7               	clrf	sprintf@prec^(0+128)
  2400  0162  01C8               	clrf	(sprintf@prec+1)^(0+128)
  2401  0163                     l2894:	
  2402                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  2403                           
  2404  0163  1283               	bcf	3,5	;RP0=0, select bank0
  2405  0164  0868               	movf	sprintf@f,w
  2406  0165  0084               	movwf	4
  2407  0166  160A  118A  2000  120A  118A  	fcall	stringdir
  2408  016B  160A  158A  2593  120A  118A  	fcall	_isdigit
  2409  0170  1C03               	btfss	3,0
  2410  0171  29AC               	goto	l2902
  2411                           
  2412                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  2413  0172  1683               	bsf	3,5	;RP0=1, select bank1
  2414  0173  1303               	bcf	3,6	;RP1=0, select bank1
  2415  0174  0848               	movf	(sprintf@prec+1)^(0+128),w
  2416  0175  01F1               	clrf	___wmul@multiplier+1
  2417  0176  07F1               	addwf	___wmul@multiplier+1,f
  2418  0177  0847               	movf	sprintf@prec^(0+128),w
  2419  0178  01F0               	clrf	___wmul@multiplier
  2420  0179  07F0               	addwf	___wmul@multiplier,f
  2421  017A  300A               	movlw	10
  2422  017B  00F2               	movwf	___wmul@multiplicand
  2423  017C  3000               	movlw	0
  2424  017D  00F3               	movwf	___wmul@multiplicand+1
  2425  017E  160A  158A  262E  120A  118A  	fcall	___wmul
  2426  0183  1283               	bcf	3,5	;RP0=0, select bank0
  2427  0184  1303               	bcf	3,6	;RP1=0, select bank0
  2428  0185  0868               	movf	sprintf@f,w
  2429  0186  0084               	movwf	4
  2430  0187  160A  118A  2000  120A  118A  	fcall	stringdir
  2431  018C  0770               	addwf	?___wmul,w
  2432  018D  1683               	bsf	3,5	;RP0=1, select bank1
  2433  018E  1303               	bcf	3,6	;RP1=0, select bank1
  2434  018F  00A0               	movwf	??_sprintf^(0+128)
  2435  0190  3000               	movlw	0
  2436  0191  1803               	skipnc
  2437  0192  3001               	movlw	1
  2438  0193  0771               	addwf	?___wmul+1,w
  2439  0194  00A1               	movwf	(??_sprintf+1)^(0+128)
  2440  0195  0820               	movf	??_sprintf^(0+128),w
  2441  0196  3ED0               	addlw	208
  2442  0197  00C7               	movwf	sprintf@prec^(0+128)
  2443  0198  0821               	movf	(??_sprintf+1)^(0+128),w
  2444  0199  1803               	skipnc
  2445  019A  3E01               	addlw	1
  2446  019B  3EFF               	addlw	255
  2447  019C  00C8               	movwf	(sprintf@prec+1)^(0+128)
  2448  019D  3001               	movlw	1
  2449  019E  00A0               	movwf	??_sprintf^(0+128)
  2450  019F  0820               	movf	??_sprintf^(0+128),w
  2451  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2452  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  2453  01A2  07E8               	addwf	sprintf@f,f
  2454  01A3  2963               	goto	l2894
  2455  01A4                     l2896:	
  2456                           ;doprnt.c: 633: }
  2457                           ;doprnt.c: 634: } else {
  2458                           
  2459                           
  2460                           ;doprnt.c: 635: prec = 0;
  2461  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  2462  01A5  1303               	bcf	3,6	;RP1=0, select bank1
  2463  01A6  01C7               	clrf	sprintf@prec^(0+128)
  2464  01A7  01C8               	clrf	(sprintf@prec+1)^(0+128)
  2465                           
  2466                           ;doprnt.c: 637: flag |= 0x1000;
  2467  01A8  163E               	bsf	(sprintf@flag^(0+128)+1),4
  2468                           
  2469                           ;doprnt.c: 639: }
  2470                           ;doprnt.c: 644: switch(c = *f++) {
  2471  01A9  29AC               	goto	l2902
  2472  01AA                     l397:	
  2473                           ;doprnt.c: 671: case 'f':
  2474                           
  2475                           ;doprnt.c: 647: goto alldone;
  2476                           
  2477                           ;doprnt.c: 646: case 0:
  2478                           
  2479                           
  2480                           ;doprnt.c: 672: flag |= 0x400;
  2481  01AA  153E               	bsf	(sprintf@flag^(0+128)+1),2
  2482                           
  2483                           ;doprnt.c: 673: break;
  2484  01AB  29C2               	goto	l2904
  2485  01AC                     l2902:	
  2486                           ;doprnt.c: 831: }
  2487                           
  2488                           ;doprnt.c: 822: continue;
  2489                           
  2490                           ;doprnt.c: 811: default:
  2491                           
  2492  01AC  3001               	movlw	1
  2493  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  2494  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  2495  01AF  07E8               	addwf	sprintf@f,f
  2496  01B0  30FF               	movlw	-1
  2497  01B1  0768               	addwf	sprintf@f,w
  2498  01B2  0084               	movwf	4
  2499  01B3  160A  118A  2000  120A  118A  	fcall	stringdir
  2500  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  2501  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  2502  01BA  00C9               	movwf	sprintf@c^(0+128)
  2503                           
  2504                           ; Switch size 1, requested type "space"
  2505                           ; Number of cases is 2, Range of values is 0 to 102
  2506                           ; switch strategies available:
  2507                           ; Name         Instructions Cycles
  2508                           ; simple_byte            7     4 (average)
  2509                           ; jumptable            260     6 (fixed)
  2510                           ;	Chosen strategy is simple_byte
  2511  01BB  3A00               	xorlw	0	; case 0
  2512  01BC  1903               	skipnz
  2513  01BD  2FDE               	goto	l3110
  2514  01BE  3A66               	xorlw	102	; case 102
  2515  01BF  1903               	skipnz
  2516  01C0  29AA               	goto	l397
  2517  01C1  28D4               	goto	l3108
  2518  01C2                     l2904:	
  2519                           
  2520                           ;doprnt.c: 834: if(flag & (0x700)) {
  2521  01C2  3000               	movlw	0
  2522  01C3  053D               	andwf	sprintf@flag^(0+128),w
  2523  01C4  00A0               	movwf	??_sprintf^(0+128)
  2524  01C5  3007               	movlw	7
  2525  01C6  053E               	andwf	(sprintf@flag+1)^(0+128),w
  2526  01C7  00A1               	movwf	(??_sprintf+1)^(0+128)
  2527  01C8  0821               	movf	(??_sprintf+1)^(0+128),w
  2528  01C9  0420               	iorwf	??_sprintf^(0+128),w
  2529  01CA  1903               	skipnz
  2530  01CB  2F19               	goto	l3062
  2531                           
  2532                           ;doprnt.c: 836: if(flag & 0x1000)
  2533  01CC  1E3E               	btfss	(sprintf@flag+1)^(0+128),4
  2534  01CD  29D2               	goto	l2910
  2535                           
  2536                           ;doprnt.c: 838: prec = 6;
  2537  01CE  3006               	movlw	6
  2538  01CF  00C7               	movwf	sprintf@prec^(0+128)
  2539  01D0  3000               	movlw	0
  2540  01D1  00C8               	movwf	(sprintf@prec^(0+128)+1)
  2541  01D2                     l2910:	
  2542                           
  2543                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2544  01D2  082D               	movf	sprintf@ap^(0+128),w
  2545  01D3  0084               	movwf	4
  2546  01D4  1383               	bcf	3,7	;select IRP bank0
  2547  01D5  0800               	movf	0,w
  2548  01D6  00C3               	movwf	sprintf@fval^(0+128)
  2549  01D7  0A84               	incf	4,f
  2550  01D8  0800               	movf	0,w
  2551  01D9  00C4               	movwf	(sprintf@fval+1)^(0+128)
  2552  01DA  0A84               	incf	4,f
  2553  01DB  0800               	movf	0,w
  2554  01DC  00C5               	movwf	(sprintf@fval+2)^(0+128)
  2555  01DD  3003               	movlw	3
  2556  01DE  00A0               	movwf	??_sprintf^(0+128)
  2557  01DF  0820               	movf	??_sprintf^(0+128),w
  2558  01E0  07AD               	addwf	sprintf@ap^(0+128),f
  2559                           
  2560                           ;doprnt.c: 840: if(fval < 0.0) {
  2561  01E1  0843               	movf	sprintf@fval^(0+128),w
  2562  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  2563  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  2564  01E4  00A7               	movwf	___ftge@ff1
  2565  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  2566  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  2567  01E7  0844               	movf	(sprintf@fval+1)^(0+128),w
  2568  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  2569  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  2570  01EA  00A8               	movwf	___ftge@ff1+1
  2571  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  2572  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  2573  01ED  0845               	movf	(sprintf@fval+2)^(0+128),w
  2574  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  2575  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  2576  01F0  00A9               	movwf	___ftge@ff1+2
  2577  01F1  3000               	movlw	0
  2578  01F2  00AA               	movwf	___ftge@ff2
  2579  01F3  3000               	movlw	0
  2580  01F4  00AB               	movwf	___ftge@ff2+1
  2581  01F5  3000               	movlw	0
  2582  01F6  00AC               	movwf	___ftge@ff2+2
  2583  01F7  160A  118A  2111  120A  118A  	fcall	___ftge
  2584  01FC  1803               	btfsc	3,0
  2585  01FD  2A2B               	goto	l2920
  2586                           
  2587                           ;doprnt.c: 841: fval = -fval;
  2588  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  2589  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  2590  0200  0843               	movf	sprintf@fval^(0+128),w
  2591  0201  1283               	bcf	3,5	;RP0=0, select bank0
  2592  0202  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0203  00A7               	movwf	___ftneg@f1
  2594  0204  1683               	bsf	3,5	;RP0=1, select bank1
  2595  0205  1303               	bcf	3,6	;RP1=0, select bank1
  2596  0206  0844               	movf	(sprintf@fval+1)^(0+128),w
  2597  0207  1283               	bcf	3,5	;RP0=0, select bank0
  2598  0208  1303               	bcf	3,6	;RP1=0, select bank0
  2599  0209  00A8               	movwf	___ftneg@f1+1
  2600  020A  1683               	bsf	3,5	;RP0=1, select bank1
  2601  020B  1303               	bcf	3,6	;RP1=0, select bank1
  2602  020C  0845               	movf	(sprintf@fval+2)^(0+128),w
  2603  020D  1283               	bcf	3,5	;RP0=0, select bank0
  2604  020E  1303               	bcf	3,6	;RP1=0, select bank0
  2605  020F  00A9               	movwf	___ftneg@f1+2
  2606  0210  160A  158A  257B  120A  118A  	fcall	___ftneg
  2607  0215  1283               	bcf	3,5	;RP0=0, select bank0
  2608  0216  1303               	bcf	3,6	;RP1=0, select bank0
  2609  0217  0827               	movf	?___ftneg,w
  2610  0218  1683               	bsf	3,5	;RP0=1, select bank1
  2611  0219  1303               	bcf	3,6	;RP1=0, select bank1
  2612  021A  00C3               	movwf	sprintf@fval^(0+128)
  2613  021B  1283               	bcf	3,5	;RP0=0, select bank0
  2614  021C  1303               	bcf	3,6	;RP1=0, select bank0
  2615  021D  0828               	movf	?___ftneg+1,w
  2616  021E  1683               	bsf	3,5	;RP0=1, select bank1
  2617  021F  1303               	bcf	3,6	;RP1=0, select bank1
  2618  0220  00C4               	movwf	(sprintf@fval+1)^(0+128)
  2619  0221  1283               	bcf	3,5	;RP0=0, select bank0
  2620  0222  1303               	bcf	3,6	;RP1=0, select bank0
  2621  0223  0829               	movf	?___ftneg+2,w
  2622  0224  1683               	bsf	3,5	;RP0=1, select bank1
  2623  0225  1303               	bcf	3,6	;RP1=0, select bank1
  2624  0226  00C5               	movwf	(sprintf@fval+2)^(0+128)
  2625                           
  2626                           ;doprnt.c: 842: flag |= 0x03;
  2627  0227  3003               	movlw	3
  2628  0228  04BD               	iorwf	sprintf@flag^(0+128),f
  2629  0229  3000               	movlw	0
  2630  022A  04BE               	iorwf	(sprintf@flag+1)^(0+128),f
  2631  022B                     l2920:	
  2632                           
  2633                           ;doprnt.c: 843: }
  2634                           ;doprnt.c: 844: exp = 0;
  2635  022B  1683               	bsf	3,5	;RP0=1, select bank1
  2636  022C  1303               	bcf	3,6	;RP1=0, select bank1
  2637  022D  01C1               	clrf	sprintf@exp^(0+128)
  2638  022E  01C2               	clrf	(sprintf@exp+1)^(0+128)
  2639                           
  2640                           ;doprnt.c: 845: if( fval!=0) {
  2641  022F  0845               	movf	(sprintf@fval+2)^(0+128),w
  2642  0230  0444               	iorwf	(sprintf@fval+1)^(0+128),w
  2643  0231  0443               	iorwf	sprintf@fval^(0+128),w
  2644  0232  1903               	skipnz
  2645  0233  2B33               	goto	l2948
  2646                           
  2647                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2648  0234  30C3               	movlw	low sprintf@fval
  2649  0235  0084               	movwf	4
  2650  0236  1383               	bcf	3,7	;select IRP bank1
  2651  0237  0800               	movf	0,w
  2652  0238  00A0               	movwf	??_sprintf^(0+128)
  2653  0239  0A84               	incf	4,f
  2654  023A  0800               	movf	0,w
  2655  023B  00A1               	movwf	(??_sprintf^(0+128)+1)
  2656  023C  0A84               	incf	4,f
  2657  023D  0800               	movf	0,w
  2658  023E  00A2               	movwf	(??_sprintf^(0+128)+2)
  2659  023F  0A84               	incf	4,f
  2660  0240  0800               	movf	0,w
  2661  0241  00A3               	movwf	(??_sprintf^(0+128)+3)
  2662  0242  300F               	movlw	15
  2663  0243                     u4215:	
  2664  0243  1003               	clrc
  2665  0244  0CA3               	rrf	(??_sprintf^(0+128)+3),f
  2666  0245  0CA2               	rrf	(??_sprintf^(0+128)+2),f
  2667  0246  0CA1               	rrf	(??_sprintf^(0+128)+1),f
  2668  0247  0CA0               	rrf	??_sprintf^(0+128),f
  2669  0248  3EFF               	addlw	-1
  2670  0249  1D03               	skipz
  2671  024A  2A43               	goto	u4215
  2672  024B  30FF               	movlw	255
  2673  024C  0520               	andwf	??_sprintf^(0+128),w
  2674  024D  00A4               	movwf	(??_sprintf+4)^(0+128)
  2675  024E  3000               	movlw	0
  2676  024F  0521               	andwf	(??_sprintf+1)^(0+128),w
  2677  0250  00A5               	movwf	(??_sprintf+5)^(0+128)
  2678  0251  0824               	movf	(??_sprintf+4)^(0+128),w
  2679  0252  3E82               	addlw	130
  2680  0253  00C1               	movwf	sprintf@exp^(0+128)
  2681  0254  0825               	movf	(??_sprintf+5)^(0+128),w
  2682  0255  1803               	skipnc
  2683  0256  3E01               	addlw	1
  2684  0257  3EFF               	addlw	255
  2685  0258  00C2               	movwf	(sprintf@exp+1)^(0+128)
  2686                           
  2687                           ;doprnt.c: 847: exp--;
  2688  0259  30FF               	movlw	255
  2689  025A  07C1               	addwf	sprintf@exp^(0+128),f
  2690  025B  1803               	skipnc
  2691  025C  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  2692  025D  30FF               	movlw	255
  2693  025E  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2694                           
  2695                           ;doprnt.c: 848: exp *= 3;
  2696  025F  3003               	movlw	3
  2697  0260  00F0               	movwf	___wmul@multiplier
  2698  0261  3000               	movlw	0
  2699  0262  00F1               	movwf	___wmul@multiplier+1
  2700  0263  0842               	movf	(sprintf@exp+1)^(0+128),w
  2701  0264  01F3               	clrf	___wmul@multiplicand+1
  2702  0265  07F3               	addwf	___wmul@multiplicand+1,f
  2703  0266  0841               	movf	sprintf@exp^(0+128),w
  2704  0267  01F2               	clrf	___wmul@multiplicand
  2705  0268  07F2               	addwf	___wmul@multiplicand,f
  2706  0269  160A  158A  262E  120A  118A  	fcall	___wmul
  2707  026E  0871               	movf	?___wmul+1,w
  2708  026F  1683               	bsf	3,5	;RP0=1, select bank1
  2709  0270  1303               	bcf	3,6	;RP1=0, select bank1
  2710  0271  01C2               	clrf	(sprintf@exp+1)^(0+128)
  2711  0272  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2712  0273  0870               	movf	?___wmul,w
  2713  0274  01C1               	clrf	sprintf@exp^(0+128)
  2714  0275  07C1               	addwf	sprintf@exp^(0+128),f
  2715                           
  2716                           ;doprnt.c: 849: exp /= 10;
  2717  0276  300A               	movlw	10
  2718  0277  00F7               	movwf	___awdiv@divisor
  2719  0278  3000               	movlw	0
  2720  0279  00F8               	movwf	___awdiv@divisor+1
  2721  027A  0842               	movf	(sprintf@exp+1)^(0+128),w
  2722  027B  01FA               	clrf	___awdiv@dividend+1
  2723  027C  07FA               	addwf	___awdiv@dividend+1,f
  2724  027D  0841               	movf	sprintf@exp^(0+128),w
  2725  027E  01F9               	clrf	___awdiv@dividend
  2726  027F  07F9               	addwf	___awdiv@dividend,f
  2727  0280  160A  158A  2745  120A  118A  	fcall	___awdiv
  2728  0285  0878               	movf	?___awdiv+1,w
  2729  0286  1683               	bsf	3,5	;RP0=1, select bank1
  2730  0287  1303               	bcf	3,6	;RP1=0, select bank1
  2731  0288  01C2               	clrf	(sprintf@exp+1)^(0+128)
  2732  0289  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2733  028A  0877               	movf	?___awdiv,w
  2734  028B  01C1               	clrf	sprintf@exp^(0+128)
  2735  028C  07C1               	addwf	sprintf@exp^(0+128),f
  2736                           
  2737                           ;doprnt.c: 850: if(exp < 0)
  2738  028D  1FC2               	btfss	(sprintf@exp+1)^(0+128),7
  2739  028E  2A95               	goto	l2936
  2740                           
  2741                           ;doprnt.c: 851: exp--;
  2742  028F  30FF               	movlw	255
  2743  0290  07C1               	addwf	sprintf@exp^(0+128),f
  2744  0291  1803               	skipnc
  2745  0292  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  2746  0293  30FF               	movlw	255
  2747  0294  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2748  0295                     l2936:	
  2749                           
  2750                           ;doprnt.c: 855: integ = scale(-exp);
  2751  0295  0341               	decf	sprintf@exp^(0+128),w
  2752  0296  3AFF               	xorlw	255
  2753  0297  120A  158A  21DF  120A  118A  	fcall	_scale
  2754  029C  1283               	bcf	3,5	;RP0=0, select bank0
  2755  029D  1303               	bcf	3,6	;RP1=0, select bank0
  2756  029E  0845               	movf	?_scale,w
  2757  029F  1683               	bsf	3,5	;RP0=1, select bank1
  2758  02A0  1303               	bcf	3,6	;RP1=0, select bank1
  2759  02A1  00B6               	movwf	sprintf@integ^(0+128)
  2760  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  2761  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  2762  02A4  0846               	movf	?_scale+1,w
  2763  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  2764  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  2765  02A7  00B7               	movwf	(sprintf@integ+1)^(0+128)
  2766  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  2767  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  2768  02AA  0847               	movf	?_scale+2,w
  2769  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  2770  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  2771  02AD  00B8               	movwf	(sprintf@integ+2)^(0+128)
  2772                           
  2773                           ;doprnt.c: 856: integ *= fval;
  2774  02AE  0843               	movf	sprintf@fval^(0+128),w
  2775  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2776  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2777  02B1  00B5               	movwf	___ftmul@f1
  2778  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  2779  02B3  1303               	bcf	3,6	;RP1=0, select bank1
  2780  02B4  0844               	movf	(sprintf@fval+1)^(0+128),w
  2781  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2782  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  2783  02B7  00B6               	movwf	___ftmul@f1+1
  2784  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  2785  02B9  1303               	bcf	3,6	;RP1=0, select bank1
  2786  02BA  0845               	movf	(sprintf@fval+2)^(0+128),w
  2787  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2788  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  2789  02BD  00B7               	movwf	___ftmul@f1+2
  2790  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  2791  02BF  1303               	bcf	3,6	;RP1=0, select bank1
  2792  02C0  0836               	movf	sprintf@integ^(0+128),w
  2793  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  2794  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  2795  02C3  00B8               	movwf	___ftmul@f2
  2796  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  2797  02C5  1303               	bcf	3,6	;RP1=0, select bank1
  2798  02C6  0837               	movf	(sprintf@integ+1)^(0+128),w
  2799  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  2800  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  2801  02C9  00B9               	movwf	___ftmul@f2+1
  2802  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  2803  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  2804  02CC  0838               	movf	(sprintf@integ+2)^(0+128),w
  2805  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2806  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2807  02CF  00BA               	movwf	___ftmul@f2+2
  2808  02D0  160A  118A  24F2  120A  118A  	fcall	___ftmul
  2809  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2810  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  2811  02D7  0835               	movf	?___ftmul,w
  2812  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  2813  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  2814  02DA  00B6               	movwf	sprintf@integ^(0+128)
  2815  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2816  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  2817  02DD  0836               	movf	?___ftmul+1,w
  2818  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  2819  02DF  1303               	bcf	3,6	;RP1=0, select bank1
  2820  02E0  00B7               	movwf	(sprintf@integ+1)^(0+128)
  2821  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  2822  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  2823  02E3  0837               	movf	?___ftmul+2,w
  2824  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  2825  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  2826  02E6  00B8               	movwf	(sprintf@integ+2)^(0+128)
  2827                           
  2828                           ;doprnt.c: 857: if(integ < 1.0)
  2829  02E7  0836               	movf	sprintf@integ^(0+128),w
  2830  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  2831  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  2832  02EA  00A7               	movwf	___ftge@ff1
  2833  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  2834  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  2835  02ED  0837               	movf	(sprintf@integ+1)^(0+128),w
  2836  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  2837  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  2838  02F0  00A8               	movwf	___ftge@ff1+1
  2839  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  2840  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  2841  02F3  0838               	movf	(sprintf@integ+2)^(0+128),w
  2842  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2843  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2844  02F6  00A9               	movwf	___ftge@ff1+2
  2845  02F7  3000               	movlw	0
  2846  02F8  00AA               	movwf	___ftge@ff2
  2847  02F9  3080               	movlw	128
  2848  02FA  00AB               	movwf	___ftge@ff2+1
  2849  02FB  303F               	movlw	63
  2850  02FC  00AC               	movwf	___ftge@ff2+2
  2851  02FD  160A  118A  2111  120A  118A  	fcall	___ftge
  2852  0302  1803               	btfsc	3,0
  2853  0303  2B0C               	goto	l2944
  2854                           
  2855                           ;doprnt.c: 858: exp--;
  2856  0304  30FF               	movlw	255
  2857  0305  1683               	bsf	3,5	;RP0=1, select bank1
  2858  0306  1303               	bcf	3,6	;RP1=0, select bank1
  2859  0307  07C1               	addwf	sprintf@exp^(0+128),f
  2860  0308  1803               	skipnc
  2861  0309  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  2862  030A  30FF               	movlw	255
  2863  030B  2B32               	goto	L3
  2864  030C                     l2944:	
  2865                           
  2866                           ;doprnt.c: 859: else if(integ >= 10.0)
  2867  030C  1683               	bsf	3,5	;RP0=1, select bank1
  2868  030D  1303               	bcf	3,6	;RP1=0, select bank1
  2869  030E  0836               	movf	sprintf@integ^(0+128),w
  2870  030F  1283               	bcf	3,5	;RP0=0, select bank0
  2871  0310  1303               	bcf	3,6	;RP1=0, select bank0
  2872  0311  00A7               	movwf	___ftge@ff1
  2873  0312  1683               	bsf	3,5	;RP0=1, select bank1
  2874  0313  1303               	bcf	3,6	;RP1=0, select bank1
  2875  0314  0837               	movf	(sprintf@integ+1)^(0+128),w
  2876  0315  1283               	bcf	3,5	;RP0=0, select bank0
  2877  0316  1303               	bcf	3,6	;RP1=0, select bank0
  2878  0317  00A8               	movwf	___ftge@ff1+1
  2879  0318  1683               	bsf	3,5	;RP0=1, select bank1
  2880  0319  1303               	bcf	3,6	;RP1=0, select bank1
  2881  031A  0838               	movf	(sprintf@integ+2)^(0+128),w
  2882  031B  1283               	bcf	3,5	;RP0=0, select bank0
  2883  031C  1303               	bcf	3,6	;RP1=0, select bank0
  2884  031D  00A9               	movwf	___ftge@ff1+2
  2885  031E  3000               	movlw	0
  2886  031F  00AA               	movwf	___ftge@ff2
  2887  0320  3020               	movlw	32
  2888  0321  00AB               	movwf	___ftge@ff2+1
  2889  0322  3041               	movlw	65
  2890  0323  00AC               	movwf	___ftge@ff2+2
  2891  0324  160A  118A  2111  120A  118A  	fcall	___ftge
  2892  0329  1C03               	btfss	3,0
  2893  032A  2B33               	goto	l2948
  2894                           
  2895                           ;doprnt.c: 860: exp++;
  2896  032B  3001               	movlw	1
  2897  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2898  032D  1303               	bcf	3,6	;RP1=0, select bank1
  2899  032E  07C1               	addwf	sprintf@exp^(0+128),f
  2900  032F  1803               	skipnc
  2901  0330  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  2902  0331  3000               	movlw	0
  2903  0332                     L3:	
  2904  0332  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  2905  0333                     l2948:	
  2906                           
  2907                           ;doprnt.c: 861: }
  2908                           ;doprnt.c: 1121: if(prec <= 12)
  2909  0333  1683               	bsf	3,5	;RP0=1, select bank1
  2910  0334  1303               	bcf	3,6	;RP1=0, select bank1
  2911  0335  0848               	movf	(sprintf@prec+1)^(0+128),w
  2912  0336  3A80               	xorlw	128
  2913  0337  00FF               	movwf	127
  2914  0338  3080               	movlw	128
  2915  0339  027F               	subwf	127,w
  2916  033A  1D03               	skipz
  2917  033B  2B3E               	goto	u4255
  2918  033C  300D               	movlw	13
  2919  033D  0247               	subwf	sprintf@prec^(0+128),w
  2920  033E                     u4255:	
  2921  033E  1803               	skipnc
  2922  033F  2B79               	goto	l2952
  2923                           
  2924                           ;doprnt.c: 1122: fval += fround(prec);
  2925  0340  1683               	bsf	3,5	;RP0=1, select bank1
  2926  0341  1303               	bcf	3,6	;RP1=0, select bank1
  2927  0342  0847               	movf	sprintf@prec^(0+128),w
  2928  0343  120A  158A  2043  120A  118A  	fcall	_fround
  2929  0348  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0349  1303               	bcf	3,6	;RP1=0, select bank0
  2931  034A  0845               	movf	?_fround,w
  2932  034B  00D5               	movwf	___ftadd@f1
  2933  034C  0846               	movf	?_fround+1,w
  2934  034D  00D6               	movwf	___ftadd@f1+1
  2935  034E  0847               	movf	?_fround+2,w
  2936  034F  00D7               	movwf	___ftadd@f1+2
  2937  0350  1683               	bsf	3,5	;RP0=1, select bank1
  2938  0351  1303               	bcf	3,6	;RP1=0, select bank1
  2939  0352  0843               	movf	sprintf@fval^(0+128),w
  2940  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2941  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2942  0355  00D8               	movwf	___ftadd@f2
  2943  0356  1683               	bsf	3,5	;RP0=1, select bank1
  2944  0357  1303               	bcf	3,6	;RP1=0, select bank1
  2945  0358  0844               	movf	(sprintf@fval+1)^(0+128),w
  2946  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2947  035A  1303               	bcf	3,6	;RP1=0, select bank0
  2948  035B  00D9               	movwf	___ftadd@f2+1
  2949  035C  1683               	bsf	3,5	;RP0=1, select bank1
  2950  035D  1303               	bcf	3,6	;RP1=0, select bank1
  2951  035E  0845               	movf	(sprintf@fval+2)^(0+128),w
  2952  035F  1283               	bcf	3,5	;RP0=0, select bank0
  2953  0360  1303               	bcf	3,6	;RP1=0, select bank0
  2954  0361  00DA               	movwf	___ftadd@f2+2
  2955  0362  160A  118A  25C5  120A  118A  	fcall	___ftadd
  2956  0367  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0368  1303               	bcf	3,6	;RP1=0, select bank0
  2958  0369  0855               	movf	?___ftadd,w
  2959  036A  1683               	bsf	3,5	;RP0=1, select bank1
  2960  036B  1303               	bcf	3,6	;RP1=0, select bank1
  2961  036C  00C3               	movwf	sprintf@fval^(0+128)
  2962  036D  1283               	bcf	3,5	;RP0=0, select bank0
  2963  036E  1303               	bcf	3,6	;RP1=0, select bank0
  2964  036F  0856               	movf	?___ftadd+1,w
  2965  0370  1683               	bsf	3,5	;RP0=1, select bank1
  2966  0371  1303               	bcf	3,6	;RP1=0, select bank1
  2967  0372  00C4               	movwf	(sprintf@fval+1)^(0+128)
  2968  0373  1283               	bcf	3,5	;RP0=0, select bank0
  2969  0374  1303               	bcf	3,6	;RP1=0, select bank0
  2970  0375  0857               	movf	?___ftadd+2,w
  2971  0376  1683               	bsf	3,5	;RP0=1, select bank1
  2972  0377  1303               	bcf	3,6	;RP1=0, select bank1
  2973  0378  00C5               	movwf	(sprintf@fval+2)^(0+128)
  2974  0379                     l2952:	
  2975                           
  2976                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2977  0379  1683               	bsf	3,5	;RP0=1, select bank1
  2978  037A  1303               	bcf	3,6	;RP1=0, select bank1
  2979  037B  0842               	movf	(sprintf@exp+1)^(0+128),w
  2980  037C  3A80               	xorlw	128
  2981  037D  00FF               	movwf	127
  2982  037E  3080               	movlw	128
  2983  037F  027F               	subwf	127,w
  2984  0380  1D03               	skipz
  2985  0381  2B84               	goto	u4265
  2986  0382  300A               	movlw	10
  2987  0383  0241               	subwf	sprintf@exp^(0+128),w
  2988  0384                     u4265:	
  2989  0384  1803               	skipnc
  2990  0385  2BB7               	goto	l2960
  2991  0386  1683               	bsf	3,5	;RP0=1, select bank1
  2992  0387  1303               	bcf	3,6	;RP1=0, select bank1
  2993  0388  0845               	movf	(sprintf@fval+2)^(0+128),w
  2994  0389  0444               	iorwf	(sprintf@fval+1)^(0+128),w
  2995  038A  0443               	iorwf	sprintf@fval^(0+128),w
  2996  038B  1903               	skipnz
  2997  038C  2C22               	goto	l2976
  2998  038D  0843               	movf	sprintf@fval^(0+128),w
  2999  038E  1283               	bcf	3,5	;RP0=0, select bank0
  3000  038F  1303               	bcf	3,6	;RP1=0, select bank0
  3001  0390  00CE               	movwf	___fttol@f1
  3002  0391  1683               	bsf	3,5	;RP0=1, select bank1
  3003  0392  1303               	bcf	3,6	;RP1=0, select bank1
  3004  0393  0844               	movf	(sprintf@fval+1)^(0+128),w
  3005  0394  1283               	bcf	3,5	;RP0=0, select bank0
  3006  0395  1303               	bcf	3,6	;RP1=0, select bank0
  3007  0396  00CF               	movwf	___fttol@f1+1
  3008  0397  1683               	bsf	3,5	;RP0=1, select bank1
  3009  0398  1303               	bcf	3,6	;RP1=0, select bank1
  3010  0399  0845               	movf	(sprintf@fval+2)^(0+128),w
  3011  039A  1283               	bcf	3,5	;RP0=0, select bank0
  3012  039B  1303               	bcf	3,6	;RP1=0, select bank0
  3013  039C  00D0               	movwf	___fttol@f1+2
  3014  039D  160A  118A  2251  120A  118A  	fcall	___fttol
  3015  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  3016  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  3017  03A4  0851               	movf	?___fttol+3,w
  3018  03A5  0450               	iorwf	?___fttol+2,w
  3019  03A6  044F               	iorwf	?___fttol+1,w
  3020  03A7  044E               	iorwf	?___fttol,w
  3021  03A8  1D03               	skipz
  3022  03A9  2C22               	goto	l2976
  3023  03AA  1683               	bsf	3,5	;RP0=1, select bank1
  3024  03AB  1303               	bcf	3,6	;RP1=0, select bank1
  3025  03AC  0842               	movf	(sprintf@exp+1)^(0+128),w
  3026  03AD  3A80               	xorlw	128
  3027  03AE  00FF               	movwf	127
  3028  03AF  3080               	movlw	128
  3029  03B0  027F               	subwf	127,w
  3030  03B1  1D03               	skipz
  3031  03B2  2BB5               	goto	u4295
  3032  03B3  3002               	movlw	2
  3033  03B4  0241               	subwf	sprintf@exp^(0+128),w
  3034  03B5                     u4295:	
  3035  03B5  1C03               	skipc
  3036  03B6  2C22               	goto	l2976
  3037  03B7                     l2960:	
  3038                           
  3039                           ;doprnt.c: 1129: if(integ < 4.294967296){
  3040  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  3041  03B8  1303               	bcf	3,6	;RP1=0, select bank1
  3042  03B9  0836               	movf	sprintf@integ^(0+128),w
  3043  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  3044  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  3045  03BC  00A7               	movwf	___ftge@ff1
  3046  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  3047  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  3048  03BF  0837               	movf	(sprintf@integ+1)^(0+128),w
  3049  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  3050  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  3051  03C2  00A8               	movwf	___ftge@ff1+1
  3052  03C3  1683               	bsf	3,5	;RP0=1, select bank1
  3053  03C4  1303               	bcf	3,6	;RP1=0, select bank1
  3054  03C5  0838               	movf	(sprintf@integ+2)^(0+128),w
  3055  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  3056  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  3057  03C8  00A9               	movwf	___ftge@ff1+2
  3058  03C9  3070               	movlw	112
  3059  03CA  00AA               	movwf	___ftge@ff2
  3060  03CB  3089               	movlw	137
  3061  03CC  00AB               	movwf	___ftge@ff2+1
  3062  03CD  3040               	movlw	64
  3063  03CE  00AC               	movwf	___ftge@ff2+2
  3064  03CF  160A  118A  2111  120A  118A  	fcall	___ftge
  3065  03D4  1803               	btfsc	3,0
  3066  03D5  2BD8               	goto	l2964
  3067                           
  3068                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3069  03D6  30F7               	movlw	247
  3070  03D7  2BD9               	goto	L4
  3071  03D8                     l2964:	
  3072                           ;doprnt.c: 1131: }else{
  3073                           
  3074                           
  3075                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3076  03D8  30F8               	movlw	248
  3077  03D9                     L4:	
  3078  03D9  1683               	bsf	3,5	;RP0=1, select bank1
  3079  03DA  1303               	bcf	3,6	;RP1=0, select bank1
  3080  03DB  07C1               	addwf	sprintf@exp^(0+128),f
  3081  03DC  1803               	skipnc
  3082  03DD  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  3083  03DE  30FF               	movlw	255
  3084  03DF  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  3085                           
  3086                           ;doprnt.c: 1133: }
  3087                           ;doprnt.c: 1134: integ = scale(exp);
  3088  03E0  0841               	movf	sprintf@exp^(0+128),w
  3089  03E1  120A  158A  21DF  120A  118A  	fcall	_scale
  3090  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  3091  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  3092  03E8  0845               	movf	?_scale,w
  3093  03E9  1683               	bsf	3,5	;RP0=1, select bank1
  3094  03EA  1303               	bcf	3,6	;RP1=0, select bank1
  3095  03EB  00B6               	movwf	sprintf@integ^(0+128)
  3096  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  3097  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  3098  03EE  0846               	movf	?_scale+1,w
  3099  03EF  1683               	bsf	3,5	;RP0=1, select bank1
  3100  03F0  1303               	bcf	3,6	;RP1=0, select bank1
  3101  03F1  00B7               	movwf	(sprintf@integ+1)^(0+128)
  3102  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  3103  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  3104  03F4  0847               	movf	?_scale+2,w
  3105  03F5  1683               	bsf	3,5	;RP0=1, select bank1
  3106  03F6  1303               	bcf	3,6	;RP1=0, select bank1
  3107  03F7  00B8               	movwf	(sprintf@integ+2)^(0+128)
  3108                           
  3109                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  3110  03F8  0843               	movf	sprintf@fval^(0+128),w
  3111  03F9  00F0               	movwf	__tdiv_to_l_@f1
  3112  03FA  0844               	movf	(sprintf@fval+1)^(0+128),w
  3113  03FB  00F1               	movwf	__tdiv_to_l_@f1+1
  3114  03FC  0845               	movf	(sprintf@fval+2)^(0+128),w
  3115  03FD  00F2               	movwf	__tdiv_to_l_@f1+2
  3116  03FE  0836               	movf	sprintf@integ^(0+128),w
  3117  03FF  00F3               	movwf	__tdiv_to_l_@f2
  3118  0400  0837               	movf	(sprintf@integ+1)^(0+128),w
  3119  0401  00F4               	movwf	__tdiv_to_l_@f2+1
  3120  0402  0838               	movf	(sprintf@integ+2)^(0+128),w
  3121  0403  00F5               	movwf	__tdiv_to_l_@f2+2
  3122  0404  120A  118A  200A  120A  118A  	fcall	__tdiv_to_l_
  3123  0409  0873               	movf	?__tdiv_to_l_+3,w
  3124  040A  1683               	bsf	3,5	;RP0=1, select bank1
  3125  040B  1303               	bcf	3,6	;RP1=0, select bank1
  3126  040C  00AC               	movwf	(_sprintf$467+3)^(0+128)
  3127  040D  0872               	movf	?__tdiv_to_l_+2,w
  3128  040E  00AB               	movwf	(_sprintf$467+2)^(0+128)
  3129  040F  0871               	movf	?__tdiv_to_l_+1,w
  3130  0410  00AA               	movwf	(_sprintf$467+1)^(0+128)
  3131  0411  0870               	movf	?__tdiv_to_l_,w
  3132  0412  00A9               	movwf	_sprintf$467^(0+128)
  3133  0413  082C               	movf	(_sprintf$467+3)^(0+128),w
  3134  0414  00BC               	movwf	(sprintf@_val+3)^(0+128)
  3135  0415  082B               	movf	(_sprintf$467+2)^(0+128),w
  3136  0416  00BB               	movwf	(sprintf@_val+2)^(0+128)
  3137  0417  082A               	movf	(_sprintf$467+1)^(0+128),w
  3138  0418  00BA               	movwf	(sprintf@_val+1)^(0+128)
  3139  0419  0829               	movf	_sprintf$467^(0+128),w
  3140  041A  00B9               	movwf	sprintf@_val^(0+128)
  3141                           
  3142                           ;doprnt.c: 1138: fval = 0.0;
  3143  041B  3000               	movlw	0
  3144  041C  00C3               	movwf	sprintf@fval^(0+128)
  3145  041D  3000               	movlw	0
  3146  041E  00C4               	movwf	(sprintf@fval+1)^(0+128)
  3147  041F  3000               	movlw	0
  3148  0420  00C5               	movwf	(sprintf@fval+2)^(0+128)
  3149                           
  3150                           ;doprnt.c: 1139: } else {
  3151  0421  2C9F               	goto	l2980
  3152  0422                     l2976:	
  3153                           
  3154                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  3155  0422  1683               	bsf	3,5	;RP0=1, select bank1
  3156  0423  1303               	bcf	3,6	;RP1=0, select bank1
  3157  0424  0843               	movf	sprintf@fval^(0+128),w
  3158  0425  1283               	bcf	3,5	;RP0=0, select bank0
  3159  0426  1303               	bcf	3,6	;RP1=0, select bank0
  3160  0427  00CE               	movwf	___fttol@f1
  3161  0428  1683               	bsf	3,5	;RP0=1, select bank1
  3162  0429  1303               	bcf	3,6	;RP1=0, select bank1
  3163  042A  0844               	movf	(sprintf@fval+1)^(0+128),w
  3164  042B  1283               	bcf	3,5	;RP0=0, select bank0
  3165  042C  1303               	bcf	3,6	;RP1=0, select bank0
  3166  042D  00CF               	movwf	___fttol@f1+1
  3167  042E  1683               	bsf	3,5	;RP0=1, select bank1
  3168  042F  1303               	bcf	3,6	;RP1=0, select bank1
  3169  0430  0845               	movf	(sprintf@fval+2)^(0+128),w
  3170  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3171  0432  1303               	bcf	3,6	;RP1=0, select bank0
  3172  0433  00D0               	movwf	___fttol@f1+2
  3173  0434  160A  118A  2251  120A  118A  	fcall	___fttol
  3174  0439  1283               	bcf	3,5	;RP0=0, select bank0
  3175  043A  1303               	bcf	3,6	;RP1=0, select bank0
  3176  043B  0851               	movf	?___fttol+3,w
  3177  043C  1683               	bsf	3,5	;RP0=1, select bank1
  3178  043D  1303               	bcf	3,6	;RP1=0, select bank1
  3179  043E  00BC               	movwf	(sprintf@_val+3)^(0+128)
  3180  043F  1283               	bcf	3,5	;RP0=0, select bank0
  3181  0440  1303               	bcf	3,6	;RP1=0, select bank0
  3182  0441  0850               	movf	?___fttol+2,w
  3183  0442  1683               	bsf	3,5	;RP0=1, select bank1
  3184  0443  1303               	bcf	3,6	;RP1=0, select bank1
  3185  0444  00BB               	movwf	(sprintf@_val+2)^(0+128)
  3186  0445  1283               	bcf	3,5	;RP0=0, select bank0
  3187  0446  1303               	bcf	3,6	;RP1=0, select bank0
  3188  0447  084F               	movf	?___fttol+1,w
  3189  0448  1683               	bsf	3,5	;RP0=1, select bank1
  3190  0449  1303               	bcf	3,6	;RP1=0, select bank1
  3191  044A  00BA               	movwf	(sprintf@_val+1)^(0+128)
  3192  044B  1283               	bcf	3,5	;RP0=0, select bank0
  3193  044C  1303               	bcf	3,6	;RP1=0, select bank0
  3194  044D  084E               	movf	?___fttol,w
  3195  044E  1683               	bsf	3,5	;RP0=1, select bank1
  3196  044F  1303               	bcf	3,6	;RP1=0, select bank1
  3197  0450  00B9               	movwf	sprintf@_val^(0+128)
  3198                           
  3199                           ;doprnt.c: 1141: fval -= (double)_val._val;
  3200  0451  083C               	movf	(sprintf@_val+3)^(0+128),w
  3201  0452  1283               	bcf	3,5	;RP0=0, select bank0
  3202  0453  1303               	bcf	3,6	;RP1=0, select bank0
  3203  0454  00B2               	movwf	___lltoft@c+3
  3204  0455  1683               	bsf	3,5	;RP0=1, select bank1
  3205  0456  1303               	bcf	3,6	;RP1=0, select bank1
  3206  0457  083B               	movf	(sprintf@_val+2)^(0+128),w
  3207  0458  1283               	bcf	3,5	;RP0=0, select bank0
  3208  0459  1303               	bcf	3,6	;RP1=0, select bank0
  3209  045A  00B1               	movwf	___lltoft@c+2
  3210  045B  1683               	bsf	3,5	;RP0=1, select bank1
  3211  045C  1303               	bcf	3,6	;RP1=0, select bank1
  3212  045D  083A               	movf	(sprintf@_val+1)^(0+128),w
  3213  045E  1283               	bcf	3,5	;RP0=0, select bank0
  3214  045F  1303               	bcf	3,6	;RP1=0, select bank0
  3215  0460  00B0               	movwf	___lltoft@c+1
  3216  0461  1683               	bsf	3,5	;RP0=1, select bank1
  3217  0462  1303               	bcf	3,6	;RP1=0, select bank1
  3218  0463  0839               	movf	sprintf@_val^(0+128),w
  3219  0464  1283               	bcf	3,5	;RP0=0, select bank0
  3220  0465  1303               	bcf	3,6	;RP1=0, select bank0
  3221  0466  00AF               	movwf	___lltoft@c
  3222  0467  120A  158A  2014  120A  118A  	fcall	___lltoft
  3223  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3224  046D  1303               	bcf	3,6	;RP1=0, select bank0
  3225  046E  082F               	movf	?___lltoft,w
  3226  046F  00E2               	movwf	___ftsub@f2
  3227  0470  0830               	movf	?___lltoft+1,w
  3228  0471  00E3               	movwf	___ftsub@f2+1
  3229  0472  0831               	movf	?___lltoft+2,w
  3230  0473  00E4               	movwf	___ftsub@f2+2
  3231  0474  1683               	bsf	3,5	;RP0=1, select bank1
  3232  0475  1303               	bcf	3,6	;RP1=0, select bank1
  3233  0476  0843               	movf	sprintf@fval^(0+128),w
  3234  0477  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0478  1303               	bcf	3,6	;RP1=0, select bank0
  3236  0479  00E5               	movwf	___ftsub@f1
  3237  047A  1683               	bsf	3,5	;RP0=1, select bank1
  3238  047B  1303               	bcf	3,6	;RP1=0, select bank1
  3239  047C  0844               	movf	(sprintf@fval+1)^(0+128),w
  3240  047D  1283               	bcf	3,5	;RP0=0, select bank0
  3241  047E  1303               	bcf	3,6	;RP1=0, select bank0
  3242  047F  00E6               	movwf	___ftsub@f1+1
  3243  0480  1683               	bsf	3,5	;RP0=1, select bank1
  3244  0481  1303               	bcf	3,6	;RP1=0, select bank1
  3245  0482  0845               	movf	(sprintf@fval+2)^(0+128),w
  3246  0483  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0484  1303               	bcf	3,6	;RP1=0, select bank0
  3248  0485  00E7               	movwf	___ftsub@f1+2
  3249  0486  160A  158A  25B2  120A  118A  	fcall	___ftsub
  3250  048B  1283               	bcf	3,5	;RP0=0, select bank0
  3251  048C  1303               	bcf	3,6	;RP1=0, select bank0
  3252  048D  0862               	movf	?___ftsub,w
  3253  048E  1683               	bsf	3,5	;RP0=1, select bank1
  3254  048F  1303               	bcf	3,6	;RP1=0, select bank1
  3255  0490  00C3               	movwf	sprintf@fval^(0+128)
  3256  0491  1283               	bcf	3,5	;RP0=0, select bank0
  3257  0492  1303               	bcf	3,6	;RP1=0, select bank0
  3258  0493  0863               	movf	?___ftsub+1,w
  3259  0494  1683               	bsf	3,5	;RP0=1, select bank1
  3260  0495  1303               	bcf	3,6	;RP1=0, select bank1
  3261  0496  00C4               	movwf	(sprintf@fval+1)^(0+128)
  3262  0497  1283               	bcf	3,5	;RP0=0, select bank0
  3263  0498  1303               	bcf	3,6	;RP1=0, select bank0
  3264  0499  0864               	movf	?___ftsub+2,w
  3265  049A  1683               	bsf	3,5	;RP0=1, select bank1
  3266  049B  1303               	bcf	3,6	;RP1=0, select bank1
  3267  049C  00C5               	movwf	(sprintf@fval+2)^(0+128)
  3268                           
  3269                           ;doprnt.c: 1142: exp = 0;
  3270  049D  01C1               	clrf	sprintf@exp^(0+128)
  3271  049E  01C2               	clrf	(sprintf@exp+1)^(0+128)
  3272  049F                     l2980:	
  3273                           
  3274                           ;doprnt.c: 1143: }
  3275                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3276  049F  01C9               	clrf	sprintf@c^(0+128)
  3277  04A0  0AC9               	incf	sprintf@c^(0+128),f
  3278  04A1  0849               	movf	sprintf@c^(0+128),w
  3279  04A2  3A0A               	xorlw	10
  3280  04A3  1903               	btfsc	3,2
  3281  04A4  2CE1               	goto	l2994
  3282  04A5                     l2986:	
  3283                           
  3284                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  3285  04A5  0849               	movf	sprintf@c^(0+128),w
  3286  04A6  00A0               	movwf	??_sprintf^(0+128)
  3287  04A7  3001               	movlw	1
  3288  04A8                     u4325:	
  3289  04A8  1003               	clrc
  3290  04A9  0DA0               	rlf	??_sprintf^(0+128),f
  3291  04AA  3EFF               	addlw	-1
  3292  04AB  1D03               	skipz
  3293  04AC  2CA8               	goto	u4325
  3294  04AD  1003               	clrc
  3295  04AE  0D20               	rlf	??_sprintf^(0+128),w
  3296  04AF  3E01               	addlw	low (_dpowers-__stringbase)
  3297  04B0  0084               	movwf	4
  3298  04B1  160A  118A  2000  120A  118A  	fcall	stringdir
  3299  04B6  00A1               	movwf	(??_sprintf+1)^(0+128)
  3300  04B7  160A  118A  2000  120A  118A  	fcall	stringdir
  3301  04BC  00A2               	movwf	((??_sprintf+1)^(0+128)+1)
  3302  04BD  160A  118A  2000  120A  118A  	fcall	stringdir
  3303  04C2  00A3               	movwf	((??_sprintf+1)^(0+128)+2)
  3304  04C3  160A  118A  2000  120A  118A  	fcall	stringdir
  3305  04C8  00A4               	movwf	((??_sprintf+1)^(0+128)+3)
  3306  04C9  0824               	movf	(??_sprintf+4)^(0+128),w
  3307  04CA  023C               	subwf	(sprintf@_val+3)^(0+128),w
  3308  04CB  1D03               	skipz
  3309  04CC  2CD7               	goto	u4335
  3310  04CD  0823               	movf	(??_sprintf+3)^(0+128),w
  3311  04CE  023B               	subwf	(sprintf@_val+2)^(0+128),w
  3312  04CF  1D03               	skipz
  3313  04D0  2CD7               	goto	u4335
  3314  04D1  0822               	movf	(??_sprintf+2)^(0+128),w
  3315  04D2  023A               	subwf	(sprintf@_val+1)^(0+128),w
  3316  04D3  1D03               	skipz
  3317  04D4  2CD7               	goto	u4335
  3318  04D5  0821               	movf	(??_sprintf+1)^(0+128),w
  3319  04D6  0239               	subwf	sprintf@_val^(0+128),w
  3320  04D7                     u4335:	
  3321  04D7  1C03               	btfss	3,0
  3322  04D8  2CE1               	goto	l2994
  3323                           
  3324                           ;doprnt.c: 1147: break;
  3325  04D9  3001               	movlw	1
  3326  04DA  00A0               	movwf	??_sprintf^(0+128)
  3327  04DB  0820               	movf	??_sprintf^(0+128),w
  3328  04DC  07C9               	addwf	sprintf@c^(0+128),f
  3329  04DD  0849               	movf	sprintf@c^(0+128),w
  3330  04DE  3A0A               	xorlw	10
  3331  04DF  1D03               	skipz
  3332  04E0  2CA5               	goto	l2986
  3333  04E1                     l2994:	
  3334                           
  3335                           ;doprnt.c: 1151: width -= prec + c + exp;
  3336  04E1  0847               	movf	sprintf@prec^(0+128),w
  3337  04E2  0749               	addwf	sprintf@c^(0+128),w
  3338  04E3  00A0               	movwf	??_sprintf^(0+128)
  3339  04E4  0848               	movf	(sprintf@prec+1)^(0+128),w
  3340  04E5  1803               	skipnc
  3341  04E6  0A48               	incf	(sprintf@prec+1)^(0+128),w
  3342  04E7  3E00               	addlw	0
  3343  04E8  1BC9               	btfsc	sprintf@c^(0+128),7
  3344  04E9  3EFF               	addlw	255
  3345  04EA  00A1               	movwf	(??_sprintf^(0+128)+1)
  3346  04EB  0841               	movf	sprintf@exp^(0+128),w
  3347  04EC  0720               	addwf	??_sprintf^(0+128),w
  3348  04ED  00A2               	movwf	(??_sprintf+2)^(0+128)
  3349  04EE  0842               	movf	(sprintf@exp+1)^(0+128),w
  3350  04EF  1803               	skipnc
  3351  04F0  0A42               	incf	(sprintf@exp+1)^(0+128),w
  3352  04F1  0721               	addwf	(??_sprintf+1)^(0+128),w
  3353  04F2  00A3               	movwf	(??_sprintf+3)^(0+128)
  3354  04F3  0822               	movf	(??_sprintf+2)^(0+128),w
  3355  04F4  02BF               	subwf	sprintf@width^(0+128),f
  3356  04F5  0823               	movf	(??_sprintf+3)^(0+128),w
  3357  04F6  1C03               	skipc
  3358  04F7  03C0               	decf	(sprintf@width+1)^(0+128),f
  3359  04F8  02C0               	subwf	(sprintf@width+1)^(0+128),f
  3360                           
  3361                           ;doprnt.c: 1152: if(
  3362                           ;doprnt.c: 1156: prec)
  3363  04F9  0848               	movf	(sprintf@prec+1)^(0+128),w
  3364  04FA  0447               	iorwf	sprintf@prec^(0+128),w
  3365  04FB  1903               	skipnz
  3366  04FC  2D03               	goto	l422
  3367                           
  3368                           ;doprnt.c: 1157: width--;
  3369  04FD  30FF               	movlw	255
  3370  04FE  07BF               	addwf	sprintf@width^(0+128),f
  3371  04FF  1803               	skipnc
  3372  0500  0AC0               	incf	(sprintf@width+1)^(0+128),f
  3373  0501  30FF               	movlw	255
  3374  0502  07C0               	addwf	(sprintf@width+1)^(0+128),f
  3375  0503                     l422:	
  3376                           
  3377                           ;doprnt.c: 1158: if(flag & 0x03)
  3378  0503  3003               	movlw	3
  3379  0504  053D               	andwf	sprintf@flag^(0+128),w
  3380  0505  00A0               	movwf	??_sprintf^(0+128)
  3381  0506  3000               	movlw	0
  3382  0507  053E               	andwf	(sprintf@flag+1)^(0+128),w
  3383  0508  00A1               	movwf	(??_sprintf+1)^(0+128)
  3384  0509  0821               	movf	(??_sprintf+1)^(0+128),w
  3385  050A  0420               	iorwf	??_sprintf^(0+128),w
  3386  050B  1903               	skipnz
  3387  050C  2D13               	goto	l3008
  3388  050D                     l3006:	
  3389                           
  3390                           ;doprnt.c: 1191: width--;
  3391  050D  30FF               	movlw	255
  3392  050E  07BF               	addwf	sprintf@width^(0+128),f
  3393  050F  1803               	skipnc
  3394  0510  0AC0               	incf	(sprintf@width+1)^(0+128),f
  3395  0511  30FF               	movlw	255
  3396  0512  07C0               	addwf	(sprintf@width+1)^(0+128),f
  3397  0513                     l3008:	
  3398  0513  0840               	movf	(sprintf@width+1)^(0+128),w
  3399  0514  3A80               	xorlw	128
  3400  0515  00FF               	movwf	127
  3401  0516  3080               	movlw	128
  3402  0517  027F               	subwf	127,w
  3403  0518  1D03               	skipz
  3404  0519  2D1C               	goto	u4375
  3405  051A  3001               	movlw	1
  3406  051B  023F               	subwf	sprintf@width^(0+128),w
  3407  051C                     u4375:	
  3408  051C  1C03               	btfss	3,0
  3409  051D  2D2C               	goto	l3010
  3410                           
  3411                           ;doprnt.c: 1190: ((*sp++ = (' ')));
  3412                           
  3413                           ;doprnt.c: 1184: {
  3414                           ;doprnt.c: 1189: while(width > 0) {
  3415                           
  3416                           ;doprnt.c: 1159: width--;
  3417  051E  3020               	movlw	32
  3418  051F  1683               	bsf	3,5	;RP0=1, select bank1
  3419  0520  1303               	bcf	3,6	;RP1=0, select bank1
  3420  0521  00A0               	movwf	??_sprintf^(0+128)
  3421  0522  0846               	movf	sprintf@sp^(0+128),w
  3422  0523  0084               	movwf	4
  3423  0524  0820               	movf	??_sprintf^(0+128),w
  3424  0525  1783               	bsf	3,7	;select IRP bank2
  3425  0526  0080               	movwf	0
  3426  0527  3001               	movlw	1
  3427  0528  00A0               	movwf	??_sprintf^(0+128)
  3428  0529  0820               	movf	??_sprintf^(0+128),w
  3429  052A  07C6               	addwf	sprintf@sp^(0+128),f
  3430  052B  2D0D               	goto	l3006
  3431  052C                     l3010:	
  3432                           
  3433                           ;doprnt.c: 1192: }
  3434                           ;doprnt.c: 1197: if(flag & 0x03)
  3435  052C  3003               	movlw	3
  3436  052D  1683               	bsf	3,5	;RP0=1, select bank1
  3437  052E  1303               	bcf	3,6	;RP1=0, select bank1
  3438  052F  053D               	andwf	sprintf@flag^(0+128),w
  3439  0530  00A0               	movwf	??_sprintf^(0+128)
  3440  0531  3000               	movlw	0
  3441  0532  053E               	andwf	(sprintf@flag+1)^(0+128),w
  3442  0533  00A1               	movwf	(??_sprintf+1)^(0+128)
  3443  0534  0821               	movf	(??_sprintf+1)^(0+128),w
  3444  0535  0420               	iorwf	??_sprintf^(0+128),w
  3445  0536  1903               	skipnz
  3446  0537  2D43               	goto	l428
  3447                           
  3448                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  3449  0538  302D               	movlw	45
  3450  0539                     L5:	
  3451  0539  00A0               	movwf	??_sprintf^(0+128)
  3452  053A  0846               	movf	sprintf@sp^(0+128),w
  3453  053B  0084               	movwf	4
  3454  053C  0820               	movf	??_sprintf^(0+128),w
  3455  053D  1783               	bsf	3,7	;select IRP bank2
  3456  053E  0080               	movwf	0
  3457  053F  3001               	movlw	1
  3458  0540  00A0               	movwf	??_sprintf^(0+128)
  3459  0541  0820               	movf	??_sprintf^(0+128),w
  3460  0542  07C6               	addwf	sprintf@sp^(0+128),f
  3461  0543                     l428:	
  3462  0543  30FF               	movlw	-1
  3463  0544  00A0               	movwf	??_sprintf^(0+128)
  3464  0545  0820               	movf	??_sprintf^(0+128),w
  3465  0546  07C9               	addwf	sprintf@c^(0+128),f
  3466  0547  0849               	movf	sprintf@c^(0+128),w
  3467  0548  3AFF               	xorlw	-1
  3468  0549  1903               	btfsc	3,2
  3469  054A  2DBB               	goto	l3028
  3470                           
  3471                           ;doprnt.c: 1209: {
  3472                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  3473                           
  3474                           ;doprnt.c: 1204: }
  3475                           ;doprnt.c: 1205: while(c--) {
  3476  054B  0849               	movf	sprintf@c^(0+128),w
  3477  054C  00A0               	movwf	??_sprintf^(0+128)
  3478  054D  3001               	movlw	1
  3479  054E                     u4395:	
  3480  054E  1003               	clrc
  3481  054F  0DA0               	rlf	??_sprintf^(0+128),f
  3482  0550  3EFF               	addlw	-1
  3483  0551  1D03               	skipz
  3484  0552  2D4E               	goto	u4395
  3485  0553  1003               	clrc
  3486  0554  0D20               	rlf	??_sprintf^(0+128),w
  3487  0555  3E01               	addlw	low (_dpowers-__stringbase)
  3488  0556  0084               	movwf	4
  3489  0557  160A  118A  2000  120A  118A  	fcall	stringdir
  3490  055C  00F0               	movwf	___lldiv@divisor
  3491  055D  160A  118A  2000  120A  118A  	fcall	stringdir
  3492  0562  00F1               	movwf	___lldiv@divisor+1
  3493  0563  160A  118A  2000  120A  118A  	fcall	stringdir
  3494  0568  00F2               	movwf	___lldiv@divisor+2
  3495  0569  160A  118A  2000  120A  118A  	fcall	stringdir
  3496  056E  00F3               	movwf	___lldiv@divisor+3
  3497  056F  083C               	movf	(sprintf@_val+3)^(0+128),w
  3498  0570  00F7               	movwf	___lldiv@dividend+3
  3499  0571  083B               	movf	(sprintf@_val+2)^(0+128),w
  3500  0572  00F6               	movwf	___lldiv@dividend+2
  3501  0573  083A               	movf	(sprintf@_val+1)^(0+128),w
  3502  0574  00F5               	movwf	___lldiv@dividend+1
  3503  0575  0839               	movf	sprintf@_val^(0+128),w
  3504  0576  00F4               	movwf	___lldiv@dividend
  3505  0577  160A  158A  27A2  120A  118A  	fcall	___lldiv
  3506  057C  0873               	movf	?___lldiv+3,w
  3507  057D  1683               	bsf	3,5	;RP0=1, select bank1
  3508  057E  1303               	bcf	3,6	;RP1=0, select bank1
  3509  057F  00B1               	movwf	(sprintf@vd+3)^(0+128)
  3510  0580  0872               	movf	?___lldiv+2,w
  3511  0581  00B0               	movwf	(sprintf@vd+2)^(0+128)
  3512  0582  0871               	movf	?___lldiv+1,w
  3513  0583  00AF               	movwf	(sprintf@vd+1)^(0+128)
  3514  0584  0870               	movf	?___lldiv,w
  3515  0585  00AE               	movwf	sprintf@vd^(0+128)
  3516                           
  3517                           ;doprnt.c: 1211: vd %= 10;
  3518  0586  3000               	movlw	0
  3519  0587  00F3               	movwf	___llmod@divisor+3
  3520  0588  3000               	movlw	0
  3521  0589  00F2               	movwf	___llmod@divisor+2
  3522  058A  3000               	movlw	0
  3523  058B  00F1               	movwf	___llmod@divisor+1
  3524  058C  300A               	movlw	10
  3525  058D  00F0               	movwf	___llmod@divisor
  3526  058E  0831               	movf	(sprintf@vd+3)^(0+128),w
  3527  058F  00F7               	movwf	___llmod@dividend+3
  3528  0590  0830               	movf	(sprintf@vd+2)^(0+128),w
  3529  0591  00F6               	movwf	___llmod@dividend+2
  3530  0592  082F               	movf	(sprintf@vd+1)^(0+128),w
  3531  0593  00F5               	movwf	___llmod@dividend+1
  3532  0594  082E               	movf	sprintf@vd^(0+128),w
  3533  0595  00F4               	movwf	___llmod@dividend
  3534  0596  160A  158A  2651  120A  118A  	fcall	___llmod
  3535  059B  0873               	movf	?___llmod+3,w
  3536  059C  1683               	bsf	3,5	;RP0=1, select bank1
  3537  059D  1303               	bcf	3,6	;RP1=0, select bank1
  3538  059E  00B1               	movwf	(sprintf@vd+3)^(0+128)
  3539  059F  0872               	movf	?___llmod+2,w
  3540  05A0  00B0               	movwf	(sprintf@vd+2)^(0+128)
  3541  05A1  0871               	movf	?___llmod+1,w
  3542  05A2  00AF               	movwf	(sprintf@vd+1)^(0+128)
  3543  05A3  0870               	movf	?___llmod,w
  3544  05A4  00AE               	movwf	sprintf@vd^(0+128)
  3545                           
  3546                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  3547  05A5  082E               	movf	sprintf@vd^(0+128),w
  3548  05A6  3E30               	addlw	48
  3549  05A7  2D39               	goto	L5
  3550  05A8                     l3022:	
  3551                           ;doprnt.c: 1213: }
  3552                           ;doprnt.c: 1215: }
  3553                           ;doprnt.c: 1216: while(exp > 0) {
  3554                           
  3555                           
  3556                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  3557  05A8  3030               	movlw	48
  3558  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  3559  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  3560  05AB  00A0               	movwf	??_sprintf^(0+128)
  3561  05AC  0846               	movf	sprintf@sp^(0+128),w
  3562  05AD  0084               	movwf	4
  3563  05AE  0820               	movf	??_sprintf^(0+128),w
  3564  05AF  1783               	bsf	3,7	;select IRP bank2
  3565  05B0  0080               	movwf	0
  3566  05B1  3001               	movlw	1
  3567  05B2  00A0               	movwf	??_sprintf^(0+128)
  3568  05B3  0820               	movf	??_sprintf^(0+128),w
  3569  05B4  07C6               	addwf	sprintf@sp^(0+128),f
  3570                           
  3571                           ;doprnt.c: 1218: exp--;
  3572  05B5  30FF               	movlw	255
  3573  05B6  07C1               	addwf	sprintf@exp^(0+128),f
  3574  05B7  1803               	skipnc
  3575  05B8  0AC2               	incf	(sprintf@exp+1)^(0+128),f
  3576  05B9  30FF               	movlw	255
  3577  05BA  07C2               	addwf	(sprintf@exp+1)^(0+128),f
  3578  05BB                     l3028:	
  3579  05BB  0842               	movf	(sprintf@exp+1)^(0+128),w
  3580  05BC  3A80               	xorlw	128
  3581  05BD  00FF               	movwf	127
  3582  05BE  3080               	movlw	128
  3583  05BF  027F               	subwf	127,w
  3584  05C0  1D03               	skipz
  3585  05C1  2DC4               	goto	u4415
  3586  05C2  3001               	movlw	1
  3587  05C3  0241               	subwf	sprintf@exp^(0+128),w
  3588  05C4                     u4415:	
  3589  05C4  1803               	skipnc
  3590  05C5  2DA8               	goto	l3022
  3591                           
  3592                           ;doprnt.c: 1219: }
  3593                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3594  05C6  1683               	bsf	3,5	;RP0=1, select bank1
  3595  05C7  1303               	bcf	3,6	;RP1=0, select bank1
  3596  05C8  0848               	movf	(sprintf@prec+1)^(0+128),w
  3597  05C9  3A80               	xorlw	128
  3598  05CA  00FF               	movwf	127
  3599  05CB  3080               	movlw	128
  3600  05CC  027F               	subwf	127,w
  3601  05CD  1D03               	skipz
  3602  05CE  2DD1               	goto	u4425
  3603  05CF  3009               	movlw	9
  3604  05D0  0247               	subwf	sprintf@prec^(0+128),w
  3605  05D1                     u4425:	
  3606  05D1  1C03               	skipc
  3607  05D2  2DD7               	goto	l3034
  3608                           
  3609                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3610  05D3  3008               	movlw	8
  3611  05D4  1683               	bsf	3,5	;RP0=1, select bank1
  3612  05D5  1303               	bcf	3,6	;RP1=0, select bank1
  3613  05D6  2DDA               	goto	L6
  3614  05D7                     l3034:	
  3615                           
  3616                           ;doprnt.c: 1222: else
  3617                           ;doprnt.c: 1223: c = prec;
  3618  05D7  1683               	bsf	3,5	;RP0=1, select bank1
  3619  05D8  1303               	bcf	3,6	;RP1=0, select bank1
  3620  05D9  0847               	movf	sprintf@prec^(0+128),w
  3621  05DA                     L6:	
  3622  05DA  00A0               	movwf	??_sprintf^(0+128)
  3623  05DB  0820               	movf	??_sprintf^(0+128),w
  3624  05DC  00C9               	movwf	sprintf@c^(0+128)
  3625                           
  3626                           ;doprnt.c: 1224: prec -= c;
  3627  05DD  0849               	movf	sprintf@c^(0+128),w
  3628  05DE  00A0               	movwf	??_sprintf^(0+128)
  3629  05DF  01A1               	clrf	(??_sprintf^(0+128)+1)
  3630  05E0  1BA0               	btfsc	??_sprintf^(0+128),7
  3631  05E1  03A1               	decf	(??_sprintf^(0+128)+1),f
  3632  05E2  0820               	movf	??_sprintf^(0+128),w
  3633  05E3  02C7               	subwf	sprintf@prec^(0+128),f
  3634  05E4  0821               	movf	(??_sprintf+1)^(0+128),w
  3635  05E5  1C03               	skipc
  3636  05E6  03C8               	decf	(sprintf@prec+1)^(0+128),f
  3637  05E7  02C8               	subwf	(sprintf@prec+1)^(0+128),f
  3638                           
  3639                           ;doprnt.c: 1228: if(c)
  3640  05E8  0849               	movf	sprintf@c^(0+128),w
  3641  05E9  1903               	btfsc	3,2
  3642  05EA  2DF6               	goto	l3040
  3643                           
  3644                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  3645  05EB  302E               	movlw	46
  3646  05EC  00A0               	movwf	??_sprintf^(0+128)
  3647  05ED  0846               	movf	sprintf@sp^(0+128),w
  3648  05EE  0084               	movwf	4
  3649  05EF  0820               	movf	??_sprintf^(0+128),w
  3650  05F0  1783               	bsf	3,7	;select IRP bank2
  3651  05F1  0080               	movwf	0
  3652  05F2  3001               	movlw	1
  3653  05F3  00A0               	movwf	??_sprintf^(0+128)
  3654  05F4  0820               	movf	??_sprintf^(0+128),w
  3655  05F5  07C6               	addwf	sprintf@sp^(0+128),f
  3656  05F6                     l3040:	
  3657                           
  3658                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3659  05F6  0849               	movf	sprintf@c^(0+128),w
  3660  05F7  120A  158A  21DF  120A  118A  	fcall	_scale
  3661  05FC  1283               	bcf	3,5	;RP0=0, select bank0
  3662  05FD  1303               	bcf	3,6	;RP1=0, select bank0
  3663  05FE  0845               	movf	?_scale,w
  3664  05FF  1683               	bsf	3,5	;RP0=1, select bank1
  3665  0600  1303               	bcf	3,6	;RP1=0, select bank1
  3666  0601  00A6               	movwf	_sprintf$880^(0+128)
  3667  0602  1283               	bcf	3,5	;RP0=0, select bank0
  3668  0603  1303               	bcf	3,6	;RP1=0, select bank0
  3669  0604  0846               	movf	?_scale+1,w
  3670  0605  1683               	bsf	3,5	;RP0=1, select bank1
  3671  0606  1303               	bcf	3,6	;RP1=0, select bank1
  3672  0607  00A7               	movwf	(_sprintf$880+1)^(0+128)
  3673  0608  1283               	bcf	3,5	;RP0=0, select bank0
  3674  0609  1303               	bcf	3,6	;RP1=0, select bank0
  3675  060A  0847               	movf	?_scale+2,w
  3676  060B  1683               	bsf	3,5	;RP0=1, select bank1
  3677  060C  1303               	bcf	3,6	;RP1=0, select bank1
  3678  060D  00A8               	movwf	(_sprintf$880+2)^(0+128)
  3679                           
  3680                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3681  060E  0826               	movf	_sprintf$880^(0+128),w
  3682  060F  1283               	bcf	3,5	;RP0=0, select bank0
  3683  0610  1303               	bcf	3,6	;RP1=0, select bank0
  3684  0611  00B8               	movwf	___ftmul@f2
  3685  0612  1683               	bsf	3,5	;RP0=1, select bank1
  3686  0613  1303               	bcf	3,6	;RP1=0, select bank1
  3687  0614  0827               	movf	(_sprintf$880+1)^(0+128),w
  3688  0615  1283               	bcf	3,5	;RP0=0, select bank0
  3689  0616  1303               	bcf	3,6	;RP1=0, select bank0
  3690  0617  00B9               	movwf	___ftmul@f2+1
  3691  0618  1683               	bsf	3,5	;RP0=1, select bank1
  3692  0619  1303               	bcf	3,6	;RP1=0, select bank1
  3693  061A  0828               	movf	(_sprintf$880+2)^(0+128),w
  3694  061B  1283               	bcf	3,5	;RP0=0, select bank0
  3695  061C  1303               	bcf	3,6	;RP1=0, select bank0
  3696  061D  00BA               	movwf	___ftmul@f2+2
  3697  061E  1683               	bsf	3,5	;RP0=1, select bank1
  3698  061F  1303               	bcf	3,6	;RP1=0, select bank1
  3699  0620  0843               	movf	sprintf@fval^(0+128),w
  3700  0621  1283               	bcf	3,5	;RP0=0, select bank0
  3701  0622  1303               	bcf	3,6	;RP1=0, select bank0
  3702  0623  00B5               	movwf	___ftmul@f1
  3703  0624  1683               	bsf	3,5	;RP0=1, select bank1
  3704  0625  1303               	bcf	3,6	;RP1=0, select bank1
  3705  0626  0844               	movf	(sprintf@fval+1)^(0+128),w
  3706  0627  1283               	bcf	3,5	;RP0=0, select bank0
  3707  0628  1303               	bcf	3,6	;RP1=0, select bank0
  3708  0629  00B6               	movwf	___ftmul@f1+1
  3709  062A  1683               	bsf	3,5	;RP0=1, select bank1
  3710  062B  1303               	bcf	3,6	;RP1=0, select bank1
  3711  062C  0845               	movf	(sprintf@fval+2)^(0+128),w
  3712  062D  1283               	bcf	3,5	;RP0=0, select bank0
  3713  062E  1303               	bcf	3,6	;RP1=0, select bank0
  3714  062F  00B7               	movwf	___ftmul@f1+2
  3715  0630  160A  118A  24F2  120A  118A  	fcall	___ftmul
  3716  0635  1283               	bcf	3,5	;RP0=0, select bank0
  3717  0636  1303               	bcf	3,6	;RP1=0, select bank0
  3718  0637  0835               	movf	?___ftmul,w
  3719  0638  00CE               	movwf	___fttol@f1
  3720  0639  0836               	movf	?___ftmul+1,w
  3721  063A  00CF               	movwf	___fttol@f1+1
  3722  063B  0837               	movf	?___ftmul+2,w
  3723  063C  00D0               	movwf	___fttol@f1+2
  3724  063D  160A  118A  2251  120A  118A  	fcall	___fttol
  3725  0642  1283               	bcf	3,5	;RP0=0, select bank0
  3726  0643  1303               	bcf	3,6	;RP1=0, select bank0
  3727  0644  0851               	movf	?___fttol+3,w
  3728  0645  1683               	bsf	3,5	;RP0=1, select bank1
  3729  0646  1303               	bcf	3,6	;RP1=0, select bank1
  3730  0647  00BC               	movwf	(sprintf@_val+3)^(0+128)
  3731  0648  1283               	bcf	3,5	;RP0=0, select bank0
  3732  0649  1303               	bcf	3,6	;RP1=0, select bank0
  3733  064A  0850               	movf	?___fttol+2,w
  3734  064B  1683               	bsf	3,5	;RP0=1, select bank1
  3735  064C  1303               	bcf	3,6	;RP1=0, select bank1
  3736  064D  00BB               	movwf	(sprintf@_val+2)^(0+128)
  3737  064E  1283               	bcf	3,5	;RP0=0, select bank0
  3738  064F  1303               	bcf	3,6	;RP1=0, select bank0
  3739  0650  084F               	movf	?___fttol+1,w
  3740  0651  1683               	bsf	3,5	;RP0=1, select bank1
  3741  0652  1303               	bcf	3,6	;RP1=0, select bank1
  3742  0653  00BA               	movwf	(sprintf@_val+1)^(0+128)
  3743  0654  1283               	bcf	3,5	;RP0=0, select bank0
  3744  0655  1303               	bcf	3,6	;RP1=0, select bank0
  3745  0656  084E               	movf	?___fttol,w
  3746  0657  1683               	bsf	3,5	;RP0=1, select bank1
  3747  0658  1303               	bcf	3,6	;RP1=0, select bank1
  3748  0659                     L7:	
  3749  0659  00B9               	movwf	sprintf@_val^(0+128)
  3750  065A  30FF               	movlw	-1
  3751  065B  00A0               	movwf	??_sprintf^(0+128)
  3752  065C  0820               	movf	??_sprintf^(0+128),w
  3753  065D  07C9               	addwf	sprintf@c^(0+128),f
  3754  065E  0849               	movf	sprintf@c^(0+128),w
  3755  065F  3AFF               	xorlw	-1
  3756  0660  1903               	btfsc	3,2
  3757  0661  2F14               	goto	l3060
  3758                           
  3759                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  3760                           
  3761                           ;doprnt.c: 1237: while(c--) {
  3762  0662  0849               	movf	sprintf@c^(0+128),w
  3763  0663  00A0               	movwf	??_sprintf^(0+128)
  3764  0664  3001               	movlw	1
  3765  0665                     u4445:	
  3766  0665  1003               	clrc
  3767  0666  0DA0               	rlf	??_sprintf^(0+128),f
  3768  0667  3EFF               	addlw	-1
  3769  0668  1D03               	skipz
  3770  0669  2E65               	goto	u4445
  3771  066A  1003               	clrc
  3772  066B  0D20               	rlf	??_sprintf^(0+128),w
  3773  066C  3E01               	addlw	low (_dpowers-__stringbase)
  3774  066D  0084               	movwf	4
  3775  066E  160A  118A  2000  120A  118A  	fcall	stringdir
  3776  0673  00F0               	movwf	___lldiv@divisor
  3777  0674  160A  118A  2000  120A  118A  	fcall	stringdir
  3778  0679  00F1               	movwf	___lldiv@divisor+1
  3779  067A  160A  118A  2000  120A  118A  	fcall	stringdir
  3780  067F  00F2               	movwf	___lldiv@divisor+2
  3781  0680  160A  118A  2000  120A  118A  	fcall	stringdir
  3782  0685  00F3               	movwf	___lldiv@divisor+3
  3783  0686  083C               	movf	(sprintf@_val+3)^(0+128),w
  3784  0687  00F7               	movwf	___lldiv@dividend+3
  3785  0688  083B               	movf	(sprintf@_val+2)^(0+128),w
  3786  0689  00F6               	movwf	___lldiv@dividend+2
  3787  068A  083A               	movf	(sprintf@_val+1)^(0+128),w
  3788  068B  00F5               	movwf	___lldiv@dividend+1
  3789  068C  0839               	movf	sprintf@_val^(0+128),w
  3790  068D  00F4               	movwf	___lldiv@dividend
  3791  068E  160A  158A  27A2  120A  118A  	fcall	___lldiv
  3792  0693  0873               	movf	?___lldiv+3,w
  3793  0694  1683               	bsf	3,5	;RP0=1, select bank1
  3794  0695  1303               	bcf	3,6	;RP1=0, select bank1
  3795  0696  00B5               	movwf	(sprintf@vd_469+3)^(0+128)
  3796  0697  0872               	movf	?___lldiv+2,w
  3797  0698  00B4               	movwf	(sprintf@vd_469+2)^(0+128)
  3798  0699  0871               	movf	?___lldiv+1,w
  3799  069A  00B3               	movwf	(sprintf@vd_469+1)^(0+128)
  3800  069B  0870               	movf	?___lldiv,w
  3801  069C  00B2               	movwf	sprintf@vd_469^(0+128)
  3802                           
  3803                           ;doprnt.c: 1239: vd %= 10;
  3804  069D  3000               	movlw	0
  3805  069E  00F3               	movwf	___llmod@divisor+3
  3806  069F  3000               	movlw	0
  3807  06A0  00F2               	movwf	___llmod@divisor+2
  3808  06A1  3000               	movlw	0
  3809  06A2  00F1               	movwf	___llmod@divisor+1
  3810  06A3  300A               	movlw	10
  3811  06A4  00F0               	movwf	___llmod@divisor
  3812  06A5  0835               	movf	(sprintf@vd_469+3)^(0+128),w
  3813  06A6  00F7               	movwf	___llmod@dividend+3
  3814  06A7  0834               	movf	(sprintf@vd_469+2)^(0+128),w
  3815  06A8  00F6               	movwf	___llmod@dividend+2
  3816  06A9  0833               	movf	(sprintf@vd_469+1)^(0+128),w
  3817  06AA  00F5               	movwf	___llmod@dividend+1
  3818  06AB  0832               	movf	sprintf@vd_469^(0+128),w
  3819  06AC  00F4               	movwf	___llmod@dividend
  3820  06AD  160A  158A  2651  120A  118A  	fcall	___llmod
  3821  06B2  0873               	movf	?___llmod+3,w
  3822  06B3  1683               	bsf	3,5	;RP0=1, select bank1
  3823  06B4  1303               	bcf	3,6	;RP1=0, select bank1
  3824  06B5  00B5               	movwf	(sprintf@vd_469+3)^(0+128)
  3825  06B6  0872               	movf	?___llmod+2,w
  3826  06B7  00B4               	movwf	(sprintf@vd_469+2)^(0+128)
  3827  06B8  0871               	movf	?___llmod+1,w
  3828  06B9  00B3               	movwf	(sprintf@vd_469+1)^(0+128)
  3829  06BA  0870               	movf	?___llmod,w
  3830  06BB  00B2               	movwf	sprintf@vd_469^(0+128)
  3831                           
  3832                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  3833  06BC  0832               	movf	sprintf@vd_469^(0+128),w
  3834  06BD  3E30               	addlw	48
  3835  06BE  00A0               	movwf	??_sprintf^(0+128)
  3836  06BF  0846               	movf	sprintf@sp^(0+128),w
  3837  06C0  0084               	movwf	4
  3838  06C1  0820               	movf	??_sprintf^(0+128),w
  3839  06C2  1783               	bsf	3,7	;select IRP bank2
  3840  06C3  0080               	movwf	0
  3841  06C4  3001               	movlw	1
  3842  06C5  00A0               	movwf	??_sprintf^(0+128)
  3843  06C6  0820               	movf	??_sprintf^(0+128),w
  3844  06C7  07C6               	addwf	sprintf@sp^(0+128),f
  3845                           
  3846                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  3847  06C8  0849               	movf	sprintf@c^(0+128),w
  3848  06C9  00A0               	movwf	??_sprintf^(0+128)
  3849  06CA  3001               	movlw	1
  3850  06CB                     u4455:	
  3851  06CB  1003               	clrc
  3852  06CC  0DA0               	rlf	??_sprintf^(0+128),f
  3853  06CD  3EFF               	addlw	-1
  3854  06CE  1D03               	skipz
  3855  06CF  2ECB               	goto	u4455
  3856  06D0  1003               	clrc
  3857  06D1  0D20               	rlf	??_sprintf^(0+128),w
  3858  06D2  3E01               	addlw	low (_dpowers-__stringbase)
  3859  06D3  0084               	movwf	4
  3860  06D4  160A  118A  2000  120A  118A  	fcall	stringdir
  3861  06D9  00F0               	movwf	___llmod@divisor
  3862  06DA  160A  118A  2000  120A  118A  	fcall	stringdir
  3863  06DF  00F1               	movwf	___llmod@divisor+1
  3864  06E0  160A  118A  2000  120A  118A  	fcall	stringdir
  3865  06E5  00F2               	movwf	___llmod@divisor+2
  3866  06E6  160A  118A  2000  120A  118A  	fcall	stringdir
  3867  06EB  00F3               	movwf	___llmod@divisor+3
  3868  06EC  083C               	movf	(sprintf@_val+3)^(0+128),w
  3869  06ED  00F7               	movwf	___llmod@dividend+3
  3870  06EE  083B               	movf	(sprintf@_val+2)^(0+128),w
  3871  06EF  00F6               	movwf	___llmod@dividend+2
  3872  06F0  083A               	movf	(sprintf@_val+1)^(0+128),w
  3873  06F1  00F5               	movwf	___llmod@dividend+1
  3874  06F2  0839               	movf	sprintf@_val^(0+128),w
  3875  06F3  00F4               	movwf	___llmod@dividend
  3876  06F4  160A  158A  2651  120A  118A  	fcall	___llmod
  3877  06F9  0873               	movf	?___llmod+3,w
  3878  06FA  1683               	bsf	3,5	;RP0=1, select bank1
  3879  06FB  1303               	bcf	3,6	;RP1=0, select bank1
  3880  06FC  00BC               	movwf	(sprintf@_val+3)^(0+128)
  3881  06FD  0872               	movf	?___llmod+2,w
  3882  06FE  00BB               	movwf	(sprintf@_val+2)^(0+128)
  3883  06FF  0871               	movf	?___llmod+1,w
  3884  0700  00BA               	movwf	(sprintf@_val+1)^(0+128)
  3885  0701  0870               	movf	?___llmod,w
  3886  0702  2E59               	goto	L7
  3887  0703                     l3054:	
  3888                           ;doprnt.c: 1242: }
  3889                           ;doprnt.c: 1244: while(prec) {
  3890                           
  3891                           
  3892                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  3893  0703  3030               	movlw	48
  3894  0704  00A0               	movwf	??_sprintf^(0+128)
  3895  0705  0846               	movf	sprintf@sp^(0+128),w
  3896  0706  0084               	movwf	4
  3897  0707  0820               	movf	??_sprintf^(0+128),w
  3898  0708  1783               	bsf	3,7	;select IRP bank2
  3899  0709  0080               	movwf	0
  3900  070A  3001               	movlw	1
  3901  070B  00A0               	movwf	??_sprintf^(0+128)
  3902  070C  0820               	movf	??_sprintf^(0+128),w
  3903  070D  07C6               	addwf	sprintf@sp^(0+128),f
  3904                           
  3905                           ;doprnt.c: 1246: prec--;
  3906  070E  30FF               	movlw	255
  3907  070F  07C7               	addwf	sprintf@prec^(0+128),f
  3908  0710  1803               	skipnc
  3909  0711  0AC8               	incf	(sprintf@prec+1)^(0+128),f
  3910  0712  30FF               	movlw	255
  3911  0713  07C8               	addwf	(sprintf@prec+1)^(0+128),f
  3912  0714                     l3060:	
  3913  0714  0848               	movf	(sprintf@prec+1)^(0+128),w
  3914  0715  0447               	iorwf	sprintf@prec^(0+128),w
  3915  0716  1903               	btfsc	3,2
  3916  0717  28D4               	goto	l3108
  3917  0718  2F03               	goto	l3054
  3918  0719                     l3062:	
  3919                           ;doprnt.c: 1247: }
  3920                           ;doprnt.c: 1254: continue;
  3921                           
  3922                           
  3923                           ;doprnt.c: 1255: }
  3924                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  3925  0719  0848               	movf	(sprintf@prec+1)^(0+128),w
  3926  071A  0447               	iorwf	sprintf@prec^(0+128),w
  3927  071B  1D03               	skipz
  3928  071C  2F29               	goto	l443
  3929  071D  083C               	movf	(sprintf@_val+3)^(0+128),w
  3930  071E  043B               	iorwf	(sprintf@_val+2)^(0+128),w
  3931  071F  043A               	iorwf	(sprintf@_val+1)^(0+128),w
  3932  0720  0439               	iorwf	sprintf@_val^(0+128),w
  3933  0721  1D03               	skipz
  3934  0722  2F29               	goto	l443
  3935                           
  3936                           ;doprnt.c: 1300: prec++;
  3937  0723  3001               	movlw	1
  3938  0724  07C7               	addwf	sprintf@prec^(0+128),f
  3939  0725  1803               	skipnc
  3940  0726  0AC8               	incf	(sprintf@prec+1)^(0+128),f
  3941  0727  3000               	movlw	0
  3942  0728  07C8               	addwf	(sprintf@prec+1)^(0+128),f
  3943  0729                     l443:	
  3944                           
  3945                           ;doprnt.c: 1348: if(c < prec)
  3946  0729  0849               	movf	sprintf@c^(0+128),w
  3947  072A  00A0               	movwf	??_sprintf^(0+128)
  3948  072B  01A1               	clrf	(??_sprintf^(0+128)+1)
  3949  072C  1BA0               	btfsc	??_sprintf^(0+128),7
  3950  072D  03A1               	decf	(??_sprintf^(0+128)+1),f
  3951  072E  0821               	movf	(??_sprintf+1)^(0+128),w
  3952  072F  3A80               	xorlw	128
  3953  0730  00A2               	movwf	(??_sprintf+2)^(0+128)
  3954  0731  0848               	movf	(sprintf@prec+1)^(0+128),w
  3955  0732  3A80               	xorlw	128
  3956  0733  0222               	subwf	(??_sprintf+2)^(0+128),w
  3957  0734  1D03               	skipz
  3958  0735  2F38               	goto	u4505
  3959  0736  0847               	movf	sprintf@prec^(0+128),w
  3960  0737  0220               	subwf	??_sprintf^(0+128),w
  3961  0738                     u4505:	
  3962  0738  1803               	skipnc
  3963  0739  2F41               	goto	l3070
  3964                           
  3965                           ;doprnt.c: 1349: c = prec;
  3966  073A  1683               	bsf	3,5	;RP0=1, select bank1
  3967  073B  1303               	bcf	3,6	;RP1=0, select bank1
  3968  073C  0847               	movf	sprintf@prec^(0+128),w
  3969  073D  00A0               	movwf	??_sprintf^(0+128)
  3970  073E  0820               	movf	??_sprintf^(0+128),w
  3971  073F  00C9               	movwf	sprintf@c^(0+128)
  3972  0740  2F5B               	goto	l3074
  3973  0741                     l3070:	
  3974                           
  3975                           ;doprnt.c: 1350: else if(prec < c)
  3976  0741  1683               	bsf	3,5	;RP0=1, select bank1
  3977  0742  1303               	bcf	3,6	;RP1=0, select bank1
  3978  0743  0849               	movf	sprintf@c^(0+128),w
  3979  0744  00A0               	movwf	??_sprintf^(0+128)
  3980  0745  01A1               	clrf	(??_sprintf^(0+128)+1)
  3981  0746  1BA0               	btfsc	??_sprintf^(0+128),7
  3982  0747  03A1               	decf	(??_sprintf^(0+128)+1),f
  3983  0748  0848               	movf	(sprintf@prec+1)^(0+128),w
  3984  0749  3A80               	xorlw	128
  3985  074A  00A2               	movwf	(??_sprintf+2)^(0+128)
  3986  074B  0821               	movf	(??_sprintf+1)^(0+128),w
  3987  074C  3A80               	xorlw	128
  3988  074D  0222               	subwf	(??_sprintf+2)^(0+128),w
  3989  074E  1D03               	skipz
  3990  074F  2F52               	goto	u4515
  3991  0750  0820               	movf	??_sprintf^(0+128),w
  3992  0751  0247               	subwf	sprintf@prec^(0+128),w
  3993  0752                     u4515:	
  3994  0752  1803               	skipnc
  3995  0753  2F5B               	goto	l3074
  3996                           
  3997                           ;doprnt.c: 1351: prec = c;
  3998  0754  1683               	bsf	3,5	;RP0=1, select bank1
  3999  0755  1303               	bcf	3,6	;RP1=0, select bank1
  4000  0756  0849               	movf	sprintf@c^(0+128),w
  4001  0757  00C7               	movwf	sprintf@prec^(0+128)
  4002  0758  01C8               	clrf	(sprintf@prec+1)^(0+128)
  4003  0759  1BC7               	btfsc	sprintf@prec^(0+128),7
  4004  075A  03C8               	decf	(sprintf@prec+1)^(0+128),f
  4005  075B                     l3074:	
  4006                           
  4007                           ;doprnt.c: 1354: if(width && flag & 0x03)
  4008  075B  1683               	bsf	3,5	;RP0=1, select bank1
  4009  075C  1303               	bcf	3,6	;RP1=0, select bank1
  4010  075D  0840               	movf	(sprintf@width+1)^(0+128),w
  4011  075E  043F               	iorwf	sprintf@width^(0+128),w
  4012  075F  1903               	skipnz
  4013  0760  2F71               	goto	l3080
  4014  0761  3003               	movlw	3
  4015  0762  053D               	andwf	sprintf@flag^(0+128),w
  4016  0763  00A0               	movwf	??_sprintf^(0+128)
  4017  0764  3000               	movlw	0
  4018  0765  053E               	andwf	(sprintf@flag+1)^(0+128),w
  4019  0766  00A1               	movwf	(??_sprintf+1)^(0+128)
  4020  0767  0821               	movf	(??_sprintf+1)^(0+128),w
  4021  0768  0420               	iorwf	??_sprintf^(0+128),w
  4022  0769  1903               	skipnz
  4023  076A  2F71               	goto	l3080
  4024                           
  4025                           ;doprnt.c: 1355: width--;
  4026  076B  30FF               	movlw	255
  4027  076C  07BF               	addwf	sprintf@width^(0+128),f
  4028  076D  1803               	skipnc
  4029  076E  0AC0               	incf	(sprintf@width+1)^(0+128),f
  4030  076F  30FF               	movlw	255
  4031  0770  07C0               	addwf	(sprintf@width+1)^(0+128),f
  4032  0771                     l3080:	
  4033                           
  4034                           ;doprnt.c: 1357: if(flag & 0x4000) {
  4035  0771  1F3E               	btfss	(sprintf@flag+1)^(0+128),6
  4036  0772  2F8C               	goto	l3088
  4037                           
  4038                           ;doprnt.c: 1358: if(width > prec)
  4039  0773  0848               	movf	(sprintf@prec+1)^(0+128),w
  4040  0774  3A80               	xorlw	128
  4041  0775  00A0               	movwf	??_sprintf^(0+128)
  4042  0776  0840               	movf	(sprintf@width+1)^(0+128),w
  4043  0777  3A80               	xorlw	128
  4044  0778  0220               	subwf	??_sprintf^(0+128),w
  4045  0779  1D03               	skipz
  4046  077A  2F7D               	goto	u4555
  4047  077B  083F               	movf	sprintf@width^(0+128),w
  4048  077C  0247               	subwf	sprintf@prec^(0+128),w
  4049  077D                     u4555:	
  4050  077D  1803               	skipnc
  4051  077E  2F88               	goto	l3086
  4052                           
  4053                           ;doprnt.c: 1359: width -= prec;
  4054  077F  1683               	bsf	3,5	;RP0=1, select bank1
  4055  0780  1303               	bcf	3,6	;RP1=0, select bank1
  4056  0781  0847               	movf	sprintf@prec^(0+128),w
  4057  0782  02BF               	subwf	sprintf@width^(0+128),f
  4058  0783  0848               	movf	(sprintf@prec+1)^(0+128),w
  4059  0784  1C03               	skipc
  4060  0785  03C0               	decf	(sprintf@width+1)^(0+128),f
  4061  0786  02C0               	subwf	(sprintf@width+1)^(0+128),f
  4062  0787  2F8C               	goto	l3088
  4063  0788                     l3086:	
  4064                           
  4065                           ;doprnt.c: 1360: else
  4066                           ;doprnt.c: 1361: width = 0;
  4067  0788  1683               	bsf	3,5	;RP0=1, select bank1
  4068  0789  1303               	bcf	3,6	;RP1=0, select bank1
  4069  078A  01BF               	clrf	sprintf@width^(0+128)
  4070  078B  01C0               	clrf	(sprintf@width+1)^(0+128)
  4071  078C                     l3088:	
  4072                           
  4073                           ;doprnt.c: 1362: }
  4074                           ;doprnt.c: 1390: if(width > c)
  4075  078C  0849               	movf	sprintf@c^(0+128),w
  4076  078D  00A0               	movwf	??_sprintf^(0+128)
  4077  078E  01A1               	clrf	(??_sprintf^(0+128)+1)
  4078  078F  1BA0               	btfsc	??_sprintf^(0+128),7
  4079  0790  03A1               	decf	(??_sprintf^(0+128)+1),f
  4080  0791  0821               	movf	(??_sprintf+1)^(0+128),w
  4081  0792  3A80               	xorlw	128
  4082  0793  00A2               	movwf	(??_sprintf+2)^(0+128)
  4083  0794  0840               	movf	(sprintf@width+1)^(0+128),w
  4084  0795  3A80               	xorlw	128
  4085  0796  0222               	subwf	(??_sprintf+2)^(0+128),w
  4086  0797  1D03               	skipz
  4087  0798  2F9B               	goto	u4565
  4088  0799  083F               	movf	sprintf@width^(0+128),w
  4089  079A  0220               	subwf	??_sprintf^(0+128),w
  4090  079B                     u4565:	
  4091  079B  1803               	skipnc
  4092  079C  2FAB               	goto	l3092
  4093                           
  4094                           ;doprnt.c: 1391: width -= c;
  4095  079D  1683               	bsf	3,5	;RP0=1, select bank1
  4096  079E  1303               	bcf	3,6	;RP1=0, select bank1
  4097  079F  0849               	movf	sprintf@c^(0+128),w
  4098  07A0  00A0               	movwf	??_sprintf^(0+128)
  4099  07A1  01A1               	clrf	(??_sprintf^(0+128)+1)
  4100  07A2  1BA0               	btfsc	??_sprintf^(0+128),7
  4101  07A3  03A1               	decf	(??_sprintf^(0+128)+1),f
  4102  07A4  0820               	movf	??_sprintf^(0+128),w
  4103  07A5  02BF               	subwf	sprintf@width^(0+128),f
  4104  07A6  0821               	movf	(??_sprintf+1)^(0+128),w
  4105  07A7  1C03               	skipc
  4106  07A8  03C0               	decf	(sprintf@width+1)^(0+128),f
  4107  07A9  02C0               	subwf	(sprintf@width+1)^(0+128),f
  4108  07AA  2FAF               	goto	l3094
  4109  07AB                     l3092:	
  4110                           
  4111                           ;doprnt.c: 1392: else
  4112                           ;doprnt.c: 1393: width = 0;
  4113  07AB  1683               	bsf	3,5	;RP0=1, select bank1
  4114  07AC  1303               	bcf	3,6	;RP1=0, select bank1
  4115  07AD  01BF               	clrf	sprintf@width^(0+128)
  4116  07AE  01C0               	clrf	(sprintf@width+1)^(0+128)
  4117  07AF                     l3094:	
  4118                           
  4119                           ;doprnt.c: 1431: {
  4120                           ;doprnt.c: 1433: if(width
  4121                           ;doprnt.c: 1437: )
  4122  07AF  0840               	movf	(sprintf@width+1)^(0+128),w
  4123  07B0  043F               	iorwf	sprintf@width^(0+128),w
  4124  07B1  1903               	skipnz
  4125  07B2  2FC8               	goto	l3102
  4126  07B3                     l3096:	
  4127                           ;doprnt.c: 1438: do
  4128                           
  4129                           
  4130                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  4131  07B3  3020               	movlw	32
  4132  07B4  00A0               	movwf	??_sprintf^(0+128)
  4133  07B5  0846               	movf	sprintf@sp^(0+128),w
  4134  07B6  0084               	movwf	4
  4135  07B7  0820               	movf	??_sprintf^(0+128),w
  4136  07B8  1783               	bsf	3,7	;select IRP bank2
  4137  07B9  0080               	movwf	0
  4138  07BA  3001               	movlw	1
  4139  07BB  00A0               	movwf	??_sprintf^(0+128)
  4140  07BC  0820               	movf	??_sprintf^(0+128),w
  4141  07BD  07C6               	addwf	sprintf@sp^(0+128),f
  4142                           
  4143                           ;doprnt.c: 1440: while(--width);
  4144  07BE  30FF               	movlw	255
  4145  07BF  07BF               	addwf	sprintf@width^(0+128),f
  4146  07C0  1803               	skipnc
  4147  07C1  0AC0               	incf	(sprintf@width+1)^(0+128),f
  4148  07C2  30FF               	movlw	255
  4149  07C3  07C0               	addwf	(sprintf@width+1)^(0+128),f
  4150  07C4  0840               	movf	(sprintf@width+1)^(0+128),w
  4151  07C5  043F               	iorwf	sprintf@width^(0+128),w
  4152  07C6  1D03               	skipz
  4153  07C7  2FB3               	goto	l3096
  4154  07C8                     l3102:	
  4155                           
  4156                           ;doprnt.c: 1447: if(flag & 0x03)
  4157  07C8  3003               	movlw	3
  4158  07C9  053D               	andwf	sprintf@flag^(0+128),w
  4159  07CA  00A0               	movwf	??_sprintf^(0+128)
  4160  07CB  3000               	movlw	0
  4161  07CC  053E               	andwf	(sprintf@flag+1)^(0+128),w
  4162  07CD  00A1               	movwf	(??_sprintf+1)^(0+128)
  4163  07CE  0821               	movf	(??_sprintf+1)^(0+128),w
  4164  07CF  0420               	iorwf	??_sprintf^(0+128),w
  4165  07D0  1903               	skipnz
  4166  07D1  28D4               	goto	l3108
  4167                           
  4168                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  4169  07D2  302D               	movlw	45
  4170  07D3                     L8:	
  4171  07D3  00A0               	movwf	??_sprintf^(0+128)
  4172  07D4  0846               	movf	sprintf@sp^(0+128),w
  4173  07D5  0084               	movwf	4
  4174  07D6  0820               	movf	??_sprintf^(0+128),w
  4175  07D7  1783               	bsf	3,7	;select IRP bank2
  4176  07D8  0080               	movwf	0
  4177  07D9  3001               	movlw	1
  4178  07DA  00A0               	movwf	??_sprintf^(0+128)
  4179  07DB  0820               	movf	??_sprintf^(0+128),w
  4180  07DC  07C6               	addwf	sprintf@sp^(0+128),f
  4181  07DD  28D4               	goto	l3108
  4182  07DE                     l3110:	
  4183                           ;doprnt.c: 1478: }
  4184                           ;doprnt.c: 1542: }
  4185                           ;doprnt.c: 1544: alldone:
  4186                           
  4187                           
  4188                           ;doprnt.c: 1547: *sp = 0;
  4189  07DE  0846               	movf	sprintf@sp^(0+128),w
  4190  07DF  0084               	movwf	4
  4191  07E0  1783               	bsf	3,7	;select IRP bank2
  4192  07E1  0180               	clrf	0
  4193  07E2  0008               	return
  4194  07E3                     __end_of_sprintf:	
  4195                           ;doprnt.c: 1549: return 0;
  4196                           ;	Return value of _sprintf is never used
  4197                           
  4198                           
  4199                           	psect	text2
  4200  09DF                     __ptext2:	
  4201 ;; *************** function _scale *****************
  4202 ;; Defined at:
  4203 ;;		line 425 in file "/opt/microchip/xc8/v1.33/sources/common/doprnt.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  scl             1    wreg     char 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  scl             1   45[BANK0 ] char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  3   37[BANK0 ] char 
  4210 ;; Registers used:
  4211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4217 ;;      Params:         0       3       0       0       0
  4218 ;;      Locals:         0       4       0       0       0
  4219 ;;      Temps:          0       2       0       0       0
  4220 ;;      Totals:         0       9       0       0       0
  4221 ;;Total ram usage:        9 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    2
  4224 ;; This function calls:
  4225 ;;		___awdiv
  4226 ;;		___awmod
  4227 ;;		___bmul
  4228 ;;		___ftmul
  4229 ;; This function is called by:
  4230 ;;		_sprintf
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           
  4235                           ;psect for function _scale
  4236  09DF                     _scale:	
  4237                           
  4238                           ;incstack = 0
  4239                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4240                           ;scale@scl stored from wreg
  4241  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  4242  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  4243  09E1  00CD               	movwf	scale@scl
  4244                           
  4245                           ;doprnt.c: 428: if(scl < 0) {
  4246  09E2  1FCD               	btfss	scale@scl,7
  4247  09E3  2B32               	goto	l2486
  4248                           
  4249                           ;doprnt.c: 429: scl = -scl;
  4250  09E4  09CD               	comf	scale@scl,f
  4251  09E5  0ACD               	incf	scale@scl,f
  4252                           
  4253                           ;doprnt.c: 430: if(scl>=110)
  4254  09E6  084D               	movf	scale@scl,w
  4255  09E7  3A80               	xorlw	128
  4256  09E8  3E12               	addlw	-238
  4257  09E9  1C03               	skipc
  4258  09EA  2AA5               	goto	l2476
  4259                           
  4260                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4261  09EB  3003               	movlw	3
  4262  09EC  00C8               	movwf	??_scale
  4263  09ED  0848               	movf	??_scale,w
  4264  09EE  00A4               	movwf	___bmul@multiplicand
  4265  09EF  300A               	movlw	10
  4266  09F0  00F7               	movwf	___awdiv@divisor
  4267  09F1  3000               	movlw	0
  4268  09F2  00F8               	movwf	___awdiv@divisor+1
  4269  09F3  084D               	movf	scale@scl,w
  4270  09F4  00F2               	movwf	___awmod@dividend
  4271  09F5  01F3               	clrf	___awmod@dividend+1
  4272  09F6  1BF2               	btfsc	___awmod@dividend,7
  4273  09F7  03F3               	decf	___awmod@dividend+1,f
  4274  09F8  3064               	movlw	100
  4275  09F9  00F0               	movwf	___awmod@divisor
  4276  09FA  3000               	movlw	0
  4277  09FB  00F1               	movwf	___awmod@divisor+1
  4278  09FC  160A  158A  269D  120A  158A  	fcall	___awmod
  4279  0A01  0871               	movf	?___awmod+1,w
  4280  0A02  01FA               	clrf	___awdiv@dividend+1
  4281  0A03  07FA               	addwf	___awdiv@dividend+1,f
  4282  0A04  0870               	movf	?___awmod,w
  4283  0A05  01F9               	clrf	___awdiv@dividend
  4284  0A06  07F9               	addwf	___awdiv@dividend,f
  4285  0A07  160A  158A  2745  120A  158A  	fcall	___awdiv
  4286  0A0C  0877               	movf	?___awdiv,w
  4287  0A0D  3E09               	addlw	9
  4288  0A0E  120A  158A  2001  120A  158A  	fcall	___bmul
  4289  0A13  3E29               	addlw	low (__npowers_-__stringbase)
  4290  0A14  0084               	movwf	4
  4291  0A15  160A  118A  2000  120A  158A  	fcall	stringdir
  4292  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  4293  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  4294  0A1C  00B5               	movwf	___ftmul@f1
  4295  0A1D  160A  118A  2000  120A  158A  	fcall	stringdir
  4296  0A22  00B6               	movwf	___ftmul@f1+1
  4297  0A23  160A  118A  2000  120A  158A  	fcall	stringdir
  4298  0A28  00B7               	movwf	___ftmul@f1+2
  4299  0A29  3003               	movlw	3
  4300  0A2A  00C9               	movwf	??_scale+1
  4301  0A2B  0849               	movf	??_scale+1,w
  4302  0A2C  00A4               	movwf	___bmul@multiplicand
  4303  0A2D  3064               	movlw	100
  4304  0A2E  00F7               	movwf	___awdiv@divisor
  4305  0A2F  3000               	movlw	0
  4306  0A30  00F8               	movwf	___awdiv@divisor+1
  4307  0A31  084D               	movf	scale@scl,w
  4308  0A32  00F9               	movwf	___awdiv@dividend
  4309  0A33  01FA               	clrf	___awdiv@dividend+1
  4310  0A34  1BF9               	btfsc	___awdiv@dividend,7
  4311  0A35  03FA               	decf	___awdiv@dividend+1,f
  4312  0A36  160A  158A  2745  120A  158A  	fcall	___awdiv
  4313  0A3B  0877               	movf	?___awdiv,w
  4314  0A3C  3E12               	addlw	18
  4315  0A3D  120A  158A  2001  120A  158A  	fcall	___bmul
  4316  0A42  3E29               	addlw	low (__npowers_-__stringbase)
  4317  0A43  0084               	movwf	4
  4318  0A44  160A  118A  2000  120A  158A  	fcall	stringdir
  4319  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  4320  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  4321  0A4B  00B8               	movwf	___ftmul@f2
  4322  0A4C  160A  118A  2000  120A  158A  	fcall	stringdir
  4323  0A51  00B9               	movwf	___ftmul@f2+1
  4324  0A52  160A  118A  2000  120A  158A  	fcall	stringdir
  4325  0A57  00BA               	movwf	___ftmul@f2+2
  4326  0A58  160A  118A  24F2  120A  158A  	fcall	___ftmul
  4327  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  4328  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  4329  0A5F  0835               	movf	?___ftmul,w
  4330  0A60  00CA               	movwf	_scale$879
  4331  0A61  0836               	movf	?___ftmul+1,w
  4332  0A62  00CB               	movwf	_scale$879+1
  4333  0A63  0837               	movf	?___ftmul+2,w
  4334  0A64  00CC               	movwf	_scale$879+2
  4335                           
  4336                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4337  0A65  3003               	movlw	3
  4338  0A66  00C8               	movwf	??_scale
  4339  0A67  0848               	movf	??_scale,w
  4340  0A68  00A4               	movwf	___bmul@multiplicand
  4341  0A69  084D               	movf	scale@scl,w
  4342  0A6A  00F2               	movwf	___awmod@dividend
  4343  0A6B  01F3               	clrf	___awmod@dividend+1
  4344  0A6C  1BF2               	btfsc	___awmod@dividend,7
  4345  0A6D  03F3               	decf	___awmod@dividend+1,f
  4346  0A6E  300A               	movlw	10
  4347  0A6F  00F0               	movwf	___awmod@divisor
  4348  0A70  3000               	movlw	0
  4349  0A71  00F1               	movwf	___awmod@divisor+1
  4350  0A72  160A  158A  269D  120A  158A  	fcall	___awmod
  4351  0A77  0870               	movf	?___awmod,w
  4352  0A78  120A  158A  2001  120A  158A  	fcall	___bmul
  4353  0A7D  3E29               	addlw	low (__npowers_-__stringbase)
  4354  0A7E  0084               	movwf	4
  4355  0A7F  160A  118A  2000  120A  158A  	fcall	stringdir
  4356  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  4357  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  4358  0A86  00B5               	movwf	___ftmul@f1
  4359  0A87  160A  118A  2000  120A  158A  	fcall	stringdir
  4360  0A8C  00B6               	movwf	___ftmul@f1+1
  4361  0A8D  160A  118A  2000  120A  158A  	fcall	stringdir
  4362  0A92  00B7               	movwf	___ftmul@f1+2
  4363  0A93  084A               	movf	_scale$879,w
  4364  0A94  00B8               	movwf	___ftmul@f2
  4365  0A95  084B               	movf	_scale$879+1,w
  4366  0A96  00B9               	movwf	___ftmul@f2+1
  4367  0A97  084C               	movf	_scale$879+2,w
  4368  0A98  00BA               	movwf	___ftmul@f2+2
  4369  0A99  160A  118A  24F2   	fcall	___ftmul
  4370  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  4371  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  4372  0A9E  0835               	movf	?___ftmul,w
  4373  0A9F  00C5               	movwf	?_scale
  4374  0AA0  0836               	movf	?___ftmul+1,w
  4375  0AA1  00C6               	movwf	?_scale+1
  4376  0AA2  0837               	movf	?___ftmul+2,w
  4377  0AA3  00C7               	movwf	?_scale+2
  4378  0AA4  0008               	return
  4379  0AA5                     l2476:	
  4380                           
  4381                           ;doprnt.c: 432: else if(scl > 10)
  4382  0AA5  084D               	movf	scale@scl,w
  4383  0AA6  3A80               	xorlw	128
  4384  0AA7  3E75               	addlw	-139
  4385  0AA8  1C03               	skipc
  4386  0AA9  2B13               	goto	l2482
  4387                           
  4388                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4389  0AAA  3003               	movlw	3
  4390  0AAB  00C8               	movwf	??_scale
  4391  0AAC  0848               	movf	??_scale,w
  4392  0AAD  00A4               	movwf	___bmul@multiplicand
  4393  0AAE  084D               	movf	scale@scl,w
  4394  0AAF  00F2               	movwf	___awmod@dividend
  4395  0AB0  01F3               	clrf	___awmod@dividend+1
  4396  0AB1  1BF2               	btfsc	___awmod@dividend,7
  4397  0AB2  03F3               	decf	___awmod@dividend+1,f
  4398  0AB3  300A               	movlw	10
  4399  0AB4  00F0               	movwf	___awmod@divisor
  4400  0AB5  3000               	movlw	0
  4401  0AB6  00F1               	movwf	___awmod@divisor+1
  4402  0AB7  160A  158A  269D  120A  158A  	fcall	___awmod
  4403  0ABC  0870               	movf	?___awmod,w
  4404  0ABD  120A  158A  2001  120A  158A  	fcall	___bmul
  4405  0AC2  3E29               	addlw	low (__npowers_-__stringbase)
  4406  0AC3  0084               	movwf	4
  4407  0AC4  160A  118A  2000  120A  158A  	fcall	stringdir
  4408  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  4409  0ACA  1303               	bcf	3,6	;RP1=0, select bank0
  4410  0ACB  00B5               	movwf	___ftmul@f1
  4411  0ACC  160A  118A  2000  120A  158A  	fcall	stringdir
  4412  0AD1  00B6               	movwf	___ftmul@f1+1
  4413  0AD2  160A  118A  2000  120A  158A  	fcall	stringdir
  4414  0AD7  00B7               	movwf	___ftmul@f1+2
  4415  0AD8  3003               	movlw	3
  4416  0AD9  00C9               	movwf	??_scale+1
  4417  0ADA  0849               	movf	??_scale+1,w
  4418  0ADB  00A4               	movwf	___bmul@multiplicand
  4419  0ADC  300A               	movlw	10
  4420  0ADD  00F7               	movwf	___awdiv@divisor
  4421  0ADE  3000               	movlw	0
  4422  0ADF  00F8               	movwf	___awdiv@divisor+1
  4423  0AE0  084D               	movf	scale@scl,w
  4424  0AE1  00F9               	movwf	___awdiv@dividend
  4425  0AE2  01FA               	clrf	___awdiv@dividend+1
  4426  0AE3  1BF9               	btfsc	___awdiv@dividend,7
  4427  0AE4  03FA               	decf	___awdiv@dividend+1,f
  4428  0AE5  160A  158A  2745  120A  158A  	fcall	___awdiv
  4429  0AEA  0877               	movf	?___awdiv,w
  4430  0AEB  3E09               	addlw	9
  4431  0AEC  120A  158A  2001  120A  158A  	fcall	___bmul
  4432  0AF1  3E29               	addlw	low (__npowers_-__stringbase)
  4433  0AF2  0084               	movwf	4
  4434  0AF3  160A  118A  2000  120A  158A  	fcall	stringdir
  4435  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  4436  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  4437  0AFA  00B8               	movwf	___ftmul@f2
  4438  0AFB  160A  118A  2000  120A  158A  	fcall	stringdir
  4439  0B00  00B9               	movwf	___ftmul@f2+1
  4440  0B01  160A  118A  2000  120A  158A  	fcall	stringdir
  4441  0B06  00BA               	movwf	___ftmul@f2+2
  4442  0B07  160A  118A  24F2   	fcall	___ftmul
  4443  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  4444  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  4445  0B0C  0835               	movf	?___ftmul,w
  4446  0B0D  00C5               	movwf	?_scale
  4447  0B0E  0836               	movf	?___ftmul+1,w
  4448  0B0F  00C6               	movwf	?_scale+1
  4449  0B10  0837               	movf	?___ftmul+2,w
  4450  0B11  00C7               	movwf	?_scale+2
  4451  0B12  0008               	return
  4452  0B13                     l2482:	
  4453                           
  4454                           ;doprnt.c: 434: return _npowers_[scl];
  4455  0B13  3003               	movlw	3
  4456  0B14  00C8               	movwf	??_scale
  4457  0B15  0848               	movf	??_scale,w
  4458  0B16  00A4               	movwf	___bmul@multiplicand
  4459  0B17  084D               	movf	scale@scl,w
  4460  0B18  120A  158A  2001  120A  158A  	fcall	___bmul
  4461  0B1D  3E29               	addlw	low (__npowers_-__stringbase)
  4462  0B1E  0084               	movwf	4
  4463  0B1F  160A  118A  2000  120A  158A  	fcall	stringdir
  4464  0B24  1283               	bcf	3,5	;RP0=0, select bank0
  4465  0B25  1303               	bcf	3,6	;RP1=0, select bank0
  4466  0B26  00C5               	movwf	?_scale
  4467  0B27  160A  118A  2000  120A  158A  	fcall	stringdir
  4468  0B2C  00C6               	movwf	?_scale+1
  4469  0B2D  160A  118A  2000   	fcall	stringdir
  4470  0B30  00C7               	movwf	?_scale+2
  4471  0B31  0008               	return
  4472  0B32                     l2486:	
  4473                           
  4474                           ;doprnt.c: 435: }
  4475                           ;doprnt.c: 436: if(scl>=110)
  4476  0B32  084D               	movf	scale@scl,w
  4477  0B33  3A80               	xorlw	128
  4478  0B34  3E12               	addlw	-238
  4479  0B35  1C03               	skipc
  4480  0B36  2BF1               	goto	l2494
  4481                           
  4482                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4483  0B37  3003               	movlw	3
  4484  0B38  00C8               	movwf	??_scale
  4485  0B39  0848               	movf	??_scale,w
  4486  0B3A  00A4               	movwf	___bmul@multiplicand
  4487  0B3B  300A               	movlw	10
  4488  0B3C  00F7               	movwf	___awdiv@divisor
  4489  0B3D  3000               	movlw	0
  4490  0B3E  00F8               	movwf	___awdiv@divisor+1
  4491  0B3F  084D               	movf	scale@scl,w
  4492  0B40  00F2               	movwf	___awmod@dividend
  4493  0B41  01F3               	clrf	___awmod@dividend+1
  4494  0B42  1BF2               	btfsc	___awmod@dividend,7
  4495  0B43  03F3               	decf	___awmod@dividend+1,f
  4496  0B44  3064               	movlw	100
  4497  0B45  00F0               	movwf	___awmod@divisor
  4498  0B46  3000               	movlw	0
  4499  0B47  00F1               	movwf	___awmod@divisor+1
  4500  0B48  160A  158A  269D  120A  158A  	fcall	___awmod
  4501  0B4D  0871               	movf	?___awmod+1,w
  4502  0B4E  01FA               	clrf	___awdiv@dividend+1
  4503  0B4F  07FA               	addwf	___awdiv@dividend+1,f
  4504  0B50  0870               	movf	?___awmod,w
  4505  0B51  01F9               	clrf	___awdiv@dividend
  4506  0B52  07F9               	addwf	___awdiv@dividend,f
  4507  0B53  160A  158A  2745  120A  158A  	fcall	___awdiv
  4508  0B58  0877               	movf	?___awdiv,w
  4509  0B59  3E09               	addlw	9
  4510  0B5A  120A  158A  2001  120A  158A  	fcall	___bmul
  4511  0B5F  3E50               	addlw	low (__powers_-__stringbase)
  4512  0B60  0084               	movwf	4
  4513  0B61  160A  118A  2000  120A  158A  	fcall	stringdir
  4514  0B66  1283               	bcf	3,5	;RP0=0, select bank0
  4515  0B67  1303               	bcf	3,6	;RP1=0, select bank0
  4516  0B68  00B5               	movwf	___ftmul@f1
  4517  0B69  160A  118A  2000  120A  158A  	fcall	stringdir
  4518  0B6E  00B6               	movwf	___ftmul@f1+1
  4519  0B6F  160A  118A  2000  120A  158A  	fcall	stringdir
  4520  0B74  00B7               	movwf	___ftmul@f1+2
  4521  0B75  3003               	movlw	3
  4522  0B76  00C9               	movwf	??_scale+1
  4523  0B77  0849               	movf	??_scale+1,w
  4524  0B78  00A4               	movwf	___bmul@multiplicand
  4525  0B79  3064               	movlw	100
  4526  0B7A  00F7               	movwf	___awdiv@divisor
  4527  0B7B  3000               	movlw	0
  4528  0B7C  00F8               	movwf	___awdiv@divisor+1
  4529  0B7D  084D               	movf	scale@scl,w
  4530  0B7E  00F9               	movwf	___awdiv@dividend
  4531  0B7F  01FA               	clrf	___awdiv@dividend+1
  4532  0B80  1BF9               	btfsc	___awdiv@dividend,7
  4533  0B81  03FA               	decf	___awdiv@dividend+1,f
  4534  0B82  160A  158A  2745  120A  158A  	fcall	___awdiv
  4535  0B87  0877               	movf	?___awdiv,w
  4536  0B88  3E12               	addlw	18
  4537  0B89  120A  158A  2001  120A  158A  	fcall	___bmul
  4538  0B8E  3E50               	addlw	low (__powers_-__stringbase)
  4539  0B8F  0084               	movwf	4
  4540  0B90  160A  118A  2000  120A  158A  	fcall	stringdir
  4541  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  4542  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  4543  0B97  00B8               	movwf	___ftmul@f2
  4544  0B98  160A  118A  2000  120A  158A  	fcall	stringdir
  4545  0B9D  00B9               	movwf	___ftmul@f2+1
  4546  0B9E  160A  118A  2000  120A  158A  	fcall	stringdir
  4547  0BA3  00BA               	movwf	___ftmul@f2+2
  4548  0BA4  160A  118A  24F2  120A  158A  	fcall	___ftmul
  4549  0BA9  1283               	bcf	3,5	;RP0=0, select bank0
  4550  0BAA  1303               	bcf	3,6	;RP1=0, select bank0
  4551  0BAB  0835               	movf	?___ftmul,w
  4552  0BAC  00CA               	movwf	_scale$879
  4553  0BAD  0836               	movf	?___ftmul+1,w
  4554  0BAE  00CB               	movwf	_scale$879+1
  4555  0BAF  0837               	movf	?___ftmul+2,w
  4556  0BB0  00CC               	movwf	_scale$879+2
  4557                           
  4558                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4559  0BB1  3003               	movlw	3
  4560  0BB2  00C8               	movwf	??_scale
  4561  0BB3  0848               	movf	??_scale,w
  4562  0BB4  00A4               	movwf	___bmul@multiplicand
  4563  0BB5  084D               	movf	scale@scl,w
  4564  0BB6  00F2               	movwf	___awmod@dividend
  4565  0BB7  01F3               	clrf	___awmod@dividend+1
  4566  0BB8  1BF2               	btfsc	___awmod@dividend,7
  4567  0BB9  03F3               	decf	___awmod@dividend+1,f
  4568  0BBA  300A               	movlw	10
  4569  0BBB  00F0               	movwf	___awmod@divisor
  4570  0BBC  3000               	movlw	0
  4571  0BBD  00F1               	movwf	___awmod@divisor+1
  4572  0BBE  160A  158A  269D  120A  158A  	fcall	___awmod
  4573  0BC3  0870               	movf	?___awmod,w
  4574  0BC4  120A  158A  2001  120A  158A  	fcall	___bmul
  4575  0BC9  3E50               	addlw	low (__powers_-__stringbase)
  4576  0BCA  0084               	movwf	4
  4577  0BCB  160A  118A  2000  120A  158A  	fcall	stringdir
  4578  0BD0  1283               	bcf	3,5	;RP0=0, select bank0
  4579  0BD1  1303               	bcf	3,6	;RP1=0, select bank0
  4580  0BD2  00B5               	movwf	___ftmul@f1
  4581  0BD3  160A  118A  2000  120A  158A  	fcall	stringdir
  4582  0BD8  00B6               	movwf	___ftmul@f1+1
  4583  0BD9  160A  118A  2000  120A  158A  	fcall	stringdir
  4584  0BDE  00B7               	movwf	___ftmul@f1+2
  4585  0BDF  084A               	movf	_scale$879,w
  4586  0BE0  00B8               	movwf	___ftmul@f2
  4587  0BE1  084B               	movf	_scale$879+1,w
  4588  0BE2  00B9               	movwf	___ftmul@f2+1
  4589  0BE3  084C               	movf	_scale$879+2,w
  4590  0BE4  00BA               	movwf	___ftmul@f2+2
  4591  0BE5  160A  118A  24F2   	fcall	___ftmul
  4592  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  4593  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  4594  0BEA  0835               	movf	?___ftmul,w
  4595  0BEB  00C5               	movwf	?_scale
  4596  0BEC  0836               	movf	?___ftmul+1,w
  4597  0BED  00C6               	movwf	?_scale+1
  4598  0BEE  0837               	movf	?___ftmul+2,w
  4599  0BEF  00C7               	movwf	?_scale+2
  4600  0BF0  0008               	return
  4601  0BF1                     l2494:	
  4602                           
  4603                           ;doprnt.c: 438: else if(scl > 10)
  4604  0BF1  084D               	movf	scale@scl,w
  4605  0BF2  3A80               	xorlw	128
  4606  0BF3  3E75               	addlw	-139
  4607  0BF4  1C03               	skipc
  4608  0BF5  2C5F               	goto	l2500
  4609                           
  4610                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4611  0BF6  3003               	movlw	3
  4612  0BF7  00C8               	movwf	??_scale
  4613  0BF8  0848               	movf	??_scale,w
  4614  0BF9  00A4               	movwf	___bmul@multiplicand
  4615  0BFA  084D               	movf	scale@scl,w
  4616  0BFB  00F2               	movwf	___awmod@dividend
  4617  0BFC  01F3               	clrf	___awmod@dividend+1
  4618  0BFD  1BF2               	btfsc	___awmod@dividend,7
  4619  0BFE  03F3               	decf	___awmod@dividend+1,f
  4620  0BFF  300A               	movlw	10
  4621  0C00  00F0               	movwf	___awmod@divisor
  4622  0C01  3000               	movlw	0
  4623  0C02  00F1               	movwf	___awmod@divisor+1
  4624  0C03  160A  158A  269D  120A  158A  	fcall	___awmod
  4625  0C08  0870               	movf	?___awmod,w
  4626  0C09  120A  158A  2001  120A  158A  	fcall	___bmul
  4627  0C0E  3E50               	addlw	low (__powers_-__stringbase)
  4628  0C0F  0084               	movwf	4
  4629  0C10  160A  118A  2000  120A  158A  	fcall	stringdir
  4630  0C15  1283               	bcf	3,5	;RP0=0, select bank0
  4631  0C16  1303               	bcf	3,6	;RP1=0, select bank0
  4632  0C17  00B5               	movwf	___ftmul@f1
  4633  0C18  160A  118A  2000  120A  158A  	fcall	stringdir
  4634  0C1D  00B6               	movwf	___ftmul@f1+1
  4635  0C1E  160A  118A  2000  120A  158A  	fcall	stringdir
  4636  0C23  00B7               	movwf	___ftmul@f1+2
  4637  0C24  3003               	movlw	3
  4638  0C25  00C9               	movwf	??_scale+1
  4639  0C26  0849               	movf	??_scale+1,w
  4640  0C27  00A4               	movwf	___bmul@multiplicand
  4641  0C28  300A               	movlw	10
  4642  0C29  00F7               	movwf	___awdiv@divisor
  4643  0C2A  3000               	movlw	0
  4644  0C2B  00F8               	movwf	___awdiv@divisor+1
  4645  0C2C  084D               	movf	scale@scl,w
  4646  0C2D  00F9               	movwf	___awdiv@dividend
  4647  0C2E  01FA               	clrf	___awdiv@dividend+1
  4648  0C2F  1BF9               	btfsc	___awdiv@dividend,7
  4649  0C30  03FA               	decf	___awdiv@dividend+1,f
  4650  0C31  160A  158A  2745  120A  158A  	fcall	___awdiv
  4651  0C36  0877               	movf	?___awdiv,w
  4652  0C37  3E09               	addlw	9
  4653  0C38  120A  158A  2001  120A  158A  	fcall	___bmul
  4654  0C3D  3E50               	addlw	low (__powers_-__stringbase)
  4655  0C3E  0084               	movwf	4
  4656  0C3F  160A  118A  2000  120A  158A  	fcall	stringdir
  4657  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  4658  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  4659  0C46  00B8               	movwf	___ftmul@f2
  4660  0C47  160A  118A  2000  120A  158A  	fcall	stringdir
  4661  0C4C  00B9               	movwf	___ftmul@f2+1
  4662  0C4D  160A  118A  2000  120A  158A  	fcall	stringdir
  4663  0C52  00BA               	movwf	___ftmul@f2+2
  4664  0C53  160A  118A  24F2   	fcall	___ftmul
  4665  0C56  1283               	bcf	3,5	;RP0=0, select bank0
  4666  0C57  1303               	bcf	3,6	;RP1=0, select bank0
  4667  0C58  0835               	movf	?___ftmul,w
  4668  0C59  00C5               	movwf	?_scale
  4669  0C5A  0836               	movf	?___ftmul+1,w
  4670  0C5B  00C6               	movwf	?_scale+1
  4671  0C5C  0837               	movf	?___ftmul+2,w
  4672  0C5D  00C7               	movwf	?_scale+2
  4673  0C5E  0008               	return
  4674  0C5F                     l2500:	
  4675                           
  4676                           ;doprnt.c: 440: return _powers_[scl];
  4677  0C5F  3003               	movlw	3
  4678  0C60  00C8               	movwf	??_scale
  4679  0C61  0848               	movf	??_scale,w
  4680  0C62  00A4               	movwf	___bmul@multiplicand
  4681  0C63  084D               	movf	scale@scl,w
  4682  0C64  120A  158A  2001  120A  158A  	fcall	___bmul
  4683  0C69  3E50               	addlw	low (__powers_-__stringbase)
  4684  0C6A  0084               	movwf	4
  4685  0C6B  160A  118A  2000  120A  158A  	fcall	stringdir
  4686  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  4687  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  4688  0C72  00C5               	movwf	?_scale
  4689  0C73  160A  118A  2000  120A  158A  	fcall	stringdir
  4690  0C78  00C6               	movwf	?_scale+1
  4691  0C79  160A  118A  2000   	fcall	stringdir
  4692  0C7C  00C7               	movwf	?_scale+2
  4693  0C7D  0008               	return
  4694  0C7E                     __end_of_scale:	
  4695                           
  4696                           	psect	text3
  4697  1D93                     __ptext3:	
  4698 ;; *************** function _isdigit *****************
  4699 ;; Defined at:
  4700 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/common/isdigit.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  c               1    wreg     unsigned char 
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;  c               1    1[COMMON] unsigned char 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;		None               void
  4707 ;; Registers used:
  4708 ;;		wreg, status,2, status,0
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4714 ;;      Params:         0       0       0       0       0
  4715 ;;      Locals:         2       0       0       0       0
  4716 ;;      Temps:          0       0       0       0       0
  4717 ;;      Totals:         2       0       0       0       0
  4718 ;;Total ram usage:        2 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; This function calls:
  4721 ;;		Nothing
  4722 ;; This function is called by:
  4723 ;;		_sprintf
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           
  4728                           ;psect for function _isdigit
  4729  1D93                     _isdigit:	
  4730                           
  4731                           ;incstack = 0
  4732                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4733                           ;isdigit@c stored from wreg
  4734  1D93  00F1               	movwf	isdigit@c
  4735  1D94  01F0               	clrf	_isdigit$667
  4736  1D95  303A               	movlw	58
  4737  1D96  0271               	subwf	isdigit@c,w
  4738  1D97  1803               	skipnc
  4739  1D98  2D9F               	goto	l2512
  4740  1D99  3030               	movlw	48
  4741  1D9A  0271               	subwf	isdigit@c,w
  4742  1D9B  1C03               	skipc
  4743  1D9C  2D9F               	goto	l2512
  4744  1D9D  01F0               	clrf	_isdigit$667
  4745  1D9E  0AF0               	incf	_isdigit$667,f
  4746  1D9F                     l2512:	
  4747  1D9F  0C70               	rrf	_isdigit$667,w
  4748  1DA0  0008               	return
  4749  1DA1                     __end_of_isdigit:	
  4750                           
  4751                           	psect	text4
  4752  0843                     __ptext4:	
  4753 ;; *************** function _fround *****************
  4754 ;; Defined at:
  4755 ;;		line 409 in file "/opt/microchip/xc8/v1.33/sources/common/doprnt.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  prec            1    wreg     unsigned char 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  prec            1   52[BANK0 ] unsigned char 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  3   37[BANK0 ] unsigned char 
  4762 ;; Registers used:
  4763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4769 ;;      Params:         0       3       0       0       0
  4770 ;;      Locals:         0       7       0       0       0
  4771 ;;      Temps:          0       6       0       0       0
  4772 ;;      Totals:         0      16       0       0       0
  4773 ;;Total ram usage:       16 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    2
  4776 ;; This function calls:
  4777 ;;		___awdiv
  4778 ;;		___awmod
  4779 ;;		___bmul
  4780 ;;		___ftmul
  4781 ;; This function is called by:
  4782 ;;		_sprintf
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           
  4787                           ;psect for function _fround
  4788  0843                     _fround:	
  4789                           
  4790                           ;incstack = 0
  4791                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4792                           ;fround@prec stored from wreg
  4793  0843  1283               	bcf	3,5	;RP0=0, select bank0
  4794  0844  1303               	bcf	3,6	;RP1=0, select bank0
  4795  0845  00D4               	movwf	fround@prec
  4796                           
  4797                           ;doprnt.c: 413: if(prec>=110)
  4798  0846  306E               	movlw	110
  4799  0847  0254               	subwf	fround@prec,w
  4800  0848  1C03               	skipc
  4801  0849  2923               	goto	l2452
  4802                           
  4803                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4804  084A  3003               	movlw	3
  4805  084B  00C8               	movwf	??_fround
  4806  084C  0848               	movf	??_fround,w
  4807  084D  00A4               	movwf	___bmul@multiplicand
  4808  084E  300A               	movlw	10
  4809  084F  00F7               	movwf	___awdiv@divisor
  4810  0850  3000               	movlw	0
  4811  0851  00F8               	movwf	___awdiv@divisor+1
  4812  0852  0854               	movf	fround@prec,w
  4813  0853  00C9               	movwf	??_fround+1
  4814  0854  01CA               	clrf	??_fround+2
  4815  0855  0849               	movf	??_fround+1,w
  4816  0856  00F2               	movwf	___awmod@dividend
  4817  0857  084A               	movf	??_fround+2,w
  4818  0858  00F3               	movwf	___awmod@dividend+1
  4819  0859  3064               	movlw	100
  4820  085A  00F0               	movwf	___awmod@divisor
  4821  085B  3000               	movlw	0
  4822  085C  00F1               	movwf	___awmod@divisor+1
  4823  085D  160A  158A  269D  120A  158A  	fcall	___awmod
  4824  0862  0871               	movf	?___awmod+1,w
  4825  0863  01FA               	clrf	___awdiv@dividend+1
  4826  0864  07FA               	addwf	___awdiv@dividend+1,f
  4827  0865  0870               	movf	?___awmod,w
  4828  0866  01F9               	clrf	___awdiv@dividend
  4829  0867  07F9               	addwf	___awdiv@dividend,f
  4830  0868  160A  158A  2745  120A  158A  	fcall	___awdiv
  4831  086D  0877               	movf	?___awdiv,w
  4832  086E  3E09               	addlw	9
  4833  086F  120A  158A  2001  120A  158A  	fcall	___bmul
  4834  0874  3E29               	addlw	low (__npowers_-__stringbase)
  4835  0875  0084               	movwf	4
  4836  0876  160A  118A  2000  120A  158A  	fcall	stringdir
  4837  087B  1283               	bcf	3,5	;RP0=0, select bank0
  4838  087C  1303               	bcf	3,6	;RP1=0, select bank0
  4839  087D  00B5               	movwf	___ftmul@f1
  4840  087E  160A  118A  2000  120A  158A  	fcall	stringdir
  4841  0883  00B6               	movwf	___ftmul@f1+1
  4842  0884  160A  118A  2000  120A  158A  	fcall	stringdir
  4843  0889  00B7               	movwf	___ftmul@f1+2
  4844  088A  3003               	movlw	3
  4845  088B  00CB               	movwf	??_fround+3
  4846  088C  084B               	movf	??_fround+3,w
  4847  088D  00A4               	movwf	___bmul@multiplicand
  4848  088E  3064               	movlw	100
  4849  088F  00F7               	movwf	___awdiv@divisor
  4850  0890  3000               	movlw	0
  4851  0891  00F8               	movwf	___awdiv@divisor+1
  4852  0892  0854               	movf	fround@prec,w
  4853  0893  00CC               	movwf	??_fround+4
  4854  0894  01CD               	clrf	??_fround+5
  4855  0895  084C               	movf	??_fround+4,w
  4856  0896  00F9               	movwf	___awdiv@dividend
  4857  0897  084D               	movf	??_fround+5,w
  4858  0898  00FA               	movwf	___awdiv@dividend+1
  4859  0899  160A  158A  2745  120A  158A  	fcall	___awdiv
  4860  089E  0877               	movf	?___awdiv,w
  4861  089F  3E12               	addlw	18
  4862  08A0  120A  158A  2001  120A  158A  	fcall	___bmul
  4863  08A5  3E29               	addlw	low (__npowers_-__stringbase)
  4864  08A6  0084               	movwf	4
  4865  08A7  160A  118A  2000  120A  158A  	fcall	stringdir
  4866  08AC  1283               	bcf	3,5	;RP0=0, select bank0
  4867  08AD  1303               	bcf	3,6	;RP1=0, select bank0
  4868  08AE  00B8               	movwf	___ftmul@f2
  4869  08AF  160A  118A  2000  120A  158A  	fcall	stringdir
  4870  08B4  00B9               	movwf	___ftmul@f2+1
  4871  08B5  160A  118A  2000  120A  158A  	fcall	stringdir
  4872  08BA  00BA               	movwf	___ftmul@f2+2
  4873  08BB  160A  118A  24F2  120A  158A  	fcall	___ftmul
  4874  08C0  1283               	bcf	3,5	;RP0=0, select bank0
  4875  08C1  1303               	bcf	3,6	;RP1=0, select bank0
  4876  08C2  0835               	movf	?___ftmul,w
  4877  08C3  00D1               	movwf	_fround$877
  4878  08C4  0836               	movf	?___ftmul+1,w
  4879  08C5  00D2               	movwf	_fround$877+1
  4880  08C6  0837               	movf	?___ftmul+2,w
  4881  08C7  00D3               	movwf	_fround$877+2
  4882                           
  4883                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4884  08C8  3003               	movlw	3
  4885  08C9  00C8               	movwf	??_fround
  4886  08CA  0848               	movf	??_fround,w
  4887  08CB  00A4               	movwf	___bmul@multiplicand
  4888  08CC  0854               	movf	fround@prec,w
  4889  08CD  00C9               	movwf	??_fround+1
  4890  08CE  01CA               	clrf	??_fround+2
  4891  08CF  0849               	movf	??_fround+1,w
  4892  08D0  00F2               	movwf	___awmod@dividend
  4893  08D1  084A               	movf	??_fround+2,w
  4894  08D2  00F3               	movwf	___awmod@dividend+1
  4895  08D3  300A               	movlw	10
  4896  08D4  00F0               	movwf	___awmod@divisor
  4897  08D5  3000               	movlw	0
  4898  08D6  00F1               	movwf	___awmod@divisor+1
  4899  08D7  160A  158A  269D  120A  158A  	fcall	___awmod
  4900  08DC  0870               	movf	?___awmod,w
  4901  08DD  120A  158A  2001  120A  158A  	fcall	___bmul
  4902  08E2  3E29               	addlw	low (__npowers_-__stringbase)
  4903  08E3  0084               	movwf	4
  4904  08E4  160A  118A  2000  120A  158A  	fcall	stringdir
  4905  08E9  1283               	bcf	3,5	;RP0=0, select bank0
  4906  08EA  1303               	bcf	3,6	;RP1=0, select bank0
  4907  08EB  00B5               	movwf	___ftmul@f1
  4908  08EC  160A  118A  2000  120A  158A  	fcall	stringdir
  4909  08F1  00B6               	movwf	___ftmul@f1+1
  4910  08F2  160A  118A  2000  120A  158A  	fcall	stringdir
  4911  08F7  00B7               	movwf	___ftmul@f1+2
  4912  08F8  0851               	movf	_fround$877,w
  4913  08F9  00B8               	movwf	___ftmul@f2
  4914  08FA  0852               	movf	_fround$877+1,w
  4915  08FB  00B9               	movwf	___ftmul@f2+1
  4916  08FC  0853               	movf	_fround$877+2,w
  4917  08FD  00BA               	movwf	___ftmul@f2+2
  4918  08FE  160A  118A  24F2  120A  158A  	fcall	___ftmul
  4919  0903  1283               	bcf	3,5	;RP0=0, select bank0
  4920  0904  1303               	bcf	3,6	;RP1=0, select bank0
  4921  0905  0835               	movf	?___ftmul,w
  4922  0906  00CE               	movwf	_fround$878
  4923  0907  0836               	movf	?___ftmul+1,w
  4924  0908  00CF               	movwf	_fround$878+1
  4925  0909  0837               	movf	?___ftmul+2,w
  4926  090A  00D0               	movwf	_fround$878+2
  4927                           
  4928                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4929  090B  3000               	movlw	0
  4930  090C  00B5               	movwf	___ftmul@f1
  4931  090D  3000               	movlw	0
  4932  090E  00B6               	movwf	___ftmul@f1+1
  4933  090F  303F               	movlw	63
  4934  0910  00B7               	movwf	___ftmul@f1+2
  4935  0911  084E               	movf	_fround$878,w
  4936  0912  00B8               	movwf	___ftmul@f2
  4937  0913  084F               	movf	_fround$878+1,w
  4938  0914  00B9               	movwf	___ftmul@f2+1
  4939  0915  0850               	movf	_fround$878+2,w
  4940  0916  00BA               	movwf	___ftmul@f2+2
  4941  0917  160A  118A  24F2   	fcall	___ftmul
  4942  091A  1283               	bcf	3,5	;RP0=0, select bank0
  4943  091B  1303               	bcf	3,6	;RP1=0, select bank0
  4944  091C  0835               	movf	?___ftmul,w
  4945  091D  00C5               	movwf	?_fround
  4946  091E  0836               	movf	?___ftmul+1,w
  4947  091F  00C6               	movwf	?_fround+1
  4948  0920  0837               	movf	?___ftmul+2,w
  4949  0921  00C7               	movwf	?_fround+2
  4950  0922  0008               	return
  4951  0923                     l2452:	
  4952                           
  4953                           ;doprnt.c: 415: else if(prec > 10)
  4954  0923  300B               	movlw	11
  4955  0924  0254               	subwf	fround@prec,w
  4956  0925  1C03               	skipc
  4957  0926  29AD               	goto	l2460
  4958                           
  4959                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4960  0927  3003               	movlw	3
  4961  0928  00C8               	movwf	??_fround
  4962  0929  0848               	movf	??_fround,w
  4963  092A  00A4               	movwf	___bmul@multiplicand
  4964  092B  0854               	movf	fround@prec,w
  4965  092C  00C9               	movwf	??_fround+1
  4966  092D  01CA               	clrf	??_fround+2
  4967  092E  0849               	movf	??_fround+1,w
  4968  092F  00F2               	movwf	___awmod@dividend
  4969  0930  084A               	movf	??_fround+2,w
  4970  0931  00F3               	movwf	___awmod@dividend+1
  4971  0932  300A               	movlw	10
  4972  0933  00F0               	movwf	___awmod@divisor
  4973  0934  3000               	movlw	0
  4974  0935  00F1               	movwf	___awmod@divisor+1
  4975  0936  160A  158A  269D  120A  158A  	fcall	___awmod
  4976  093B  0870               	movf	?___awmod,w
  4977  093C  120A  158A  2001  120A  158A  	fcall	___bmul
  4978  0941  3E29               	addlw	low (__npowers_-__stringbase)
  4979  0942  0084               	movwf	4
  4980  0943  160A  118A  2000  120A  158A  	fcall	stringdir
  4981  0948  1283               	bcf	3,5	;RP0=0, select bank0
  4982  0949  1303               	bcf	3,6	;RP1=0, select bank0
  4983  094A  00B5               	movwf	___ftmul@f1
  4984  094B  160A  118A  2000  120A  158A  	fcall	stringdir
  4985  0950  00B6               	movwf	___ftmul@f1+1
  4986  0951  160A  118A  2000  120A  158A  	fcall	stringdir
  4987  0956  00B7               	movwf	___ftmul@f1+2
  4988  0957  3003               	movlw	3
  4989  0958  00CB               	movwf	??_fround+3
  4990  0959  084B               	movf	??_fround+3,w
  4991  095A  00A4               	movwf	___bmul@multiplicand
  4992  095B  300A               	movlw	10
  4993  095C  00F7               	movwf	___awdiv@divisor
  4994  095D  3000               	movlw	0
  4995  095E  00F8               	movwf	___awdiv@divisor+1
  4996  095F  0854               	movf	fround@prec,w
  4997  0960  00CC               	movwf	??_fround+4
  4998  0961  01CD               	clrf	??_fround+5
  4999  0962  084C               	movf	??_fround+4,w
  5000  0963  00F9               	movwf	___awdiv@dividend
  5001  0964  084D               	movf	??_fround+5,w
  5002  0965  00FA               	movwf	___awdiv@dividend+1
  5003  0966  160A  158A  2745  120A  158A  	fcall	___awdiv
  5004  096B  0877               	movf	?___awdiv,w
  5005  096C  3E09               	addlw	9
  5006  096D  120A  158A  2001  120A  158A  	fcall	___bmul
  5007  0972  3E29               	addlw	low (__npowers_-__stringbase)
  5008  0973  0084               	movwf	4
  5009  0974  160A  118A  2000  120A  158A  	fcall	stringdir
  5010  0979  1283               	bcf	3,5	;RP0=0, select bank0
  5011  097A  1303               	bcf	3,6	;RP1=0, select bank0
  5012  097B  00B8               	movwf	___ftmul@f2
  5013  097C  160A  118A  2000  120A  158A  	fcall	stringdir
  5014  0981  00B9               	movwf	___ftmul@f2+1
  5015  0982  160A  118A  2000  120A  158A  	fcall	stringdir
  5016  0987  00BA               	movwf	___ftmul@f2+2
  5017  0988  160A  118A  24F2  120A  158A  	fcall	___ftmul
  5018  098D  1283               	bcf	3,5	;RP0=0, select bank0
  5019  098E  1303               	bcf	3,6	;RP1=0, select bank0
  5020  098F  0835               	movf	?___ftmul,w
  5021  0990  00D1               	movwf	_fround$877
  5022  0991  0836               	movf	?___ftmul+1,w
  5023  0992  00D2               	movwf	_fround$877+1
  5024  0993  0837               	movf	?___ftmul+2,w
  5025  0994  00D3               	movwf	_fround$877+2
  5026                           
  5027                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5028  0995  3000               	movlw	0
  5029  0996  00B5               	movwf	___ftmul@f1
  5030  0997  3000               	movlw	0
  5031  0998  00B6               	movwf	___ftmul@f1+1
  5032  0999  303F               	movlw	63
  5033  099A  00B7               	movwf	___ftmul@f1+2
  5034  099B  0851               	movf	_fround$877,w
  5035  099C  00B8               	movwf	___ftmul@f2
  5036  099D  0852               	movf	_fround$877+1,w
  5037  099E  00B9               	movwf	___ftmul@f2+1
  5038  099F  0853               	movf	_fround$877+2,w
  5039  09A0  00BA               	movwf	___ftmul@f2+2
  5040  09A1  160A  118A  24F2   	fcall	___ftmul
  5041  09A4  1283               	bcf	3,5	;RP0=0, select bank0
  5042  09A5  1303               	bcf	3,6	;RP1=0, select bank0
  5043  09A6  0835               	movf	?___ftmul,w
  5044  09A7  00C5               	movwf	?_fround
  5045  09A8  0836               	movf	?___ftmul+1,w
  5046  09A9  00C6               	movwf	?_fround+1
  5047  09AA  0837               	movf	?___ftmul+2,w
  5048  09AB  00C7               	movwf	?_fround+2
  5049  09AC  0008               	return
  5050  09AD                     l2460:	
  5051                           
  5052                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5053  09AD  3000               	movlw	0
  5054  09AE  00B5               	movwf	___ftmul@f1
  5055  09AF  3000               	movlw	0
  5056  09B0  00B6               	movwf	___ftmul@f1+1
  5057  09B1  303F               	movlw	63
  5058  09B2  00B7               	movwf	___ftmul@f1+2
  5059  09B3  3003               	movlw	3
  5060  09B4  00C8               	movwf	??_fround
  5061  09B5  0848               	movf	??_fround,w
  5062  09B6  00A4               	movwf	___bmul@multiplicand
  5063  09B7  0854               	movf	fround@prec,w
  5064  09B8  120A  158A  2001  120A  158A  	fcall	___bmul
  5065  09BD  3E29               	addlw	low (__npowers_-__stringbase)
  5066  09BE  0084               	movwf	4
  5067  09BF  160A  118A  2000  120A  158A  	fcall	stringdir
  5068  09C4  1283               	bcf	3,5	;RP0=0, select bank0
  5069  09C5  1303               	bcf	3,6	;RP1=0, select bank0
  5070  09C6  00B8               	movwf	___ftmul@f2
  5071  09C7  160A  118A  2000  120A  158A  	fcall	stringdir
  5072  09CC  00B9               	movwf	___ftmul@f2+1
  5073  09CD  160A  118A  2000  120A  158A  	fcall	stringdir
  5074  09D2  00BA               	movwf	___ftmul@f2+2
  5075  09D3  160A  118A  24F2   	fcall	___ftmul
  5076  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  5077  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  5078  09D8  0835               	movf	?___ftmul,w
  5079  09D9  00C5               	movwf	?_fround
  5080  09DA  0836               	movf	?___ftmul+1,w
  5081  09DB  00C6               	movwf	?_fround+1
  5082  09DC  0837               	movf	?___ftmul+2,w
  5083  09DD  00C7               	movwf	?_fround+2
  5084  09DE  0008               	return
  5085  09DF                     __end_of_fround:	
  5086                           
  5087                           	psect	text5
  5088  14F2                     __ptext5:	
  5089 ;; *************** function ___ftmul *****************
  5090 ;; Defined at:
  5091 ;;		line 62 in file "/opt/microchip/xc8/v1.33/sources/common/ftmul.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  f1              3   21[BANK0 ] float 
  5094 ;;  f2              3   24[BANK0 ] float 
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;  f3_as_produc    3   32[BANK0 ] unsigned um
  5097 ;;  sign            1   36[BANK0 ] unsigned char 
  5098 ;;  cntr            1   35[BANK0 ] unsigned char 
  5099 ;;  exp             1   31[BANK0 ] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  3   21[BANK0 ] float 
  5102 ;; Registers used:
  5103 ;;		wreg, status,2, status,0, pclath, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5109 ;;      Params:         0       6       0       0       0
  5110 ;;      Locals:         0       6       0       0       0
  5111 ;;      Temps:          0       4       0       0       0
  5112 ;;      Totals:         0      16       0       0       0
  5113 ;;Total ram usage:       16 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    1
  5116 ;; This function calls:
  5117 ;;		___ftpack
  5118 ;; This function is called by:
  5119 ;;		_main
  5120 ;;		_fround
  5121 ;;		_scale
  5122 ;;		_sprintf
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           
  5127                           ;psect for function ___ftmul
  5128  14F2                     ___ftmul:	
  5129                           
  5130                           ;incstack = 0
  5131                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5132  14F2  1283               	bcf	3,5	;RP0=0, select bank0
  5133  14F3  1303               	bcf	3,6	;RP1=0, select bank0
  5134  14F4  0835               	movf	___ftmul@f1,w
  5135  14F5  00BB               	movwf	??___ftmul
  5136  14F6  0836               	movf	___ftmul@f1+1,w
  5137  14F7  00BC               	movwf	??___ftmul+1
  5138  14F8  0837               	movf	___ftmul@f1+2,w
  5139  14F9  00BD               	movwf	??___ftmul+2
  5140  14FA  1003               	clrc
  5141  14FB  0D3C               	rlf	??___ftmul+1,w
  5142  14FC  0D3D               	rlf	??___ftmul+2,w
  5143  14FD  00BE               	movwf	??___ftmul+3
  5144  14FE  083E               	movf	??___ftmul+3,w
  5145  14FF  00BF               	movwf	___ftmul@exp
  5146  1500  08BF               	movf	___ftmul@exp,f
  5147  1501  1D03               	skipz
  5148  1502  2D0A               	goto	l2372
  5149  1503  3000               	movlw	0
  5150  1504  00B5               	movwf	?___ftmul
  5151  1505  3000               	movlw	0
  5152  1506  00B6               	movwf	?___ftmul+1
  5153  1507  3000               	movlw	0
  5154  1508  00B7               	movwf	?___ftmul+2
  5155  1509  0008               	return
  5156  150A                     l2372:	
  5157  150A  0838               	movf	___ftmul@f2,w
  5158  150B  00BB               	movwf	??___ftmul
  5159  150C  0839               	movf	___ftmul@f2+1,w
  5160  150D  00BC               	movwf	??___ftmul+1
  5161  150E  083A               	movf	___ftmul@f2+2,w
  5162  150F  00BD               	movwf	??___ftmul+2
  5163  1510  1003               	clrc
  5164  1511  0D3C               	rlf	??___ftmul+1,w
  5165  1512  0D3D               	rlf	??___ftmul+2,w
  5166  1513  00BE               	movwf	??___ftmul+3
  5167  1514  083E               	movf	??___ftmul+3,w
  5168  1515  00C4               	movwf	___ftmul@sign
  5169  1516  08C4               	movf	___ftmul@sign,f
  5170  1517  1D03               	skipz
  5171  1518  2D20               	goto	l2378
  5172  1519  3000               	movlw	0
  5173  151A  00B5               	movwf	?___ftmul
  5174  151B  3000               	movlw	0
  5175  151C  00B6               	movwf	?___ftmul+1
  5176  151D  3000               	movlw	0
  5177  151E  00B7               	movwf	?___ftmul+2
  5178  151F  0008               	return
  5179  1520                     l2378:	
  5180  1520  0844               	movf	___ftmul@sign,w
  5181  1521  3E7B               	addlw	123
  5182  1522  00BB               	movwf	??___ftmul
  5183  1523  083B               	movf	??___ftmul,w
  5184  1524  07BF               	addwf	___ftmul@exp,f
  5185  1525  0835               	movf	___ftmul@f1,w
  5186  1526  00BB               	movwf	??___ftmul
  5187  1527  0836               	movf	___ftmul@f1+1,w
  5188  1528  00BC               	movwf	??___ftmul+1
  5189  1529  0837               	movf	___ftmul@f1+2,w
  5190  152A  00BD               	movwf	??___ftmul+2
  5191  152B  3010               	movlw	16
  5192  152C                     u3125:	
  5193  152C  1003               	clrc
  5194  152D  0CBD               	rrf	??___ftmul+2,f
  5195  152E  0CBC               	rrf	??___ftmul+1,f
  5196  152F  0CBB               	rrf	??___ftmul,f
  5197  1530  3EFF               	addlw	-1
  5198  1531  1D03               	skipz
  5199  1532  2D2C               	goto	u3125
  5200  1533  083B               	movf	??___ftmul,w
  5201  1534  00BE               	movwf	??___ftmul+3
  5202  1535  083E               	movf	??___ftmul+3,w
  5203  1536  00C4               	movwf	___ftmul@sign
  5204  1537  0838               	movf	___ftmul@f2,w
  5205  1538  00BB               	movwf	??___ftmul
  5206  1539  0839               	movf	___ftmul@f2+1,w
  5207  153A  00BC               	movwf	??___ftmul+1
  5208  153B  083A               	movf	___ftmul@f2+2,w
  5209  153C  00BD               	movwf	??___ftmul+2
  5210  153D  3010               	movlw	16
  5211  153E                     u3135:	
  5212  153E  1003               	clrc
  5213  153F  0CBD               	rrf	??___ftmul+2,f
  5214  1540  0CBC               	rrf	??___ftmul+1,f
  5215  1541  0CBB               	rrf	??___ftmul,f
  5216  1542  3EFF               	addlw	-1
  5217  1543  1D03               	skipz
  5218  1544  2D3E               	goto	u3135
  5219  1545  083B               	movf	??___ftmul,w
  5220  1546  00BE               	movwf	??___ftmul+3
  5221  1547  083E               	movf	??___ftmul+3,w
  5222  1548  06C4               	xorwf	___ftmul@sign,f
  5223  1549  3080               	movlw	128
  5224  154A  00BB               	movwf	??___ftmul
  5225  154B  083B               	movf	??___ftmul,w
  5226  154C  05C4               	andwf	___ftmul@sign,f
  5227  154D  17B6               	bsf	___ftmul@f1+1,7
  5228  154E  17B9               	bsf	___ftmul@f2+1,7
  5229  154F  30FF               	movlw	255
  5230  1550  05B8               	andwf	___ftmul@f2,f
  5231  1551  30FF               	movlw	255
  5232  1552  05B9               	andwf	___ftmul@f2+1,f
  5233  1553  3000               	movlw	0
  5234  1554  05BA               	andwf	___ftmul@f2+2,f
  5235  1555  3000               	movlw	0
  5236  1556  00C0               	movwf	___ftmul@f3_as_product
  5237  1557  3000               	movlw	0
  5238  1558  00C1               	movwf	___ftmul@f3_as_product+1
  5239  1559  3000               	movlw	0
  5240  155A  00C2               	movwf	___ftmul@f3_as_product+2
  5241  155B  3007               	movlw	7
  5242  155C  00BB               	movwf	??___ftmul
  5243  155D  083B               	movf	??___ftmul,w
  5244  155E  00C3               	movwf	___ftmul@cntr
  5245  155F                     l2390:	
  5246  155F  1C35               	btfss	___ftmul@f1,0
  5247  1560  2D6F               	goto	l2394
  5248  1561  0838               	movf	___ftmul@f2,w
  5249  1562  07C0               	addwf	___ftmul@f3_as_product,f
  5250  1563  0839               	movf	___ftmul@f2+1,w
  5251  1564  1103               	clrz
  5252  1565  1803               	skipnc
  5253  1566  0A39               	incf	___ftmul@f2+1,w
  5254  1567  1D03               	btfss	3,2
  5255  1568  07C1               	addwf	___ftmul@f3_as_product+1,f
  5256  1569  083A               	movf	___ftmul@f2+2,w
  5257  156A  1103               	clrz
  5258  156B  1803               	skipnc
  5259  156C  0A3A               	incf	___ftmul@f2+2,w
  5260  156D  1D03               	btfss	3,2
  5261  156E  07C2               	addwf	___ftmul@f3_as_product+2,f
  5262  156F                     l2394:	
  5263  156F  3001               	movlw	1
  5264  1570                     u3165:	
  5265  1570  1003               	clrc
  5266  1571  0CB7               	rrf	___ftmul@f1+2,f
  5267  1572  0CB6               	rrf	___ftmul@f1+1,f
  5268  1573  0CB5               	rrf	___ftmul@f1,f
  5269  1574  3EFF               	addlw	-1
  5270  1575  1D03               	skipz
  5271  1576  2D70               	goto	u3165
  5272  1577  3001               	movlw	1
  5273  1578                     u3175:	
  5274  1578  1003               	clrc
  5275  1579  0DB8               	rlf	___ftmul@f2,f
  5276  157A  0DB9               	rlf	___ftmul@f2+1,f
  5277  157B  0DBA               	rlf	___ftmul@f2+2,f
  5278  157C  3EFF               	addlw	-1
  5279  157D  1D03               	skipz
  5280  157E  2D78               	goto	u3175
  5281  157F  3001               	movlw	1
  5282  1580  02C3               	subwf	___ftmul@cntr,f
  5283  1581  1D03               	btfss	3,2
  5284  1582  2D5F               	goto	l2390
  5285  1583  3009               	movlw	9
  5286  1584  00BB               	movwf	??___ftmul
  5287  1585  083B               	movf	??___ftmul,w
  5288  1586  00C3               	movwf	___ftmul@cntr
  5289  1587                     l2402:	
  5290  1587  1C35               	btfss	___ftmul@f1,0
  5291  1588  2D97               	goto	l2406
  5292  1589  0838               	movf	___ftmul@f2,w
  5293  158A  07C0               	addwf	___ftmul@f3_as_product,f
  5294  158B  0839               	movf	___ftmul@f2+1,w
  5295  158C  1103               	clrz
  5296  158D  1803               	skipnc
  5297  158E  0A39               	incf	___ftmul@f2+1,w
  5298  158F  1D03               	btfss	3,2
  5299  1590  07C1               	addwf	___ftmul@f3_as_product+1,f
  5300  1591  083A               	movf	___ftmul@f2+2,w
  5301  1592  1103               	clrz
  5302  1593  1803               	skipnc
  5303  1594  0A3A               	incf	___ftmul@f2+2,w
  5304  1595  1D03               	btfss	3,2
  5305  1596  07C2               	addwf	___ftmul@f3_as_product+2,f
  5306  1597                     l2406:	
  5307  1597  3001               	movlw	1
  5308  1598                     u3215:	
  5309  1598  1003               	clrc
  5310  1599  0CB7               	rrf	___ftmul@f1+2,f
  5311  159A  0CB6               	rrf	___ftmul@f1+1,f
  5312  159B  0CB5               	rrf	___ftmul@f1,f
  5313  159C  3EFF               	addlw	-1
  5314  159D  1D03               	skipz
  5315  159E  2D98               	goto	u3215
  5316  159F  3001               	movlw	1
  5317  15A0                     u3225:	
  5318  15A0  1003               	clrc
  5319  15A1  0CC2               	rrf	___ftmul@f3_as_product+2,f
  5320  15A2  0CC1               	rrf	___ftmul@f3_as_product+1,f
  5321  15A3  0CC0               	rrf	___ftmul@f3_as_product,f
  5322  15A4  3EFF               	addlw	-1
  5323  15A5  1D03               	skipz
  5324  15A6  2DA0               	goto	u3225
  5325  15A7  3001               	movlw	1
  5326  15A8  02C3               	subwf	___ftmul@cntr,f
  5327  15A9  1D03               	btfss	3,2
  5328  15AA  2D87               	goto	l2402
  5329  15AB  0840               	movf	___ftmul@f3_as_product,w
  5330  15AC  00F0               	movwf	___ftpack@arg
  5331  15AD  0841               	movf	___ftmul@f3_as_product+1,w
  5332  15AE  00F1               	movwf	___ftpack@arg+1
  5333  15AF  0842               	movf	___ftmul@f3_as_product+2,w
  5334  15B0  00F2               	movwf	___ftpack@arg+2
  5335  15B1  083F               	movf	___ftmul@exp,w
  5336  15B2  00BB               	movwf	??___ftmul
  5337  15B3  083B               	movf	??___ftmul,w
  5338  15B4  00F3               	movwf	___ftpack@exp
  5339  15B5  0844               	movf	___ftmul@sign,w
  5340  15B6  00BC               	movwf	??___ftmul+1
  5341  15B7  083C               	movf	??___ftmul+1,w
  5342  15B8  00F4               	movwf	___ftpack@sign
  5343  15B9  160A  118A  2170   	fcall	___ftpack
  5344  15BC  0870               	movf	?___ftpack,w
  5345  15BD  1283               	bcf	3,5	;RP0=0, select bank0
  5346  15BE  1303               	bcf	3,6	;RP1=0, select bank0
  5347  15BF  00B5               	movwf	?___ftmul
  5348  15C0  0871               	movf	?___ftpack+1,w
  5349  15C1  00B6               	movwf	?___ftmul+1
  5350  15C2  0872               	movf	?___ftpack+2,w
  5351  15C3  00B7               	movwf	?___ftmul+2
  5352  15C4  0008               	return
  5353  15C5                     __end_of___ftmul:	
  5354                           
  5355                           	psect	text6
  5356  0801                     __ptext6:	
  5357 ;; *************** function ___bmul *****************
  5358 ;; Defined at:
  5359 ;;		line 4 in file "/opt/microchip/xc8/v1.33/sources/common/Umul8.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  multiplier      1    wreg     unsigned char 
  5362 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  multiplier      1    6[BANK0 ] unsigned char 
  5365 ;;  product         1    5[BANK0 ] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1    wreg      unsigned char 
  5368 ;; Registers used:
  5369 ;;		wreg, status,2, status,0
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5375 ;;      Params:         0       1       0       0       0
  5376 ;;      Locals:         0       2       0       0       0
  5377 ;;      Temps:          1       0       0       0       0
  5378 ;;      Totals:         1       3       0       0       0
  5379 ;;Total ram usage:        4 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; This function calls:
  5382 ;;		Nothing
  5383 ;; This function is called by:
  5384 ;;		_main
  5385 ;;		_fround
  5386 ;;		_scale
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function ___bmul
  5392  0801                     ___bmul:	
  5393                           
  5394                           ;incstack = 0
  5395                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5396                           ;___bmul@multiplier stored from wreg
  5397  0801  1283               	bcf	3,5	;RP0=0, select bank0
  5398  0802  1303               	bcf	3,6	;RP1=0, select bank0
  5399  0803  00A6               	movwf	___bmul@multiplier
  5400  0804  01A5               	clrf	___bmul@product
  5401  0805                     l2198:	
  5402  0805  1C26               	btfss	___bmul@multiplier,0
  5403  0806  280B               	goto	l2202
  5404  0807  0824               	movf	___bmul@multiplicand,w
  5405  0808  00FC               	movwf	??___bmul
  5406  0809  087C               	movf	??___bmul,w
  5407  080A  07A5               	addwf	___bmul@product,f
  5408  080B                     l2202:	
  5409  080B  1003               	clrc
  5410  080C  0DA4               	rlf	___bmul@multiplicand,f
  5411  080D  1003               	clrc
  5412  080E  0CA6               	rrf	___bmul@multiplier,f
  5413  080F  08A6               	movf	___bmul@multiplier,f
  5414  0810  1D03               	skipz
  5415  0811  2805               	goto	l2198
  5416  0812  0825               	movf	___bmul@product,w
  5417  0813  0008               	return
  5418  0814                     __end_of___bmul:	
  5419                           
  5420                           	psect	text7
  5421  1E9D                     __ptext7:	
  5422 ;; *************** function ___awmod *****************
  5423 ;; Defined at:
  5424 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/awmod.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  divisor         2    0[COMMON] int 
  5427 ;;  dividend        2    2[COMMON] int 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;  sign            1    6[COMMON] unsigned char 
  5430 ;;  counter         1    5[COMMON] unsigned char 
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  2    0[COMMON] int 
  5433 ;; Registers used:
  5434 ;;		wreg, status,2, status,0
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5440 ;;      Params:         4       0       0       0       0
  5441 ;;      Locals:         2       0       0       0       0
  5442 ;;      Temps:          1       0       0       0       0
  5443 ;;      Totals:         7       0       0       0       0
  5444 ;;Total ram usage:        7 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_fround
  5450 ;;		_scale
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           
  5455                           ;psect for function ___awmod
  5456  1E9D                     ___awmod:	
  5457                           
  5458                           ;incstack = 0
  5459                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5460  1E9D  01F6               	clrf	___awmod@sign
  5461  1E9E  1FF3               	btfss	___awmod@dividend+1,7
  5462  1E9F  2EA7               	goto	l2264
  5463  1EA0  09F2               	comf	___awmod@dividend,f
  5464  1EA1  09F3               	comf	___awmod@dividend+1,f
  5465  1EA2  0AF2               	incf	___awmod@dividend,f
  5466  1EA3  1903               	skipnz
  5467  1EA4  0AF3               	incf	___awmod@dividend+1,f
  5468  1EA5  01F6               	clrf	___awmod@sign
  5469  1EA6  0AF6               	incf	___awmod@sign,f
  5470  1EA7                     l2264:	
  5471  1EA7  1FF1               	btfss	___awmod@divisor+1,7
  5472  1EA8  2EAE               	goto	l2268
  5473  1EA9  09F0               	comf	___awmod@divisor,f
  5474  1EAA  09F1               	comf	___awmod@divisor+1,f
  5475  1EAB  0AF0               	incf	___awmod@divisor,f
  5476  1EAC  1903               	skipnz
  5477  1EAD  0AF1               	incf	___awmod@divisor+1,f
  5478  1EAE                     l2268:	
  5479  1EAE  0871               	movf	___awmod@divisor+1,w
  5480  1EAF  0470               	iorwf	___awmod@divisor,w
  5481  1EB0  1903               	skipnz
  5482  1EB1  2EDB               	goto	l2286
  5483  1EB2  01F5               	clrf	___awmod@counter
  5484  1EB3  0AF5               	incf	___awmod@counter,f
  5485  1EB4                     l2276:	
  5486  1EB4  1BF1               	btfsc	___awmod@divisor+1,7
  5487  1EB5  2EC2               	goto	l2278
  5488  1EB6  3001               	movlw	1
  5489  1EB7                     u2805:	
  5490  1EB7  1003               	clrc
  5491  1EB8  0DF0               	rlf	___awmod@divisor,f
  5492  1EB9  0DF1               	rlf	___awmod@divisor+1,f
  5493  1EBA  3EFF               	addlw	-1
  5494  1EBB  1D03               	skipz
  5495  1EBC  2EB7               	goto	u2805
  5496  1EBD  3001               	movlw	1
  5497  1EBE  00F4               	movwf	??___awmod
  5498  1EBF  0874               	movf	??___awmod,w
  5499  1EC0  07F5               	addwf	___awmod@counter,f
  5500  1EC1  2EB4               	goto	l2276
  5501  1EC2                     l2278:	
  5502  1EC2  0871               	movf	___awmod@divisor+1,w
  5503  1EC3  0273               	subwf	___awmod@dividend+1,w
  5504  1EC4  1D03               	skipz
  5505  1EC5  2EC8               	goto	u2825
  5506  1EC6  0870               	movf	___awmod@divisor,w
  5507  1EC7  0272               	subwf	___awmod@dividend,w
  5508  1EC8                     u2825:	
  5509  1EC8  1C03               	skipc
  5510  1EC9  2ED0               	goto	l2282
  5511  1ECA  0870               	movf	___awmod@divisor,w
  5512  1ECB  02F2               	subwf	___awmod@dividend,f
  5513  1ECC  0871               	movf	___awmod@divisor+1,w
  5514  1ECD  1C03               	skipc
  5515  1ECE  03F3               	decf	___awmod@dividend+1,f
  5516  1ECF  02F3               	subwf	___awmod@dividend+1,f
  5517  1ED0                     l2282:	
  5518  1ED0  3001               	movlw	1
  5519  1ED1                     u2835:	
  5520  1ED1  1003               	clrc
  5521  1ED2  0CF1               	rrf	___awmod@divisor+1,f
  5522  1ED3  0CF0               	rrf	___awmod@divisor,f
  5523  1ED4  3EFF               	addlw	-1
  5524  1ED5  1D03               	skipz
  5525  1ED6  2ED1               	goto	u2835
  5526  1ED7  3001               	movlw	1
  5527  1ED8  02F5               	subwf	___awmod@counter,f
  5528  1ED9  1D03               	btfss	3,2
  5529  1EDA  2EC2               	goto	l2278
  5530  1EDB                     l2286:	
  5531  1EDB  0876               	movf	___awmod@sign,w
  5532  1EDC  1903               	btfsc	3,2
  5533  1EDD  2EE3               	goto	l2290
  5534  1EDE  09F2               	comf	___awmod@dividend,f
  5535  1EDF  09F3               	comf	___awmod@dividend+1,f
  5536  1EE0  0AF2               	incf	___awmod@dividend,f
  5537  1EE1  1903               	skipnz
  5538  1EE2  0AF3               	incf	___awmod@dividend+1,f
  5539  1EE3                     l2290:	
  5540  1EE3  0873               	movf	___awmod@dividend+1,w
  5541  1EE4  01F1               	clrf	?___awmod+1
  5542  1EE5  07F1               	addwf	?___awmod+1,f
  5543  1EE6  0872               	movf	___awmod@dividend,w
  5544  1EE7  01F0               	clrf	?___awmod
  5545  1EE8  07F0               	addwf	?___awmod,f
  5546  1EE9  0008               	return
  5547  1EEA                     __end_of___awmod:	
  5548                           
  5549                           	psect	text8
  5550  1F45                     __ptext8:	
  5551 ;; *************** function ___awdiv *****************
  5552 ;; Defined at:
  5553 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/awdiv.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;  divisor         2    7[COMMON] int 
  5556 ;;  dividend        2    9[COMMON] int 
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;  quotient        2    2[BANK0 ] int 
  5559 ;;  sign            1    1[BANK0 ] unsigned char 
  5560 ;;  counter         1    0[BANK0 ] unsigned char 
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  2    7[COMMON] int 
  5563 ;; Registers used:
  5564 ;;		wreg, status,2, status,0
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5570 ;;      Params:         4       0       0       0       0
  5571 ;;      Locals:         0       4       0       0       0
  5572 ;;      Temps:          1       0       0       0       0
  5573 ;;      Totals:         5       4       0       0       0
  5574 ;;Total ram usage:        9 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; This function calls:
  5577 ;;		Nothing
  5578 ;; This function is called by:
  5579 ;;		_fround
  5580 ;;		_scale
  5581 ;;		_sprintf
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           
  5586                           ;psect for function ___awdiv
  5587  1F45                     ___awdiv:	
  5588                           
  5589                           ;incstack = 0
  5590                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5591  1F45  1283               	bcf	3,5	;RP0=0, select bank0
  5592  1F46  1303               	bcf	3,6	;RP1=0, select bank0
  5593  1F47  01A1               	clrf	___awdiv@sign
  5594  1F48  1FF8               	btfss	___awdiv@divisor+1,7
  5595  1F49  2F51               	goto	l2220
  5596  1F4A  09F7               	comf	___awdiv@divisor,f
  5597  1F4B  09F8               	comf	___awdiv@divisor+1,f
  5598  1F4C  0AF7               	incf	___awdiv@divisor,f
  5599  1F4D  1903               	skipnz
  5600  1F4E  0AF8               	incf	___awdiv@divisor+1,f
  5601  1F4F  01A1               	clrf	___awdiv@sign
  5602  1F50  0AA1               	incf	___awdiv@sign,f
  5603  1F51                     l2220:	
  5604  1F51  1FFA               	btfss	___awdiv@dividend+1,7
  5605  1F52  2F5C               	goto	l2226
  5606  1F53  09F9               	comf	___awdiv@dividend,f
  5607  1F54  09FA               	comf	___awdiv@dividend+1,f
  5608  1F55  0AF9               	incf	___awdiv@dividend,f
  5609  1F56  1903               	skipnz
  5610  1F57  0AFA               	incf	___awdiv@dividend+1,f
  5611  1F58  3001               	movlw	1
  5612  1F59  00FB               	movwf	??___awdiv
  5613  1F5A  087B               	movf	??___awdiv,w
  5614  1F5B  06A1               	xorwf	___awdiv@sign,f
  5615  1F5C                     l2226:	
  5616  1F5C  01A2               	clrf	___awdiv@quotient
  5617  1F5D  01A3               	clrf	___awdiv@quotient+1
  5618  1F5E  0878               	movf	___awdiv@divisor+1,w
  5619  1F5F  0477               	iorwf	___awdiv@divisor,w
  5620  1F60  1903               	skipnz
  5621  1F61  2F93               	goto	l2248
  5622  1F62  01A0               	clrf	___awdiv@counter
  5623  1F63  0AA0               	incf	___awdiv@counter,f
  5624  1F64                     l2236:	
  5625  1F64  1BF8               	btfsc	___awdiv@divisor+1,7
  5626  1F65  2F72               	goto	l2238
  5627  1F66  3001               	movlw	1
  5628  1F67                     u2705:	
  5629  1F67  1003               	clrc
  5630  1F68  0DF7               	rlf	___awdiv@divisor,f
  5631  1F69  0DF8               	rlf	___awdiv@divisor+1,f
  5632  1F6A  3EFF               	addlw	-1
  5633  1F6B  1D03               	skipz
  5634  1F6C  2F67               	goto	u2705
  5635  1F6D  3001               	movlw	1
  5636  1F6E  00FB               	movwf	??___awdiv
  5637  1F6F  087B               	movf	??___awdiv,w
  5638  1F70  07A0               	addwf	___awdiv@counter,f
  5639  1F71  2F64               	goto	l2236
  5640  1F72                     l2238:	
  5641  1F72  3001               	movlw	1
  5642  1F73                     u2725:	
  5643  1F73  1003               	clrc
  5644  1F74  0DA2               	rlf	___awdiv@quotient,f
  5645  1F75  0DA3               	rlf	___awdiv@quotient+1,f
  5646  1F76  3EFF               	addlw	-1
  5647  1F77  1D03               	skipz
  5648  1F78  2F73               	goto	u2725
  5649  1F79  0878               	movf	___awdiv@divisor+1,w
  5650  1F7A  027A               	subwf	___awdiv@dividend+1,w
  5651  1F7B  1D03               	skipz
  5652  1F7C  2F7F               	goto	u2735
  5653  1F7D  0877               	movf	___awdiv@divisor,w
  5654  1F7E  0279               	subwf	___awdiv@dividend,w
  5655  1F7F                     u2735:	
  5656  1F7F  1C03               	skipc
  5657  1F80  2F88               	goto	l2244
  5658  1F81  0877               	movf	___awdiv@divisor,w
  5659  1F82  02F9               	subwf	___awdiv@dividend,f
  5660  1F83  0878               	movf	___awdiv@divisor+1,w
  5661  1F84  1C03               	skipc
  5662  1F85  03FA               	decf	___awdiv@dividend+1,f
  5663  1F86  02FA               	subwf	___awdiv@dividend+1,f
  5664  1F87  1422               	bsf	___awdiv@quotient,0
  5665  1F88                     l2244:	
  5666  1F88  3001               	movlw	1
  5667  1F89                     u2745:	
  5668  1F89  1003               	clrc
  5669  1F8A  0CF8               	rrf	___awdiv@divisor+1,f
  5670  1F8B  0CF7               	rrf	___awdiv@divisor,f
  5671  1F8C  3EFF               	addlw	-1
  5672  1F8D  1D03               	skipz
  5673  1F8E  2F89               	goto	u2745
  5674  1F8F  3001               	movlw	1
  5675  1F90  02A0               	subwf	___awdiv@counter,f
  5676  1F91  1D03               	btfss	3,2
  5677  1F92  2F72               	goto	l2238
  5678  1F93                     l2248:	
  5679  1F93  0821               	movf	___awdiv@sign,w
  5680  1F94  1903               	btfsc	3,2
  5681  1F95  2F9B               	goto	l2252
  5682  1F96  09A2               	comf	___awdiv@quotient,f
  5683  1F97  09A3               	comf	___awdiv@quotient+1,f
  5684  1F98  0AA2               	incf	___awdiv@quotient,f
  5685  1F99  1903               	skipnz
  5686  1F9A  0AA3               	incf	___awdiv@quotient+1,f
  5687  1F9B                     l2252:	
  5688  1F9B  0823               	movf	___awdiv@quotient+1,w
  5689  1F9C  01F8               	clrf	?___awdiv+1
  5690  1F9D  07F8               	addwf	?___awdiv+1,f
  5691  1F9E  0822               	movf	___awdiv@quotient,w
  5692  1F9F  01F7               	clrf	?___awdiv
  5693  1FA0  07F7               	addwf	?___awdiv,f
  5694  1FA1  0008               	return
  5695  1FA2                     __end_of___awdiv:	
  5696                           
  5697                           	psect	text9
  5698  000A                     __ptext9:	
  5699 ;; *************** function __tdiv_to_l_ *****************
  5700 ;; Defined at:
  5701 ;;		line 60 in file "/opt/microchip/xc8/v1.33/sources/common/ftdivl.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  f1              3    0[COMMON] float 
  5704 ;;  f2              3    3[COMMON] float 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  quot            4    0[BANK0 ] unsigned long 
  5707 ;;  exp1            1    5[BANK0 ] unsigned char 
  5708 ;;  cntr            1    4[BANK0 ] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  4    0[COMMON] unsigned long 
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5718 ;;      Params:         6       0       0       0       0
  5719 ;;      Locals:         0       6       0       0       0
  5720 ;;      Temps:          4       0       0       0       0
  5721 ;;      Totals:        10       6       0       0       0
  5722 ;;Total ram usage:       16 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_sprintf
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           
  5732                           ;psect for function __tdiv_to_l_
  5733  000A                     __tdiv_to_l_:	
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  5737  000A  0870               	movf	__tdiv_to_l_@f1,w
  5738  000B  00F6               	movwf	??__tdiv_to_l_
  5739  000C  0871               	movf	__tdiv_to_l_@f1+1,w
  5740  000D  00F7               	movwf	??__tdiv_to_l_+1
  5741  000E  0872               	movf	__tdiv_to_l_@f1+2,w
  5742  000F  00F8               	movwf	??__tdiv_to_l_+2
  5743  0010  1003               	clrc
  5744  0011  0D77               	rlf	??__tdiv_to_l_+1,w
  5745  0012  0D78               	rlf	??__tdiv_to_l_+2,w
  5746  0013  00F9               	movwf	??__tdiv_to_l_+3
  5747  0014  0879               	movf	??__tdiv_to_l_+3,w
  5748  0015  1283               	bcf	3,5	;RP0=0, select bank0
  5749  0016  1303               	bcf	3,6	;RP1=0, select bank0
  5750  0017  00A5               	movwf	__tdiv_to_l_@exp1
  5751  0018  08A5               	movf	__tdiv_to_l_@exp1,f
  5752  0019  1D03               	skipz
  5753  001A  2824               	goto	l2522
  5754  001B  3000               	movlw	0
  5755  001C  00F3               	movwf	?__tdiv_to_l_+3
  5756  001D  3000               	movlw	0
  5757  001E  00F2               	movwf	?__tdiv_to_l_+2
  5758  001F  3000               	movlw	0
  5759  0020  00F1               	movwf	?__tdiv_to_l_+1
  5760  0021  3000               	movlw	0
  5761  0022  00F0               	movwf	?__tdiv_to_l_
  5762  0023  0008               	return
  5763  0024                     l2522:	
  5764  0024  0873               	movf	__tdiv_to_l_@f2,w
  5765  0025  00F6               	movwf	??__tdiv_to_l_
  5766  0026  0874               	movf	__tdiv_to_l_@f2+1,w
  5767  0027  00F7               	movwf	??__tdiv_to_l_+1
  5768  0028  0875               	movf	__tdiv_to_l_@f2+2,w
  5769  0029  00F8               	movwf	??__tdiv_to_l_+2
  5770  002A  1003               	clrc
  5771  002B  0D77               	rlf	??__tdiv_to_l_+1,w
  5772  002C  0D78               	rlf	??__tdiv_to_l_+2,w
  5773  002D  00F9               	movwf	??__tdiv_to_l_+3
  5774  002E  0879               	movf	??__tdiv_to_l_+3,w
  5775  002F  00A4               	movwf	__tdiv_to_l_@cntr
  5776  0030  08A4               	movf	__tdiv_to_l_@cntr,f
  5777  0031  1D03               	skipz
  5778  0032  283C               	goto	l775
  5779  0033  3000               	movlw	0
  5780  0034  00F3               	movwf	?__tdiv_to_l_+3
  5781  0035  3000               	movlw	0
  5782  0036  00F2               	movwf	?__tdiv_to_l_+2
  5783  0037  3000               	movlw	0
  5784  0038  00F1               	movwf	?__tdiv_to_l_+1
  5785  0039  3000               	movlw	0
  5786  003A  00F0               	movwf	?__tdiv_to_l_
  5787  003B  0008               	return
  5788  003C                     l775:	
  5789  003C  17F1               	bsf	__tdiv_to_l_@f1+1,7
  5790  003D  30FF               	movlw	255
  5791  003E  05F0               	andwf	__tdiv_to_l_@f1,f
  5792  003F  30FF               	movlw	255
  5793  0040  05F1               	andwf	__tdiv_to_l_@f1+1,f
  5794  0041  3000               	movlw	0
  5795  0042  05F2               	andwf	__tdiv_to_l_@f1+2,f
  5796  0043  17F4               	bsf	__tdiv_to_l_@f2+1,7
  5797  0044  30FF               	movlw	255
  5798  0045  05F3               	andwf	__tdiv_to_l_@f2,f
  5799  0046  30FF               	movlw	255
  5800  0047  05F4               	andwf	__tdiv_to_l_@f2+1,f
  5801  0048  3000               	movlw	0
  5802  0049  05F5               	andwf	__tdiv_to_l_@f2+2,f
  5803  004A  3000               	movlw	0
  5804  004B  00A3               	movwf	__tdiv_to_l_@quot+3
  5805  004C  3000               	movlw	0
  5806  004D  00A2               	movwf	__tdiv_to_l_@quot+2
  5807  004E  3000               	movlw	0
  5808  004F  00A1               	movwf	__tdiv_to_l_@quot+1
  5809  0050  3000               	movlw	0
  5810  0051  00A0               	movwf	__tdiv_to_l_@quot
  5811  0052  307F               	movlw	127
  5812  0053  02A5               	subwf	__tdiv_to_l_@exp1,f
  5813  0054  3098               	movlw	152
  5814  0055  0724               	addwf	__tdiv_to_l_@cntr,w
  5815  0056  00F6               	movwf	??__tdiv_to_l_
  5816  0057  0876               	movf	??__tdiv_to_l_,w
  5817  0058  02A5               	subwf	__tdiv_to_l_@exp1,f
  5818  0059  3018               	movlw	24
  5819  005A  00F6               	movwf	??__tdiv_to_l_
  5820  005B  0876               	movf	??__tdiv_to_l_,w
  5821  005C  00A4               	movwf	__tdiv_to_l_@cntr
  5822  005D                     l2536:	
  5823  005D  3001               	movlw	1
  5824  005E  00F6               	movwf	??__tdiv_to_l_
  5825  005F                     u3445:	
  5826  005F  1003               	clrc
  5827  0060  0DA0               	rlf	__tdiv_to_l_@quot,f
  5828  0061  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5829  0062  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5830  0063  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5831  0064  0BF6               	decfsz	??__tdiv_to_l_,f
  5832  0065  285F               	goto	u3445
  5833  0066  0875               	movf	__tdiv_to_l_@f2+2,w
  5834  0067  0272               	subwf	__tdiv_to_l_@f1+2,w
  5835  0068  1D03               	skipz
  5836  0069  2870               	goto	u3455
  5837  006A  0874               	movf	__tdiv_to_l_@f2+1,w
  5838  006B  0271               	subwf	__tdiv_to_l_@f1+1,w
  5839  006C  1D03               	skipz
  5840  006D  2870               	goto	u3455
  5841  006E  0873               	movf	__tdiv_to_l_@f2,w
  5842  006F  0270               	subwf	__tdiv_to_l_@f1,w
  5843  0070                     u3455:	
  5844  0070  1C03               	skipc
  5845  0071  287D               	goto	l2544
  5846  0072  0873               	movf	__tdiv_to_l_@f2,w
  5847  0073  02F0               	subwf	__tdiv_to_l_@f1,f
  5848  0074  0874               	movf	__tdiv_to_l_@f2+1,w
  5849  0075  1C03               	skipc
  5850  0076  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  5851  0077  02F1               	subwf	__tdiv_to_l_@f1+1,f
  5852  0078  0875               	movf	__tdiv_to_l_@f2+2,w
  5853  0079  1C03               	skipc
  5854  007A  0A75               	incf	__tdiv_to_l_@f2+2,w
  5855  007B  02F2               	subwf	__tdiv_to_l_@f1+2,f
  5856  007C  1420               	bsf	__tdiv_to_l_@quot,0
  5857  007D                     l2544:	
  5858  007D  3001               	movlw	1
  5859  007E                     u3465:	
  5860  007E  1003               	clrc
  5861  007F  0DF0               	rlf	__tdiv_to_l_@f1,f
  5862  0080  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  5863  0081  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  5864  0082  3EFF               	addlw	-1
  5865  0083  1D03               	skipz
  5866  0084  287E               	goto	u3465
  5867  0085  3001               	movlw	1
  5868  0086  02A4               	subwf	__tdiv_to_l_@cntr,f
  5869  0087  1D03               	btfss	3,2
  5870  0088  285D               	goto	l2536
  5871  0089  1FA5               	btfss	__tdiv_to_l_@exp1,7
  5872  008A  28A9               	goto	l2556
  5873  008B  0825               	movf	__tdiv_to_l_@exp1,w
  5874  008C  3A80               	xorlw	128
  5875  008D  3E97               	addlw	151
  5876  008E  1803               	skipnc
  5877  008F  2899               	goto	l2554
  5878  0090  3000               	movlw	0
  5879  0091  00F3               	movwf	?__tdiv_to_l_+3
  5880  0092  3000               	movlw	0
  5881  0093  00F2               	movwf	?__tdiv_to_l_+2
  5882  0094  3000               	movlw	0
  5883  0095  00F1               	movwf	?__tdiv_to_l_+1
  5884  0096  3000               	movlw	0
  5885  0097  00F0               	movwf	?__tdiv_to_l_
  5886  0098  0008               	return
  5887  0099                     l2554:	
  5888  0099  3001               	movlw	1
  5889  009A                     u3505:	
  5890  009A  1003               	clrc
  5891  009B  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  5892  009C  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  5893  009D  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  5894  009E  0CA0               	rrf	__tdiv_to_l_@quot,f
  5895  009F  3EFF               	addlw	-1
  5896  00A0  1D03               	skipz
  5897  00A1  289A               	goto	u3505
  5898  00A2  3001               	movlw	1
  5899  00A3  00F6               	movwf	??__tdiv_to_l_
  5900  00A4  0876               	movf	??__tdiv_to_l_,w
  5901  00A5  07A5               	addwf	__tdiv_to_l_@exp1,f
  5902  00A6  1903               	btfsc	3,2
  5903  00A7  28C4               	goto	l2566
  5904  00A8  2899               	goto	l2554
  5905  00A9                     l2556:	
  5906  00A9  3018               	movlw	24
  5907  00AA  0225               	subwf	__tdiv_to_l_@exp1,w
  5908  00AB  1C03               	skipc
  5909  00AC  28C1               	goto	l2564
  5910  00AD  3000               	movlw	0
  5911  00AE  00F3               	movwf	?__tdiv_to_l_+3
  5912  00AF  3000               	movlw	0
  5913  00B0  00F2               	movwf	?__tdiv_to_l_+2
  5914  00B1  3000               	movlw	0
  5915  00B2  00F1               	movwf	?__tdiv_to_l_+1
  5916  00B3  3000               	movlw	0
  5917  00B4  00F0               	movwf	?__tdiv_to_l_
  5918  00B5  0008               	return
  5919  00B6                     l2562:	
  5920  00B6  3001               	movlw	1
  5921  00B7  00F6               	movwf	??__tdiv_to_l_
  5922  00B8                     u3535:	
  5923  00B8  1003               	clrc
  5924  00B9  0DA0               	rlf	__tdiv_to_l_@quot,f
  5925  00BA  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5926  00BB  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5927  00BC  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5928  00BD  0BF6               	decfsz	??__tdiv_to_l_,f
  5929  00BE  28B8               	goto	u3535
  5930  00BF  3001               	movlw	1
  5931  00C0  02A5               	subwf	__tdiv_to_l_@exp1,f
  5932  00C1                     l2564:	
  5933  00C1  08A5               	movf	__tdiv_to_l_@exp1,f
  5934  00C2  1D03               	skipz
  5935  00C3  28B6               	goto	l2562
  5936  00C4                     l2566:	
  5937  00C4  0823               	movf	__tdiv_to_l_@quot+3,w
  5938  00C5  00F3               	movwf	?__tdiv_to_l_+3
  5939  00C6  0822               	movf	__tdiv_to_l_@quot+2,w
  5940  00C7  00F2               	movwf	?__tdiv_to_l_+2
  5941  00C8  0821               	movf	__tdiv_to_l_@quot+1,w
  5942  00C9  00F1               	movwf	?__tdiv_to_l_+1
  5943  00CA  0820               	movf	__tdiv_to_l_@quot,w
  5944  00CB  00F0               	movwf	?__tdiv_to_l_
  5945  00CC  0008               	return
  5946  00CD                     __end_of__tdiv_to_l_:	
  5947                           
  5948                           	psect	text10
  5949  16CE                     __ptext10:	
  5950 ;; *************** function __div_to_l_ *****************
  5951 ;; Defined at:
  5952 ;;		line 60 in file "/opt/microchip/xc8/v1.33/sources/common/fldivl.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  f1              3    0[COMMON] unsigned long 
  5955 ;;  f2              3    3[COMMON] unsigned long 
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;  quot            4    0[BANK0 ] unsigned long 
  5958 ;;  exp1            1    5[BANK0 ] unsigned char 
  5959 ;;  cntr            1    4[BANK0 ] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  4    0[COMMON] unsigned long 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5969 ;;      Params:         6       0       0       0       0
  5970 ;;      Locals:         0       6       0       0       0
  5971 ;;      Temps:          8       0       0       0       0
  5972 ;;      Totals:        14       6       0       0       0
  5973 ;;Total ram usage:       20 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		_sprintf
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           
  5983                           ;psect for function __div_to_l_
  5984  16CE                     __div_to_l_:	
  5985                           
  5986                           ;incstack = 0
  5987                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  5988  16CE  3070               	movlw	low __div_to_l_@f1
  5989  16CF  0084               	movwf	4
  5990  16D0  0800               	movf	0,w
  5991  16D1  00F6               	movwf	??__div_to_l_
  5992  16D2  0A84               	incf	4,f
  5993  16D3  0800               	movf	0,w
  5994  16D4  00F7               	movwf	??__div_to_l_+1
  5995  16D5  0A84               	incf	4,f
  5996  16D6  0800               	movf	0,w
  5997  16D7  00F8               	movwf	??__div_to_l_+2
  5998  16D8  0A84               	incf	4,f
  5999  16D9  0800               	movf	0,w
  6000  16DA  00F9               	movwf	??__div_to_l_+3
  6001  16DB  1003               	clrc
  6002  16DC  0D78               	rlf	??__div_to_l_+2,w
  6003  16DD  0D79               	rlf	??__div_to_l_+3,w
  6004  16DE  00FA               	movwf	??__div_to_l_+4
  6005  16DF  087A               	movf	??__div_to_l_+4,w
  6006  16E0  1283               	bcf	3,5	;RP0=0, select bank0
  6007  16E1  1303               	bcf	3,6	;RP1=0, select bank0
  6008  16E2  00A5               	movwf	__div_to_l_@exp1
  6009  16E3  08A5               	movf	__div_to_l_@exp1,f
  6010  16E4  1D03               	skipz
  6011  16E5  2EEF               	goto	l2576
  6012  16E6  3000               	movlw	0
  6013  16E7  00F3               	movwf	?__div_to_l_+3
  6014  16E8  3000               	movlw	0
  6015  16E9  00F2               	movwf	?__div_to_l_+2
  6016  16EA  3000               	movlw	0
  6017  16EB  00F1               	movwf	?__div_to_l_+1
  6018  16EC  3000               	movlw	0
  6019  16ED  00F0               	movwf	?__div_to_l_
  6020  16EE  0008               	return
  6021  16EF                     l2576:	
  6022  16EF  3073               	movlw	low __div_to_l_@f2
  6023  16F0  0084               	movwf	4
  6024  16F1  0800               	movf	0,w
  6025  16F2  00F6               	movwf	??__div_to_l_
  6026  16F3  0A84               	incf	4,f
  6027  16F4  0800               	movf	0,w
  6028  16F5  00F7               	movwf	??__div_to_l_+1
  6029  16F6  0A84               	incf	4,f
  6030  16F7  0800               	movf	0,w
  6031  16F8  00F8               	movwf	??__div_to_l_+2
  6032  16F9  0A84               	incf	4,f
  6033  16FA  0800               	movf	0,w
  6034  16FB  00F9               	movwf	??__div_to_l_+3
  6035  16FC  1003               	clrc
  6036  16FD  0D78               	rlf	??__div_to_l_+2,w
  6037  16FE  0D79               	rlf	??__div_to_l_+3,w
  6038  16FF  00FA               	movwf	??__div_to_l_+4
  6039  1700  087A               	movf	??__div_to_l_+4,w
  6040  1701  00A4               	movwf	__div_to_l_@cntr
  6041  1702  08A4               	movf	__div_to_l_@cntr,f
  6042  1703  1D03               	skipz
  6043  1704  2F0E               	goto	l2582
  6044  1705  3000               	movlw	0
  6045  1706  00F3               	movwf	?__div_to_l_+3
  6046  1707  3000               	movlw	0
  6047  1708  00F2               	movwf	?__div_to_l_+2
  6048  1709  3000               	movlw	0
  6049  170A  00F1               	movwf	?__div_to_l_+1
  6050  170B  3000               	movlw	0
  6051  170C  00F0               	movwf	?__div_to_l_
  6052  170D  0008               	return
  6053  170E                     l2582:	
  6054  170E  3070               	movlw	low __div_to_l_@f1
  6055  170F  0084               	movwf	4
  6056  1710  3000               	movlw	0
  6057  1711  0480               	iorwf	0,f
  6058  1712  0A84               	incf	4,f
  6059  1713  3000               	movlw	0
  6060  1714  0480               	iorwf	0,f
  6061  1715  0A84               	incf	4,f
  6062  1716  3080               	movlw	128
  6063  1717  0480               	iorwf	0,f
  6064  1718  0A84               	incf	4,f
  6065  1719  3000               	movlw	0
  6066  171A  0480               	iorwf	0,f
  6067  171B  3070               	movlw	low __div_to_l_@f1
  6068  171C  0084               	movwf	4
  6069  171D  30FF               	movlw	255
  6070  171E  0580               	andwf	0,f
  6071  171F  0A84               	incf	4,f
  6072  1720  30FF               	movlw	255
  6073  1721  0580               	andwf	0,f
  6074  1722  0A84               	incf	4,f
  6075  1723  30FF               	movlw	255
  6076  1724  0580               	andwf	0,f
  6077  1725  0A84               	incf	4,f
  6078  1726  3000               	movlw	0
  6079  1727  0580               	andwf	0,f
  6080  1728  3073               	movlw	low __div_to_l_@f2
  6081  1729  0084               	movwf	4
  6082  172A  3000               	movlw	0
  6083  172B  0480               	iorwf	0,f
  6084  172C  0A84               	incf	4,f
  6085  172D  3000               	movlw	0
  6086  172E  0480               	iorwf	0,f
  6087  172F  0A84               	incf	4,f
  6088  1730  3080               	movlw	128
  6089  1731  0480               	iorwf	0,f
  6090  1732  0A84               	incf	4,f
  6091  1733  3000               	movlw	0
  6092  1734  0480               	iorwf	0,f
  6093  1735  3073               	movlw	low __div_to_l_@f2
  6094  1736  0084               	movwf	4
  6095  1737  30FF               	movlw	255
  6096  1738  0580               	andwf	0,f
  6097  1739  0A84               	incf	4,f
  6098  173A  30FF               	movlw	255
  6099  173B  0580               	andwf	0,f
  6100  173C  0A84               	incf	4,f
  6101  173D  30FF               	movlw	255
  6102  173E  0580               	andwf	0,f
  6103  173F  0A84               	incf	4,f
  6104  1740  3000               	movlw	0
  6105  1741  0580               	andwf	0,f
  6106  1742  3000               	movlw	0
  6107  1743  00A3               	movwf	__div_to_l_@quot+3
  6108  1744  3000               	movlw	0
  6109  1745  00A2               	movwf	__div_to_l_@quot+2
  6110  1746  3000               	movlw	0
  6111  1747  00A1               	movwf	__div_to_l_@quot+1
  6112  1748  3000               	movlw	0
  6113  1749  00A0               	movwf	__div_to_l_@quot
  6114  174A  307F               	movlw	127
  6115  174B  02A5               	subwf	__div_to_l_@exp1,f
  6116  174C  30A0               	movlw	160
  6117  174D  0724               	addwf	__div_to_l_@cntr,w
  6118  174E  00F6               	movwf	??__div_to_l_
  6119  174F  0876               	movf	??__div_to_l_,w
  6120  1750  02A5               	subwf	__div_to_l_@exp1,f
  6121  1751  3020               	movlw	32
  6122  1752  00F6               	movwf	??__div_to_l_
  6123  1753  0876               	movf	??__div_to_l_,w
  6124  1754  00A4               	movwf	__div_to_l_@cntr
  6125  1755                     l2592:	
  6126  1755  3001               	movlw	1
  6127  1756  00F6               	movwf	??__div_to_l_
  6128  1757                     u3575:	
  6129  1757  1003               	clrc
  6130  1758  0DA0               	rlf	__div_to_l_@quot,f
  6131  1759  0DA1               	rlf	__div_to_l_@quot+1,f
  6132  175A  0DA2               	rlf	__div_to_l_@quot+2,f
  6133  175B  0DA3               	rlf	__div_to_l_@quot+3,f
  6134  175C  0BF6               	decfsz	??__div_to_l_,f
  6135  175D  2F57               	goto	u3575
  6136  175E  3073               	movlw	low __div_to_l_@f2
  6137  175F  0084               	movwf	4
  6138  1760  0800               	movf	0,w
  6139  1761  00F6               	movwf	??__div_to_l_
  6140  1762  0A84               	incf	4,f
  6141  1763  0800               	movf	0,w
  6142  1764  00F7               	movwf	??__div_to_l_+1
  6143  1765  0A84               	incf	4,f
  6144  1766  0800               	movf	0,w
  6145  1767  00F8               	movwf	??__div_to_l_+2
  6146  1768  0A84               	incf	4,f
  6147  1769  0800               	movf	0,w
  6148  176A  00F9               	movwf	??__div_to_l_+3
  6149  176B  3070               	movlw	low __div_to_l_@f1
  6150  176C  0084               	movwf	4
  6151  176D  0800               	movf	0,w
  6152  176E  00FA               	movwf	??__div_to_l_+4
  6153  176F  0A84               	incf	4,f
  6154  1770  0800               	movf	0,w
  6155  1771  00FB               	movwf	??__div_to_l_+5
  6156  1772  0A84               	incf	4,f
  6157  1773  0800               	movf	0,w
  6158  1774  00FC               	movwf	??__div_to_l_+6
  6159  1775  0A84               	incf	4,f
  6160  1776  0800               	movf	0,w
  6161  1777  00FD               	movwf	??__div_to_l_+7
  6162  1778  0879               	movf	??__div_to_l_+3,w
  6163  1779  027D               	subwf	??__div_to_l_+7,w
  6164  177A  1D03               	skipz
  6165  177B  2F86               	goto	u3585
  6166  177C  0878               	movf	??__div_to_l_+2,w
  6167  177D  027C               	subwf	??__div_to_l_+6,w
  6168  177E  1D03               	skipz
  6169  177F  2F86               	goto	u3585
  6170  1780  0877               	movf	??__div_to_l_+1,w
  6171  1781  027B               	subwf	??__div_to_l_+5,w
  6172  1782  1D03               	skipz
  6173  1783  2F86               	goto	u3585
  6174  1784  0876               	movf	??__div_to_l_,w
  6175  1785  027A               	subwf	??__div_to_l_+4,w
  6176  1786                     u3585:	
  6177  1786  1C03               	skipc
  6178  1787  2FAB               	goto	l700
  6179  1788  3073               	movlw	low __div_to_l_@f2
  6180  1789  0084               	movwf	4
  6181  178A  0800               	movf	0,w
  6182  178B  00F6               	movwf	??__div_to_l_
  6183  178C  0A84               	incf	4,f
  6184  178D  0800               	movf	0,w
  6185  178E  00F7               	movwf	??__div_to_l_+1
  6186  178F  0A84               	incf	4,f
  6187  1790  0800               	movf	0,w
  6188  1791  00F8               	movwf	??__div_to_l_+2
  6189  1792  0A84               	incf	4,f
  6190  1793  0800               	movf	0,w
  6191  1794  00F9               	movwf	??__div_to_l_+3
  6192  1795  3070               	movlw	low __div_to_l_@f1
  6193  1796  0084               	movwf	4
  6194  1797  0876               	movf	??__div_to_l_,w
  6195  1798  0280               	subwf	0,f
  6196  1799  0A84               	incf	4,f
  6197  179A  0877               	movf	??__div_to_l_+1,w
  6198  179B  1C03               	skipc
  6199  179C  0F77               	incfsz	??__div_to_l_+1,w
  6200  179D  0280               	subwf	0,f
  6201  179E  0A84               	incf	4,f
  6202  179F  0878               	movf	??__div_to_l_+2,w
  6203  17A0  1C03               	skipc
  6204  17A1  0F78               	incfsz	??__div_to_l_+2,w
  6205  17A2  0280               	subwf	0,f
  6206  17A3  0A84               	incf	4,f
  6207  17A4  0879               	movf	??__div_to_l_+3,w
  6208  17A5  1C03               	skipc
  6209  17A6  0A79               	incf	??__div_to_l_+3,w
  6210  17A7  0280               	subwf	0,f
  6211  17A8  3003               	movlw	3
  6212  17A9  0284               	subwf	4,f
  6213  17AA  1420               	bsf	__div_to_l_@quot,0
  6214  17AB                     l700:	
  6215  17AB  3070               	movlw	low __div_to_l_@f1
  6216  17AC  0084               	movwf	4
  6217  17AD  1003               	clrc
  6218  17AE  0D80               	rlf	0,f
  6219  17AF  0A84               	incf	4,f
  6220  17B0  0D80               	rlf	0,f
  6221  17B1  0A84               	incf	4,f
  6222  17B2  0D80               	rlf	0,f
  6223  17B3  0A84               	incf	4,f
  6224  17B4  0D80               	rlf	0,f
  6225  17B5  0384               	decf	4,f
  6226  17B6  0384               	decf	4,f
  6227  17B7  0384               	decf	4,f
  6228  17B8  3001               	movlw	1
  6229  17B9  02A4               	subwf	__div_to_l_@cntr,f
  6230  17BA  1D03               	btfss	3,2
  6231  17BB  2F55               	goto	l2592
  6232  17BC  1FA5               	btfss	__div_to_l_@exp1,7
  6233  17BD  2FDC               	goto	l2610
  6234  17BE  0825               	movf	__div_to_l_@exp1,w
  6235  17BF  3A80               	xorlw	128
  6236  17C0  3E9F               	addlw	159
  6237  17C1  1803               	skipnc
  6238  17C2  2FCC               	goto	l2608
  6239  17C3  3000               	movlw	0
  6240  17C4  00F3               	movwf	?__div_to_l_+3
  6241  17C5  3000               	movlw	0
  6242  17C6  00F2               	movwf	?__div_to_l_+2
  6243  17C7  3000               	movlw	0
  6244  17C8  00F1               	movwf	?__div_to_l_+1
  6245  17C9  3000               	movlw	0
  6246  17CA  00F0               	movwf	?__div_to_l_
  6247  17CB  0008               	return
  6248  17CC                     l2608:	
  6249  17CC  3001               	movlw	1
  6250  17CD                     u3625:	
  6251  17CD  1003               	clrc
  6252  17CE  0CA3               	rrf	__div_to_l_@quot+3,f
  6253  17CF  0CA2               	rrf	__div_to_l_@quot+2,f
  6254  17D0  0CA1               	rrf	__div_to_l_@quot+1,f
  6255  17D1  0CA0               	rrf	__div_to_l_@quot,f
  6256  17D2  3EFF               	addlw	-1
  6257  17D3  1D03               	skipz
  6258  17D4  2FCD               	goto	u3625
  6259  17D5  3001               	movlw	1
  6260  17D6  00F6               	movwf	??__div_to_l_
  6261  17D7  0876               	movf	??__div_to_l_,w
  6262  17D8  07A5               	addwf	__div_to_l_@exp1,f
  6263  17D9  1903               	btfsc	3,2
  6264  17DA  2FF7               	goto	l2620
  6265  17DB  2FCC               	goto	l2608
  6266  17DC                     l2610:	
  6267  17DC  3020               	movlw	32
  6268  17DD  0225               	subwf	__div_to_l_@exp1,w
  6269  17DE  1C03               	skipc
  6270  17DF  2FF4               	goto	l2618
  6271  17E0  3000               	movlw	0
  6272  17E1  00F3               	movwf	?__div_to_l_+3
  6273  17E2  3000               	movlw	0
  6274  17E3  00F2               	movwf	?__div_to_l_+2
  6275  17E4  3000               	movlw	0
  6276  17E5  00F1               	movwf	?__div_to_l_+1
  6277  17E6  3000               	movlw	0
  6278  17E7  00F0               	movwf	?__div_to_l_
  6279  17E8  0008               	return
  6280  17E9                     l2616:	
  6281  17E9  3001               	movlw	1
  6282  17EA  00F6               	movwf	??__div_to_l_
  6283  17EB                     u3655:	
  6284  17EB  1003               	clrc
  6285  17EC  0DA0               	rlf	__div_to_l_@quot,f
  6286  17ED  0DA1               	rlf	__div_to_l_@quot+1,f
  6287  17EE  0DA2               	rlf	__div_to_l_@quot+2,f
  6288  17EF  0DA3               	rlf	__div_to_l_@quot+3,f
  6289  17F0  0BF6               	decfsz	??__div_to_l_,f
  6290  17F1  2FEB               	goto	u3655
  6291  17F2  3001               	movlw	1
  6292  17F3  02A5               	subwf	__div_to_l_@exp1,f
  6293  17F4                     l2618:	
  6294  17F4  08A5               	movf	__div_to_l_@exp1,f
  6295  17F5  1D03               	skipz
  6296  17F6  2FE9               	goto	l2616
  6297  17F7                     l2620:	
  6298  17F7  0823               	movf	__div_to_l_@quot+3,w
  6299  17F8  00F3               	movwf	?__div_to_l_+3
  6300  17F9  0822               	movf	__div_to_l_@quot+2,w
  6301  17FA  00F2               	movwf	?__div_to_l_+2
  6302  17FB  0821               	movf	__div_to_l_@quot+1,w
  6303  17FC  00F1               	movwf	?__div_to_l_+1
  6304  17FD  0820               	movf	__div_to_l_@quot,w
  6305  17FE  00F0               	movwf	?__div_to_l_
  6306  17FF  0008               	return
  6307  1800                     __end_of__div_to_l_:	
  6308                           
  6309                           	psect	text11
  6310  1E2E                     __ptext11:	
  6311 ;; *************** function ___wmul *****************
  6312 ;; Defined at:
  6313 ;;		line 15 in file "/opt/microchip/xc8/v1.33/sources/common/Umul16.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;  multiplier      2    0[COMMON] unsigned int 
  6316 ;;  multiplicand    2    2[COMMON] unsigned int 
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;  product         2    4[COMMON] unsigned int 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  2    0[COMMON] unsigned int 
  6321 ;; Registers used:
  6322 ;;		wreg, status,2, status,0
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6328 ;;      Params:         4       0       0       0       0
  6329 ;;      Locals:         2       0       0       0       0
  6330 ;;      Temps:          0       0       0       0       0
  6331 ;;      Totals:         6       0       0       0       0
  6332 ;;Total ram usage:        6 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; This function calls:
  6335 ;;		Nothing
  6336 ;; This function is called by:
  6337 ;;		_sprintf
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function ___wmul
  6343  1E2E                     ___wmul:	
  6344                           
  6345                           ;incstack = 0
  6346                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6347  1E2E  01F4               	clrf	___wmul@product
  6348  1E2F  01F5               	clrf	___wmul@product+1
  6349  1E30                     l2626:	
  6350  1E30  1C70               	btfss	___wmul@multiplier,0
  6351  1E31  2E38               	goto	l542
  6352  1E32  0872               	movf	___wmul@multiplicand,w
  6353  1E33  07F4               	addwf	___wmul@product,f
  6354  1E34  1803               	skipnc
  6355  1E35  0AF5               	incf	___wmul@product+1,f
  6356  1E36  0873               	movf	___wmul@multiplicand+1,w
  6357  1E37  07F5               	addwf	___wmul@product+1,f
  6358  1E38                     l542:	
  6359  1E38  3001               	movlw	1
  6360  1E39                     u3685:	
  6361  1E39  1003               	clrc
  6362  1E3A  0DF2               	rlf	___wmul@multiplicand,f
  6363  1E3B  0DF3               	rlf	___wmul@multiplicand+1,f
  6364  1E3C  3EFF               	addlw	-1
  6365  1E3D  1D03               	skipz
  6366  1E3E  2E39               	goto	u3685
  6367  1E3F  3001               	movlw	1
  6368  1E40                     u3695:	
  6369  1E40  1003               	clrc
  6370  1E41  0CF1               	rrf	___wmul@multiplier+1,f
  6371  1E42  0CF0               	rrf	___wmul@multiplier,f
  6372  1E43  3EFF               	addlw	-1
  6373  1E44  1D03               	skipz
  6374  1E45  2E40               	goto	u3695
  6375  1E46  0871               	movf	___wmul@multiplier+1,w
  6376  1E47  0470               	iorwf	___wmul@multiplier,w
  6377  1E48  1D03               	skipz
  6378  1E49  2E30               	goto	l2626
  6379  1E4A  0875               	movf	___wmul@product+1,w
  6380  1E4B  01F1               	clrf	?___wmul+1
  6381  1E4C  07F1               	addwf	?___wmul+1,f
  6382  1E4D  0874               	movf	___wmul@product,w
  6383  1E4E  01F0               	clrf	?___wmul
  6384  1E4F  07F0               	addwf	?___wmul,f
  6385  1E50  0008               	return
  6386  1E51                     __end_of___wmul:	
  6387                           
  6388                           	psect	text12
  6389  0814                     __ptext12:	
  6390 ;; *************** function ___lltoft *****************
  6391 ;; Defined at:
  6392 ;;		line 35 in file "/opt/microchip/xc8/v1.33/sources/common/lltoft.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  c               4   15[BANK0 ] unsigned long 
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;  exp             1   20[BANK0 ] unsigned char 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  3   15[BANK0 ] float 
  6399 ;; Registers used:
  6400 ;;		wreg, status,2, status,0, pclath, cstack
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6406 ;;      Params:         0       4       0       0       0
  6407 ;;      Locals:         0       1       0       0       0
  6408 ;;      Temps:          0       1       0       0       0
  6409 ;;      Totals:         0       6       0       0       0
  6410 ;;Total ram usage:        6 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    1
  6413 ;; This function calls:
  6414 ;;		___ftpack
  6415 ;; This function is called by:
  6416 ;;		_main
  6417 ;;		_sprintf
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           
  6422                           ;psect for function ___lltoft
  6423  0814                     ___lltoft:	
  6424                           
  6425                           ;incstack = 0
  6426                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6427  0814  308E               	movlw	142
  6428  0815  1283               	bcf	3,5	;RP0=0, select bank0
  6429  0816  1303               	bcf	3,6	;RP1=0, select bank0
  6430  0817  00B3               	movwf	??___lltoft
  6431  0818  0833               	movf	??___lltoft,w
  6432  0819  00B4               	movwf	___lltoft@exp
  6433  081A                     l2762:	
  6434  081A  30FF               	movlw	255
  6435  081B  0532               	andwf	___lltoft@c+3,w
  6436  081C  1903               	btfsc	3,2
  6437  081D  282C               	goto	l2764
  6438  081E  3001               	movlw	1
  6439  081F                     u4005:	
  6440  081F  1003               	clrc
  6441  0820  0CB2               	rrf	___lltoft@c+3,f
  6442  0821  0CB1               	rrf	___lltoft@c+2,f
  6443  0822  0CB0               	rrf	___lltoft@c+1,f
  6444  0823  0CAF               	rrf	___lltoft@c,f
  6445  0824  3EFF               	addlw	-1
  6446  0825  1D03               	skipz
  6447  0826  281F               	goto	u4005
  6448  0827  3001               	movlw	1
  6449  0828  00B3               	movwf	??___lltoft
  6450  0829  0833               	movf	??___lltoft,w
  6451  082A  07B4               	addwf	___lltoft@exp,f
  6452  082B  281A               	goto	l2762
  6453  082C                     l2764:	
  6454  082C  082F               	movf	___lltoft@c,w
  6455  082D  00F0               	movwf	___ftpack@arg
  6456  082E  0830               	movf	___lltoft@c+1,w
  6457  082F  00F1               	movwf	___ftpack@arg+1
  6458  0830  0831               	movf	___lltoft@c+2,w
  6459  0831  00F2               	movwf	___ftpack@arg+2
  6460  0832  0834               	movf	___lltoft@exp,w
  6461  0833  00B3               	movwf	??___lltoft
  6462  0834  0833               	movf	??___lltoft,w
  6463  0835  00F3               	movwf	___ftpack@exp
  6464  0836  01F4               	clrf	___ftpack@sign
  6465  0837  160A  118A  2170   	fcall	___ftpack
  6466  083A  0870               	movf	?___ftpack,w
  6467  083B  1283               	bcf	3,5	;RP0=0, select bank0
  6468  083C  1303               	bcf	3,6	;RP1=0, select bank0
  6469  083D  00AF               	movwf	?___lltoft
  6470  083E  0871               	movf	?___ftpack+1,w
  6471  083F  00B0               	movwf	?___lltoft+1
  6472  0840  0872               	movf	?___ftpack+2,w
  6473  0841  00B1               	movwf	?___lltoft+2
  6474  0842  0008               	return
  6475  0843                     __end_of___lltoft:	
  6476                           
  6477                           	psect	text13
  6478  1E51                     __ptext13:	
  6479 ;; *************** function ___llmod *****************
  6480 ;; Defined at:
  6481 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/llmod.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  divisor         4    0[COMMON] unsigned long 
  6484 ;;  dividend        4    4[COMMON] unsigned long 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  counter         1    9[COMMON] unsigned char 
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  4    0[COMMON] unsigned long 
  6489 ;; Registers used:
  6490 ;;		wreg, status,2, status,0
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6496 ;;      Params:         8       0       0       0       0
  6497 ;;      Locals:         1       0       0       0       0
  6498 ;;      Temps:          1       0       0       0       0
  6499 ;;      Totals:        10       0       0       0       0
  6500 ;;Total ram usage:       10 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_sprintf
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function ___llmod
  6511  1E51                     ___llmod:	
  6512                           
  6513                           ;incstack = 0
  6514                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6515  1E51  0873               	movf	___llmod@divisor+3,w
  6516  1E52  0472               	iorwf	___llmod@divisor+2,w
  6517  1E53  0471               	iorwf	___llmod@divisor+1,w
  6518  1E54  0470               	iorwf	___llmod@divisor,w
  6519  1E55  1903               	skipnz
  6520  1E56  2E94               	goto	l2754
  6521  1E57  01F9               	clrf	___llmod@counter
  6522  1E58  0AF9               	incf	___llmod@counter,f
  6523  1E59                     l2744:	
  6524  1E59  1BF3               	btfsc	___llmod@divisor+3,7
  6525  1E5A  2E69               	goto	l2746
  6526  1E5B  3001               	movlw	1
  6527  1E5C  00F8               	movwf	??___llmod
  6528  1E5D                     u3955:	
  6529  1E5D  1003               	clrc
  6530  1E5E  0DF0               	rlf	___llmod@divisor,f
  6531  1E5F  0DF1               	rlf	___llmod@divisor+1,f
  6532  1E60  0DF2               	rlf	___llmod@divisor+2,f
  6533  1E61  0DF3               	rlf	___llmod@divisor+3,f
  6534  1E62  0BF8               	decfsz	??___llmod,f
  6535  1E63  2E5D               	goto	u3955
  6536  1E64  3001               	movlw	1
  6537  1E65  00F8               	movwf	??___llmod
  6538  1E66  0878               	movf	??___llmod,w
  6539  1E67  07F9               	addwf	___llmod@counter,f
  6540  1E68  2E59               	goto	l2744
  6541  1E69                     l2746:	
  6542  1E69  0873               	movf	___llmod@divisor+3,w
  6543  1E6A  0277               	subwf	___llmod@dividend+3,w
  6544  1E6B  1D03               	skipz
  6545  1E6C  2E77               	goto	u3975
  6546  1E6D  0872               	movf	___llmod@divisor+2,w
  6547  1E6E  0276               	subwf	___llmod@dividend+2,w
  6548  1E6F  1D03               	skipz
  6549  1E70  2E77               	goto	u3975
  6550  1E71  0871               	movf	___llmod@divisor+1,w
  6551  1E72  0275               	subwf	___llmod@dividend+1,w
  6552  1E73  1D03               	skipz
  6553  1E74  2E77               	goto	u3975
  6554  1E75  0870               	movf	___llmod@divisor,w
  6555  1E76  0274               	subwf	___llmod@dividend,w
  6556  1E77                     u3975:	
  6557  1E77  1C03               	skipc
  6558  1E78  2E87               	goto	l2750
  6559  1E79  0870               	movf	___llmod@divisor,w
  6560  1E7A  02F4               	subwf	___llmod@dividend,f
  6561  1E7B  0871               	movf	___llmod@divisor+1,w
  6562  1E7C  1C03               	skipc
  6563  1E7D  0F71               	incfsz	___llmod@divisor+1,w
  6564  1E7E  02F5               	subwf	___llmod@dividend+1,f
  6565  1E7F  0872               	movf	___llmod@divisor+2,w
  6566  1E80  1C03               	skipc
  6567  1E81  0F72               	incfsz	___llmod@divisor+2,w
  6568  1E82  02F6               	subwf	___llmod@dividend+2,f
  6569  1E83  0873               	movf	___llmod@divisor+3,w
  6570  1E84  1C03               	skipc
  6571  1E85  0F73               	incfsz	___llmod@divisor+3,w
  6572  1E86  02F7               	subwf	___llmod@dividend+3,f
  6573  1E87                     l2750:	
  6574  1E87  3001               	movlw	1
  6575  1E88                     u3985:	
  6576  1E88  1003               	clrc
  6577  1E89  0CF3               	rrf	___llmod@divisor+3,f
  6578  1E8A  0CF2               	rrf	___llmod@divisor+2,f
  6579  1E8B  0CF1               	rrf	___llmod@divisor+1,f
  6580  1E8C  0CF0               	rrf	___llmod@divisor,f
  6581  1E8D  3EFF               	addlw	-1
  6582  1E8E  1D03               	skipz
  6583  1E8F  2E88               	goto	u3985
  6584  1E90  3001               	movlw	1
  6585  1E91  02F9               	subwf	___llmod@counter,f
  6586  1E92  1D03               	btfss	3,2
  6587  1E93  2E69               	goto	l2746
  6588  1E94                     l2754:	
  6589  1E94  0877               	movf	___llmod@dividend+3,w
  6590  1E95  00F3               	movwf	?___llmod+3
  6591  1E96  0876               	movf	___llmod@dividend+2,w
  6592  1E97  00F2               	movwf	?___llmod+2
  6593  1E98  0875               	movf	___llmod@dividend+1,w
  6594  1E99  00F1               	movwf	?___llmod+1
  6595  1E9A  0874               	movf	___llmod@dividend,w
  6596  1E9B  00F0               	movwf	?___llmod
  6597  1E9C  0008               	return
  6598  1E9D                     __end_of___llmod:	
  6599                           
  6600                           	psect	text14
  6601  1251                     __ptext14:	
  6602 ;; *************** function ___fttol *****************
  6603 ;; Defined at:
  6604 ;;		line 44 in file "/opt/microchip/xc8/v1.33/sources/common/fttol.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;  f1              3   46[BANK0 ] float 
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;  lval            4   55[BANK0 ] unsigned long 
  6609 ;;  exp1            1   59[BANK0 ] unsigned char 
  6610 ;;  sign1           1   54[BANK0 ] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  4   46[BANK0 ] long 
  6613 ;; Registers used:
  6614 ;;		wreg, status,2, status,0
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6620 ;;      Params:         0       4       0       0       0
  6621 ;;      Locals:         0       6       0       0       0
  6622 ;;      Temps:          0       4       0       0       0
  6623 ;;      Totals:         0      14       0       0       0
  6624 ;;Total ram usage:       14 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_sprintf
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           
  6634                           ;psect for function ___fttol
  6635  1251                     ___fttol:	
  6636                           
  6637                           ;incstack = 0
  6638                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6639  1251  1283               	bcf	3,5	;RP0=0, select bank0
  6640  1252  1303               	bcf	3,6	;RP1=0, select bank0
  6641  1253  084E               	movf	___fttol@f1,w
  6642  1254  00D2               	movwf	??___fttol
  6643  1255  084F               	movf	___fttol@f1+1,w
  6644  1256  00D3               	movwf	??___fttol+1
  6645  1257  0850               	movf	___fttol@f1+2,w
  6646  1258  00D4               	movwf	??___fttol+2
  6647  1259  1003               	clrc
  6648  125A  0D53               	rlf	??___fttol+1,w
  6649  125B  0D54               	rlf	??___fttol+2,w
  6650  125C  00D5               	movwf	??___fttol+3
  6651  125D  0855               	movf	??___fttol+3,w
  6652  125E  00DB               	movwf	___fttol@exp1
  6653  125F  08DB               	movf	___fttol@exp1,f
  6654  1260  1D03               	skipz
  6655  1261  2A6B               	goto	l2676
  6656  1262  3000               	movlw	0
  6657  1263  00D1               	movwf	?___fttol+3
  6658  1264  3000               	movlw	0
  6659  1265  00D0               	movwf	?___fttol+2
  6660  1266  3000               	movlw	0
  6661  1267  00CF               	movwf	?___fttol+1
  6662  1268  3000               	movlw	0
  6663  1269  00CE               	movwf	?___fttol
  6664  126A  0008               	return
  6665  126B                     l2676:	
  6666  126B  084E               	movf	___fttol@f1,w
  6667  126C  00D2               	movwf	??___fttol
  6668  126D  084F               	movf	___fttol@f1+1,w
  6669  126E  00D3               	movwf	??___fttol+1
  6670  126F  0850               	movf	___fttol@f1+2,w
  6671  1270  00D4               	movwf	??___fttol+2
  6672  1271  3017               	movlw	23
  6673  1272                     u3785:	
  6674  1272  1003               	clrc
  6675  1273  0CD4               	rrf	??___fttol+2,f
  6676  1274  0CD3               	rrf	??___fttol+1,f
  6677  1275  0CD2               	rrf	??___fttol,f
  6678  1276  3EFF               	addlw	-1
  6679  1277  1D03               	skipz
  6680  1278  2A72               	goto	u3785
  6681  1279  0852               	movf	??___fttol,w
  6682  127A  00D5               	movwf	??___fttol+3
  6683  127B  0855               	movf	??___fttol+3,w
  6684  127C  00D6               	movwf	___fttol@sign1
  6685  127D  17CF               	bsf	___fttol@f1+1,7
  6686  127E  30FF               	movlw	255
  6687  127F  05CE               	andwf	___fttol@f1,f
  6688  1280  30FF               	movlw	255
  6689  1281  05CF               	andwf	___fttol@f1+1,f
  6690  1282  3000               	movlw	0
  6691  1283  05D0               	andwf	___fttol@f1+2,f
  6692  1284  084E               	movf	___fttol@f1,w
  6693  1285  00D7               	movwf	___fttol@lval
  6694  1286  084F               	movf	___fttol@f1+1,w
  6695  1287  00D8               	movwf	___fttol@lval+1
  6696  1288  0850               	movf	___fttol@f1+2,w
  6697  1289  00D9               	movwf	___fttol@lval+2
  6698  128A  01DA               	clrf	___fttol@lval+3
  6699  128B  308E               	movlw	142
  6700  128C  02DB               	subwf	___fttol@exp1,f
  6701  128D  1FDB               	btfss	___fttol@exp1,7
  6702  128E  2AAD               	goto	l2696
  6703  128F  085B               	movf	___fttol@exp1,w
  6704  1290  3A80               	xorlw	128
  6705  1291  3E8F               	addlw	143
  6706  1292  1803               	skipnc
  6707  1293  2A9D               	goto	l2694
  6708  1294  3000               	movlw	0
  6709  1295  00D1               	movwf	?___fttol+3
  6710  1296  3000               	movlw	0
  6711  1297  00D0               	movwf	?___fttol+2
  6712  1298  3000               	movlw	0
  6713  1299  00CF               	movwf	?___fttol+1
  6714  129A  3000               	movlw	0
  6715  129B  00CE               	movwf	?___fttol
  6716  129C  0008               	return
  6717  129D                     l2694:	
  6718  129D  3001               	movlw	1
  6719  129E                     u3815:	
  6720  129E  1003               	clrc
  6721  129F  0CDA               	rrf	___fttol@lval+3,f
  6722  12A0  0CD9               	rrf	___fttol@lval+2,f
  6723  12A1  0CD8               	rrf	___fttol@lval+1,f
  6724  12A2  0CD7               	rrf	___fttol@lval,f
  6725  12A3  3EFF               	addlw	-1
  6726  12A4  1D03               	skipz
  6727  12A5  2A9E               	goto	u3815
  6728  12A6  3001               	movlw	1
  6729  12A7  00D2               	movwf	??___fttol
  6730  12A8  0852               	movf	??___fttol,w
  6731  12A9  07DB               	addwf	___fttol@exp1,f
  6732  12AA  1903               	btfsc	3,2
  6733  12AB  2AC8               	goto	l2706
  6734  12AC  2A9D               	goto	l2694
  6735  12AD                     l2696:	
  6736  12AD  3018               	movlw	24
  6737  12AE  025B               	subwf	___fttol@exp1,w
  6738  12AF  1C03               	skipc
  6739  12B0  2AC5               	goto	l2704
  6740  12B1  3000               	movlw	0
  6741  12B2  00D1               	movwf	?___fttol+3
  6742  12B3  3000               	movlw	0
  6743  12B4  00D0               	movwf	?___fttol+2
  6744  12B5  3000               	movlw	0
  6745  12B6  00CF               	movwf	?___fttol+1
  6746  12B7  3000               	movlw	0
  6747  12B8  00CE               	movwf	?___fttol
  6748  12B9  0008               	return
  6749  12BA                     l2702:	
  6750  12BA  3001               	movlw	1
  6751  12BB  00D2               	movwf	??___fttol
  6752  12BC                     u3845:	
  6753  12BC  1003               	clrc
  6754  12BD  0DD7               	rlf	___fttol@lval,f
  6755  12BE  0DD8               	rlf	___fttol@lval+1,f
  6756  12BF  0DD9               	rlf	___fttol@lval+2,f
  6757  12C0  0DDA               	rlf	___fttol@lval+3,f
  6758  12C1  0BD2               	decfsz	??___fttol,f
  6759  12C2  2ABC               	goto	u3845
  6760  12C3  3001               	movlw	1
  6761  12C4  02DB               	subwf	___fttol@exp1,f
  6762  12C5                     l2704:	
  6763  12C5  08DB               	movf	___fttol@exp1,f
  6764  12C6  1D03               	skipz
  6765  12C7  2ABA               	goto	l2702
  6766  12C8                     l2706:	
  6767  12C8  0856               	movf	___fttol@sign1,w
  6768  12C9  1903               	btfsc	3,2
  6769  12CA  2AD6               	goto	l2710
  6770  12CB  09D7               	comf	___fttol@lval,f
  6771  12CC  09D8               	comf	___fttol@lval+1,f
  6772  12CD  09D9               	comf	___fttol@lval+2,f
  6773  12CE  09DA               	comf	___fttol@lval+3,f
  6774  12CF  0AD7               	incf	___fttol@lval,f
  6775  12D0  1903               	skipnz
  6776  12D1  0AD8               	incf	___fttol@lval+1,f
  6777  12D2  1903               	skipnz
  6778  12D3  0AD9               	incf	___fttol@lval+2,f
  6779  12D4  1903               	skipnz
  6780  12D5  0ADA               	incf	___fttol@lval+3,f
  6781  12D6                     l2710:	
  6782  12D6  085A               	movf	___fttol@lval+3,w
  6783  12D7  00D1               	movwf	?___fttol+3
  6784  12D8  0859               	movf	___fttol@lval+2,w
  6785  12D9  00D0               	movwf	?___fttol+2
  6786  12DA  0858               	movf	___fttol@lval+1,w
  6787  12DB  00CF               	movwf	?___fttol+1
  6788  12DC  0857               	movf	___fttol@lval,w
  6789  12DD  00CE               	movwf	?___fttol
  6790  12DE  0008               	return
  6791  12DF                     __end_of___fttol:	
  6792                           
  6793                           	psect	text15
  6794  1DB2                     __ptext15:	
  6795 ;; *************** function ___ftsub *****************
  6796 ;; Defined at:
  6797 ;;		line 18 in file "/opt/microchip/xc8/v1.33/sources/common/ftsub.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  f2              3   66[BANK0 ] float 
  6800 ;;  f1              3   69[BANK0 ] float 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;		None
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  3   66[BANK0 ] float 
  6805 ;; Registers used:
  6806 ;;		wreg, status,2, status,0, pclath, cstack
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6812 ;;      Params:         0       6       0       0       0
  6813 ;;      Locals:         0       0       0       0       0
  6814 ;;      Temps:          0       0       0       0       0
  6815 ;;      Totals:         0       6       0       0       0
  6816 ;;Total ram usage:        6 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    2
  6819 ;; This function calls:
  6820 ;;		___ftadd
  6821 ;; This function is called by:
  6822 ;;		_sprintf
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           
  6827                           ;psect for function ___ftsub
  6828  1DB2                     ___ftsub:	
  6829                           
  6830                           ;incstack = 0
  6831                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6832  1DB2  3080               	movlw	128
  6833  1DB3  1283               	bcf	3,5	;RP0=0, select bank0
  6834  1DB4  1303               	bcf	3,6	;RP1=0, select bank0
  6835  1DB5  06E4               	xorwf	___ftsub@f2+2,f
  6836  1DB6  0865               	movf	___ftsub@f1,w
  6837  1DB7  00D5               	movwf	___ftadd@f1
  6838  1DB8  0866               	movf	___ftsub@f1+1,w
  6839  1DB9  00D6               	movwf	___ftadd@f1+1
  6840  1DBA  0867               	movf	___ftsub@f1+2,w
  6841  1DBB  00D7               	movwf	___ftadd@f1+2
  6842  1DBC  0862               	movf	___ftsub@f2,w
  6843  1DBD  00D8               	movwf	___ftadd@f2
  6844  1DBE  0863               	movf	___ftsub@f2+1,w
  6845  1DBF  00D9               	movwf	___ftadd@f2+1
  6846  1DC0  0864               	movf	___ftsub@f2+2,w
  6847  1DC1  00DA               	movwf	___ftadd@f2+2
  6848  1DC2  160A  118A  25C5   	fcall	___ftadd
  6849  1DC5  1283               	bcf	3,5	;RP0=0, select bank0
  6850  1DC6  1303               	bcf	3,6	;RP1=0, select bank0
  6851  1DC7  0855               	movf	?___ftadd,w
  6852  1DC8  00E2               	movwf	?___ftsub
  6853  1DC9  0856               	movf	?___ftadd+1,w
  6854  1DCA  00E3               	movwf	?___ftsub+1
  6855  1DCB  0857               	movf	?___ftadd+2,w
  6856  1DCC  00E4               	movwf	?___ftsub+2
  6857  1DCD  0008               	return
  6858  1DCE                     __end_of___ftsub:	
  6859                           
  6860                           	psect	text16
  6861  15C5                     __ptext16:	
  6862 ;; *************** function ___ftadd *****************
  6863 ;; Defined at:
  6864 ;;		line 86 in file "/opt/microchip/xc8/v1.33/sources/common/ftadd.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  f1              3   53[BANK0 ] float 
  6867 ;;  f2              3   56[BANK0 ] float 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  exp1            1   65[BANK0 ] unsigned char 
  6870 ;;  exp2            1   64[BANK0 ] unsigned char 
  6871 ;;  sign            1   63[BANK0 ] unsigned char 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  3   53[BANK0 ] float 
  6874 ;; Registers used:
  6875 ;;		wreg, status,2, status,0, pclath, cstack
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6881 ;;      Params:         0       6       0       0       0
  6882 ;;      Locals:         0       3       0       0       0
  6883 ;;      Temps:          0       4       0       0       0
  6884 ;;      Totals:         0      13       0       0       0
  6885 ;;Total ram usage:       13 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    1
  6888 ;; This function calls:
  6889 ;;		___ftpack
  6890 ;; This function is called by:
  6891 ;;		_main
  6892 ;;		_sprintf
  6893 ;;		___ftsub
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           
  6898                           ;psect for function ___ftadd
  6899  15C5                     ___ftadd:	
  6900                           
  6901                           ;incstack = 0
  6902                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6903  15C5  1283               	bcf	3,5	;RP0=0, select bank0
  6904  15C6  1303               	bcf	3,6	;RP1=0, select bank0
  6905  15C7  0855               	movf	___ftadd@f1,w
  6906  15C8  00DB               	movwf	??___ftadd
  6907  15C9  0856               	movf	___ftadd@f1+1,w
  6908  15CA  00DC               	movwf	??___ftadd+1
  6909  15CB  0857               	movf	___ftadd@f1+2,w
  6910  15CC  00DD               	movwf	??___ftadd+2
  6911  15CD  1003               	clrc
  6912  15CE  0D5C               	rlf	??___ftadd+1,w
  6913  15CF  0D5D               	rlf	??___ftadd+2,w
  6914  15D0  00DE               	movwf	??___ftadd+3
  6915  15D1  085E               	movf	??___ftadd+3,w
  6916  15D2  00E1               	movwf	___ftadd@exp1
  6917  15D3  0858               	movf	___ftadd@f2,w
  6918  15D4  00DB               	movwf	??___ftadd
  6919  15D5  0859               	movf	___ftadd@f2+1,w
  6920  15D6  00DC               	movwf	??___ftadd+1
  6921  15D7  085A               	movf	___ftadd@f2+2,w
  6922  15D8  00DD               	movwf	??___ftadd+2
  6923  15D9  1003               	clrc
  6924  15DA  0D5C               	rlf	??___ftadd+1,w
  6925  15DB  0D5D               	rlf	??___ftadd+2,w
  6926  15DC  00DE               	movwf	??___ftadd+3
  6927  15DD  085E               	movf	??___ftadd+3,w
  6928  15DE  00E0               	movwf	___ftadd@exp2
  6929  15DF  0861               	movf	___ftadd@exp1,w
  6930  15E0  1903               	btfsc	3,2
  6931  15E1  2DEE               	goto	l2302
  6932  15E2  0860               	movf	___ftadd@exp2,w
  6933  15E3  0261               	subwf	___ftadd@exp1,w
  6934  15E4  1803               	skipnc
  6935  15E5  2DF5               	goto	l2306
  6936  15E6  0361               	decf	___ftadd@exp1,w
  6937  15E7  3AFF               	xorlw	255
  6938  15E8  0760               	addwf	___ftadd@exp2,w
  6939  15E9  00DB               	movwf	??___ftadd
  6940  15EA  3019               	movlw	25
  6941  15EB  025B               	subwf	??___ftadd,w
  6942  15EC  1C03               	skipc
  6943  15ED  2DF5               	goto	l2306
  6944  15EE                     l2302:	
  6945  15EE  0858               	movf	___ftadd@f2,w
  6946  15EF  00D5               	movwf	?___ftadd
  6947  15F0  0859               	movf	___ftadd@f2+1,w
  6948  15F1  00D6               	movwf	?___ftadd+1
  6949  15F2  085A               	movf	___ftadd@f2+2,w
  6950  15F3  00D7               	movwf	?___ftadd+2
  6951  15F4  0008               	return
  6952  15F5                     l2306:	
  6953  15F5  0860               	movf	___ftadd@exp2,w
  6954  15F6  1903               	btfsc	3,2
  6955  15F7  0008               	return
  6956  15F8  0861               	movf	___ftadd@exp1,w
  6957  15F9  0260               	subwf	___ftadd@exp2,w
  6958  15FA  1803               	skipnc
  6959  15FB  2E04               	goto	l2312
  6960  15FC  0360               	decf	___ftadd@exp2,w
  6961  15FD  3AFF               	xorlw	255
  6962  15FE  0761               	addwf	___ftadd@exp1,w
  6963  15FF  00DB               	movwf	??___ftadd
  6964  1600  3019               	movlw	25
  6965  1601  025B               	subwf	??___ftadd,w
  6966  1602  1803               	btfsc	3,0
  6967  1603  0008               	return
  6968  1604                     l2312:	
  6969  1604  3006               	movlw	6
  6970  1605  00DB               	movwf	??___ftadd
  6971  1606  085B               	movf	??___ftadd,w
  6972  1607  00DF               	movwf	___ftadd@sign
  6973  1608  1BD7               	btfsc	___ftadd@f1+2,7
  6974  1609  17DF               	bsf	___ftadd@sign,7
  6975  160A  1BDA               	btfsc	___ftadd@f2+2,7
  6976  160B  175F               	bsf	___ftadd@sign,6
  6977  160C  17D6               	bsf	___ftadd@f1+1,7
  6978  160D  30FF               	movlw	255
  6979  160E  05D5               	andwf	___ftadd@f1,f
  6980  160F  30FF               	movlw	255
  6981  1610  05D6               	andwf	___ftadd@f1+1,f
  6982  1611  3000               	movlw	0
  6983  1612  05D7               	andwf	___ftadd@f1+2,f
  6984  1613  17D9               	bsf	___ftadd@f2+1,7
  6985  1614  30FF               	movlw	255
  6986  1615  05D8               	andwf	___ftadd@f2,f
  6987  1616  30FF               	movlw	255
  6988  1617  05D9               	andwf	___ftadd@f2+1,f
  6989  1618  3000               	movlw	0
  6990  1619  05DA               	andwf	___ftadd@f2+2,f
  6991  161A  0860               	movf	___ftadd@exp2,w
  6992  161B  0261               	subwf	___ftadd@exp1,w
  6993  161C  1803               	skipnc
  6994  161D  2E44               	goto	l2334
  6995  161E                     l2324:	
  6996  161E  3001               	movlw	1
  6997  161F                     u2955:	
  6998  161F  1003               	clrc
  6999  1620  0DD8               	rlf	___ftadd@f2,f
  7000  1621  0DD9               	rlf	___ftadd@f2+1,f
  7001  1622  0DDA               	rlf	___ftadd@f2+2,f
  7002  1623  3EFF               	addlw	-1
  7003  1624  1D03               	skipz
  7004  1625  2E1F               	goto	u2955
  7005  1626  3001               	movlw	1
  7006  1627  02E0               	subwf	___ftadd@exp2,f
  7007  1628  0860               	movf	___ftadd@exp2,w
  7008  1629  0661               	xorwf	___ftadd@exp1,w
  7009  162A  1903               	skipnz
  7010  162B  2E3F               	goto	l2332
  7011  162C  3001               	movlw	1
  7012  162D  02DF               	subwf	___ftadd@sign,f
  7013  162E  085F               	movf	___ftadd@sign,w
  7014  162F  3907               	andlw	7
  7015  1630  1903               	btfsc	3,2
  7016  1631  2E3F               	goto	l2332
  7017  1632  2E1E               	goto	l2324
  7018  1633                     l2330:	
  7019  1633  3001               	movlw	1
  7020  1634                     u2985:	
  7021  1634  1003               	clrc
  7022  1635  0CD7               	rrf	___ftadd@f1+2,f
  7023  1636  0CD6               	rrf	___ftadd@f1+1,f
  7024  1637  0CD5               	rrf	___ftadd@f1,f
  7025  1638  3EFF               	addlw	-1
  7026  1639  1D03               	skipz
  7027  163A  2E34               	goto	u2985
  7028  163B  3001               	movlw	1
  7029  163C  00DB               	movwf	??___ftadd
  7030  163D  085B               	movf	??___ftadd,w
  7031  163E  07E1               	addwf	___ftadd@exp1,f
  7032  163F                     l2332:	
  7033  163F  0861               	movf	___ftadd@exp1,w
  7034  1640  0660               	xorwf	___ftadd@exp2,w
  7035  1641  1903               	btfsc	3,2
  7036  1642  2E6D               	goto	l749
  7037  1643  2E33               	goto	l2330
  7038  1644                     l2334:	
  7039  1644  0861               	movf	___ftadd@exp1,w
  7040  1645  0260               	subwf	___ftadd@exp2,w
  7041  1646  1803               	skipnc
  7042  1647  2E6D               	goto	l749
  7043  1648                     l2336:	
  7044  1648  3001               	movlw	1
  7045  1649                     u3015:	
  7046  1649  1003               	clrc
  7047  164A  0DD5               	rlf	___ftadd@f1,f
  7048  164B  0DD6               	rlf	___ftadd@f1+1,f
  7049  164C  0DD7               	rlf	___ftadd@f1+2,f
  7050  164D  3EFF               	addlw	-1
  7051  164E  1D03               	skipz
  7052  164F  2E49               	goto	u3015
  7053  1650  3001               	movlw	1
  7054  1651  02E1               	subwf	___ftadd@exp1,f
  7055  1652  0860               	movf	___ftadd@exp2,w
  7056  1653  0661               	xorwf	___ftadd@exp1,w
  7057  1654  1903               	skipnz
  7058  1655  2E69               	goto	l2344
  7059  1656  3001               	movlw	1
  7060  1657  02DF               	subwf	___ftadd@sign,f
  7061  1658  085F               	movf	___ftadd@sign,w
  7062  1659  3907               	andlw	7
  7063  165A  1903               	btfsc	3,2
  7064  165B  2E69               	goto	l2344
  7065  165C  2E48               	goto	l2336
  7066  165D                     l2342:	
  7067  165D  3001               	movlw	1
  7068  165E                     u3045:	
  7069  165E  1003               	clrc
  7070  165F  0CDA               	rrf	___ftadd@f2+2,f
  7071  1660  0CD9               	rrf	___ftadd@f2+1,f
  7072  1661  0CD8               	rrf	___ftadd@f2,f
  7073  1662  3EFF               	addlw	-1
  7074  1663  1D03               	skipz
  7075  1664  2E5E               	goto	u3045
  7076  1665  3001               	movlw	1
  7077  1666  00DB               	movwf	??___ftadd
  7078  1667  085B               	movf	??___ftadd,w
  7079  1668  07E0               	addwf	___ftadd@exp2,f
  7080  1669                     l2344:	
  7081  1669  0861               	movf	___ftadd@exp1,w
  7082  166A  0660               	xorwf	___ftadd@exp2,w
  7083  166B  1D03               	skipz
  7084  166C  2E5D               	goto	l2342
  7085  166D                     l749:	
  7086  166D  1FDF               	btfss	___ftadd@sign,7
  7087  166E  2E7F               	goto	l2348
  7088  166F  30FF               	movlw	255
  7089  1670  06D5               	xorwf	___ftadd@f1,f
  7090  1671  30FF               	movlw	255
  7091  1672  06D6               	xorwf	___ftadd@f1+1,f
  7092  1673  30FF               	movlw	255
  7093  1674  06D7               	xorwf	___ftadd@f1+2,f
  7094  1675  3001               	movlw	1
  7095  1676  07D5               	addwf	___ftadd@f1,f
  7096  1677  3000               	movlw	0
  7097  1678  1803               	skipnc
  7098  1679  3001               	movlw	1
  7099  167A  07D6               	addwf	___ftadd@f1+1,f
  7100  167B  3000               	movlw	0
  7101  167C  1803               	skipnc
  7102  167D  3001               	movlw	1
  7103  167E  07D7               	addwf	___ftadd@f1+2,f
  7104  167F                     l2348:	
  7105  167F  1F5F               	btfss	___ftadd@sign,6
  7106  1680  2E91               	goto	l2352
  7107  1681  30FF               	movlw	255
  7108  1682  06D8               	xorwf	___ftadd@f2,f
  7109  1683  30FF               	movlw	255
  7110  1684  06D9               	xorwf	___ftadd@f2+1,f
  7111  1685  30FF               	movlw	255
  7112  1686  06DA               	xorwf	___ftadd@f2+2,f
  7113  1687  3001               	movlw	1
  7114  1688  07D8               	addwf	___ftadd@f2,f
  7115  1689  3000               	movlw	0
  7116  168A  1803               	skipnc
  7117  168B  3001               	movlw	1
  7118  168C  07D9               	addwf	___ftadd@f2+1,f
  7119  168D  3000               	movlw	0
  7120  168E  1803               	skipnc
  7121  168F  3001               	movlw	1
  7122  1690  07DA               	addwf	___ftadd@f2+2,f
  7123  1691                     l2352:	
  7124  1691  01DF               	clrf	___ftadd@sign
  7125  1692  0855               	movf	___ftadd@f1,w
  7126  1693  07D8               	addwf	___ftadd@f2,f
  7127  1694  0856               	movf	___ftadd@f1+1,w
  7128  1695  1103               	clrz
  7129  1696  1803               	skipnc
  7130  1697  0A56               	incf	___ftadd@f1+1,w
  7131  1698  1D03               	btfss	3,2
  7132  1699  07D9               	addwf	___ftadd@f2+1,f
  7133  169A  0857               	movf	___ftadd@f1+2,w
  7134  169B  1103               	clrz
  7135  169C  1803               	skipnc
  7136  169D  0A57               	incf	___ftadd@f1+2,w
  7137  169E  1D03               	btfss	3,2
  7138  169F  07DA               	addwf	___ftadd@f2+2,f
  7139  16A0  1FDA               	btfss	___ftadd@f2+2,7
  7140  16A1  2EB4               	goto	l2362
  7141  16A2  30FF               	movlw	255
  7142  16A3  06D8               	xorwf	___ftadd@f2,f
  7143  16A4  30FF               	movlw	255
  7144  16A5  06D9               	xorwf	___ftadd@f2+1,f
  7145  16A6  30FF               	movlw	255
  7146  16A7  06DA               	xorwf	___ftadd@f2+2,f
  7147  16A8  3001               	movlw	1
  7148  16A9  07D8               	addwf	___ftadd@f2,f
  7149  16AA  3000               	movlw	0
  7150  16AB  1803               	skipnc
  7151  16AC  3001               	movlw	1
  7152  16AD  07D9               	addwf	___ftadd@f2+1,f
  7153  16AE  3000               	movlw	0
  7154  16AF  1803               	skipnc
  7155  16B0  3001               	movlw	1
  7156  16B1  07DA               	addwf	___ftadd@f2+2,f
  7157  16B2  01DF               	clrf	___ftadd@sign
  7158  16B3  0ADF               	incf	___ftadd@sign,f
  7159  16B4                     l2362:	
  7160  16B4  0858               	movf	___ftadd@f2,w
  7161  16B5  00F0               	movwf	___ftpack@arg
  7162  16B6  0859               	movf	___ftadd@f2+1,w
  7163  16B7  00F1               	movwf	___ftpack@arg+1
  7164  16B8  085A               	movf	___ftadd@f2+2,w
  7165  16B9  00F2               	movwf	___ftpack@arg+2
  7166  16BA  0861               	movf	___ftadd@exp1,w
  7167  16BB  00DB               	movwf	??___ftadd
  7168  16BC  085B               	movf	??___ftadd,w
  7169  16BD  00F3               	movwf	___ftpack@exp
  7170  16BE  085F               	movf	___ftadd@sign,w
  7171  16BF  00DC               	movwf	??___ftadd+1
  7172  16C0  085C               	movf	??___ftadd+1,w
  7173  16C1  00F4               	movwf	___ftpack@sign
  7174  16C2  160A  118A  2170   	fcall	___ftpack
  7175  16C5  0870               	movf	?___ftpack,w
  7176  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  7177  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  7178  16C8  00D5               	movwf	?___ftadd
  7179  16C9  0871               	movf	?___ftpack+1,w
  7180  16CA  00D6               	movwf	?___ftadd+1
  7181  16CB  0872               	movf	?___ftpack+2,w
  7182  16CC  00D7               	movwf	?___ftadd+2
  7183  16CD  0008               	return
  7184  16CE                     __end_of___ftadd:	
  7185                           
  7186                           	psect	text17
  7187  1170                     __ptext17:	
  7188 ;; *************** function ___ftpack *****************
  7189 ;; Defined at:
  7190 ;;		line 62 in file "/opt/microchip/xc8/v1.33/sources/common/float.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  arg             3    0[COMMON] unsigned um
  7193 ;;  exp             1    3[COMMON] unsigned char 
  7194 ;;  sign            1    4[COMMON] unsigned char 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;		None
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  3    0[COMMON] float 
  7199 ;; Registers used:
  7200 ;;		wreg, status,2, status,0
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7206 ;;      Params:         5       0       0       0       0
  7207 ;;      Locals:         0       0       0       0       0
  7208 ;;      Temps:          3       0       0       0       0
  7209 ;;      Totals:         8       0       0       0       0
  7210 ;;Total ram usage:        8 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		___ftadd
  7216 ;;		___ftmul
  7217 ;;		___lltoft
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           
  7222                           ;psect for function ___ftpack
  7223  1170                     ___ftpack:	
  7224                           
  7225                           ;incstack = 0
  7226                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7227  1170  0873               	movf	___ftpack@exp,w
  7228  1171  1903               	btfsc	3,2
  7229  1172  2978               	goto	l2146
  7230  1173  0872               	movf	___ftpack@arg+2,w
  7231  1174  0471               	iorwf	___ftpack@arg+1,w
  7232  1175  0470               	iorwf	___ftpack@arg,w
  7233  1176  1D03               	skipz
  7234  1177  298B               	goto	l2152
  7235  1178                     l2146:	
  7236  1178  3000               	movlw	0
  7237  1179  00F0               	movwf	?___ftpack
  7238  117A  3000               	movlw	0
  7239  117B  00F1               	movwf	?___ftpack+1
  7240  117C  3000               	movlw	0
  7241  117D  00F2               	movwf	?___ftpack+2
  7242  117E  0008               	return
  7243  117F                     l2150:	
  7244  117F  3001               	movlw	1
  7245  1180  00F5               	movwf	??___ftpack
  7246  1181  0875               	movf	??___ftpack,w
  7247  1182  07F3               	addwf	___ftpack@exp,f
  7248  1183  3001               	movlw	1
  7249  1184                     u2445:	
  7250  1184  1003               	clrc
  7251  1185  0CF2               	rrf	___ftpack@arg+2,f
  7252  1186  0CF1               	rrf	___ftpack@arg+1,f
  7253  1187  0CF0               	rrf	___ftpack@arg,f
  7254  1188  3EFF               	addlw	-1
  7255  1189  1D03               	skipz
  7256  118A  2984               	goto	u2445
  7257  118B                     l2152:	
  7258  118B  30FE               	movlw	254
  7259  118C  0572               	andwf	___ftpack@arg+2,w
  7260  118D  1903               	btfsc	3,2
  7261  118E  29A6               	goto	l720
  7262  118F  297F               	goto	l2150
  7263  1190                     l2154:	
  7264  1190  3001               	movlw	1
  7265  1191  00F5               	movwf	??___ftpack
  7266  1192  0875               	movf	??___ftpack,w
  7267  1193  07F3               	addwf	___ftpack@exp,f
  7268  1194  3001               	movlw	1
  7269  1195  07F0               	addwf	___ftpack@arg,f
  7270  1196  3000               	movlw	0
  7271  1197  1803               	skipnc
  7272  1198  3001               	movlw	1
  7273  1199  07F1               	addwf	___ftpack@arg+1,f
  7274  119A  3000               	movlw	0
  7275  119B  1803               	skipnc
  7276  119C  3001               	movlw	1
  7277  119D  07F2               	addwf	___ftpack@arg+2,f
  7278  119E  3001               	movlw	1
  7279  119F                     u2465:	
  7280  119F  1003               	clrc
  7281  11A0  0CF2               	rrf	___ftpack@arg+2,f
  7282  11A1  0CF1               	rrf	___ftpack@arg+1,f
  7283  11A2  0CF0               	rrf	___ftpack@arg,f
  7284  11A3  3EFF               	addlw	-1
  7285  11A4  1D03               	skipz
  7286  11A5  299F               	goto	u2465
  7287  11A6                     l720:	
  7288  11A6  30FF               	movlw	255
  7289  11A7  0572               	andwf	___ftpack@arg+2,w
  7290  11A8  1903               	btfsc	3,2
  7291  11A9  29B5               	goto	l2162
  7292  11AA  2990               	goto	l2154
  7293  11AB                     l2160:	
  7294  11AB  3001               	movlw	1
  7295  11AC  02F3               	subwf	___ftpack@exp,f
  7296  11AD  3001               	movlw	1
  7297  11AE                     u2485:	
  7298  11AE  1003               	clrc
  7299  11AF  0DF0               	rlf	___ftpack@arg,f
  7300  11B0  0DF1               	rlf	___ftpack@arg+1,f
  7301  11B1  0DF2               	rlf	___ftpack@arg+2,f
  7302  11B2  3EFF               	addlw	-1
  7303  11B3  1D03               	skipz
  7304  11B4  29AE               	goto	u2485
  7305  11B5                     l2162:	
  7306  11B5  1FF1               	btfss	___ftpack@arg+1,7
  7307  11B6  29AB               	goto	l2160
  7308  11B7  1873               	btfsc	___ftpack@exp,0
  7309  11B8  29BF               	goto	l726
  7310  11B9  30FF               	movlw	255
  7311  11BA  05F0               	andwf	___ftpack@arg,f
  7312  11BB  307F               	movlw	127
  7313  11BC  05F1               	andwf	___ftpack@arg+1,f
  7314  11BD  30FF               	movlw	255
  7315  11BE  05F2               	andwf	___ftpack@arg+2,f
  7316  11BF                     l726:	
  7317  11BF  1003               	clrc
  7318  11C0  0CF3               	rrf	___ftpack@exp,f
  7319  11C1  0873               	movf	___ftpack@exp,w
  7320  11C2  00F5               	movwf	??___ftpack
  7321  11C3  01F6               	clrf	??___ftpack+1
  7322  11C4  01F7               	clrf	??___ftpack+2
  7323  11C5  3010               	movlw	16
  7324  11C6                     u2515:	
  7325  11C6  1003               	clrc
  7326  11C7  0DF5               	rlf	??___ftpack,f
  7327  11C8  0DF6               	rlf	??___ftpack+1,f
  7328  11C9  0DF7               	rlf	??___ftpack+2,f
  7329  11CA  3EFF               	addlw	-1
  7330  11CB  1D03               	skipz
  7331  11CC  29C6               	goto	u2515
  7332  11CD  0875               	movf	??___ftpack,w
  7333  11CE  04F0               	iorwf	___ftpack@arg,f
  7334  11CF  0876               	movf	??___ftpack+1,w
  7335  11D0  04F1               	iorwf	___ftpack@arg+1,f
  7336  11D1  0877               	movf	??___ftpack+2,w
  7337  11D2  04F2               	iorwf	___ftpack@arg+2,f
  7338  11D3  0874               	movf	___ftpack@sign,w
  7339  11D4  1903               	btfsc	3,2
  7340  11D5  0008               	return
  7341  11D6  17F2               	bsf	___ftpack@arg+2,7
  7342  11D7  0008               	return
  7343  11D8                     __end_of___ftpack:	
  7344                           
  7345                           	psect	text18
  7346  1D7B                     __ptext18:	
  7347 ;; *************** function ___ftneg *****************
  7348 ;; Defined at:
  7349 ;;		line 15 in file "/opt/microchip/xc8/v1.33/sources/common/ftneg.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  f1              3    7[BANK0 ] float 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  3    7[BANK0 ] float 
  7356 ;; Registers used:
  7357 ;;		wreg
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7363 ;;      Params:         0       3       0       0       0
  7364 ;;      Locals:         0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0
  7366 ;;      Totals:         0       3       0       0       0
  7367 ;;Total ram usage:        3 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; This function calls:
  7370 ;;		Nothing
  7371 ;; This function is called by:
  7372 ;;		_main
  7373 ;;		_sprintf
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           
  7378                           ;psect for function ___ftneg
  7379  1D7B                     ___ftneg:	
  7380                           
  7381                           ;incstack = 0
  7382                           ; Regs used in ___ftneg: [wreg]
  7383  1D7B  1283               	bcf	3,5	;RP0=0, select bank0
  7384  1D7C  1303               	bcf	3,6	;RP1=0, select bank0
  7385  1D7D  0829               	movf	___ftneg@f1+2,w
  7386  1D7E  0428               	iorwf	___ftneg@f1+1,w
  7387  1D7F  0427               	iorwf	___ftneg@f1,w
  7388  1D80  1903               	skipnz
  7389  1D81  0008               	return
  7390  1D82  3080               	movlw	128
  7391  1D83  06A9               	xorwf	___ftneg@f1+2,f
  7392  1D84  0008               	return
  7393  1D85                     __end_of___ftneg:	
  7394                           
  7395                           	psect	text19
  7396  1111                     __ptext19:	
  7397 ;; *************** function ___ftge *****************
  7398 ;; Defined at:
  7399 ;;		line 4 in file "/opt/microchip/xc8/v1.33/sources/common/ftge.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  ff1             3    7[BANK0 ] float 
  7402 ;;  ff2             3   10[BANK0 ] float 
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;		None
  7405 ;; Return value:  Size  Location     Type
  7406 ;;		None               void
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7414 ;;      Params:         0       6       0       0       0
  7415 ;;      Locals:         0       0       0       0       0
  7416 ;;      Temps:          0       6       0       0       0
  7417 ;;      Totals:         0      12       0       0       0
  7418 ;;Total ram usage:       12 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; This function calls:
  7421 ;;		Nothing
  7422 ;; This function is called by:
  7423 ;;		_main
  7424 ;;		_sprintf
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           
  7429                           ;psect for function ___ftge
  7430  1111                     ___ftge:	
  7431                           
  7432                           ;incstack = 0
  7433                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7434  1111  1283               	bcf	3,5	;RP0=0, select bank0
  7435  1112  1303               	bcf	3,6	;RP1=0, select bank0
  7436  1113  1FA9               	btfss	___ftge@ff1+2,7
  7437  1114  293A               	goto	l2640
  7438  1115  3000               	movlw	0
  7439  1116  00AD               	movwf	??___ftge
  7440  1117  3000               	movlw	0
  7441  1118  00AE               	movwf	??___ftge+1
  7442  1119  3080               	movlw	128
  7443  111A  00AF               	movwf	??___ftge+2
  7444  111B  0927               	comf	___ftge@ff1,w
  7445  111C  00B0               	movwf	??___ftge+3
  7446  111D  0928               	comf	___ftge@ff1+1,w
  7447  111E  00B1               	movwf	??___ftge+4
  7448  111F  0929               	comf	___ftge@ff1+2,w
  7449  1120  00B2               	movwf	??___ftge+5
  7450  1121  0AB0               	incf	??___ftge+3,f
  7451  1122  1903               	skipnz
  7452  1123  0AB1               	incf	??___ftge+4,f
  7453  1124  1903               	skipnz
  7454  1125  0AB2               	incf	??___ftge+5,f
  7455  1126  0830               	movf	??___ftge+3,w
  7456  1127  07AD               	addwf	??___ftge,f
  7457  1128  0831               	movf	??___ftge+4,w
  7458  1129  1803               	skipnc
  7459  112A  0F31               	incfsz	??___ftge+4,w
  7460  112B  292D               	goto	u3721
  7461  112C  292E               	goto	u3722
  7462  112D                     u3721:	
  7463  112D  07AE               	addwf	??___ftge+1,f
  7464  112E                     u3722:	
  7465  112E  0832               	movf	??___ftge+5,w
  7466  112F  1803               	skipnc
  7467  1130  0F32               	incfsz	??___ftge+5,w
  7468  1131  2933               	goto	u3723
  7469  1132  2934               	goto	u3724
  7470  1133                     u3723:	
  7471  1133  07AF               	addwf	??___ftge+2,f
  7472  1134                     u3724:	
  7473  1134  082D               	movf	??___ftge,w
  7474  1135  00A7               	movwf	___ftge@ff1
  7475  1136  082E               	movf	??___ftge+1,w
  7476  1137  00A8               	movwf	___ftge@ff1+1
  7477  1138  082F               	movf	??___ftge+2,w
  7478  1139  00A9               	movwf	___ftge@ff1+2
  7479  113A                     l2640:	
  7480  113A  1FAC               	btfss	___ftge@ff2+2,7
  7481  113B  2961               	goto	l2644
  7482  113C  3000               	movlw	0
  7483  113D  00AD               	movwf	??___ftge
  7484  113E  3000               	movlw	0
  7485  113F  00AE               	movwf	??___ftge+1
  7486  1140  3080               	movlw	128
  7487  1141  00AF               	movwf	??___ftge+2
  7488  1142  092A               	comf	___ftge@ff2,w
  7489  1143  00B0               	movwf	??___ftge+3
  7490  1144  092B               	comf	___ftge@ff2+1,w
  7491  1145  00B1               	movwf	??___ftge+4
  7492  1146  092C               	comf	___ftge@ff2+2,w
  7493  1147  00B2               	movwf	??___ftge+5
  7494  1148  0AB0               	incf	??___ftge+3,f
  7495  1149  1903               	skipnz
  7496  114A  0AB1               	incf	??___ftge+4,f
  7497  114B  1903               	skipnz
  7498  114C  0AB2               	incf	??___ftge+5,f
  7499  114D  0830               	movf	??___ftge+3,w
  7500  114E  07AD               	addwf	??___ftge,f
  7501  114F  0831               	movf	??___ftge+4,w
  7502  1150  1803               	skipnc
  7503  1151  0F31               	incfsz	??___ftge+4,w
  7504  1152  2954               	goto	u3741
  7505  1153  2955               	goto	u3742
  7506  1154                     u3741:	
  7507  1154  07AE               	addwf	??___ftge+1,f
  7508  1155                     u3742:	
  7509  1155  0832               	movf	??___ftge+5,w
  7510  1156  1803               	skipnc
  7511  1157  0F32               	incfsz	??___ftge+5,w
  7512  1158  295A               	goto	u3743
  7513  1159  295B               	goto	u3744
  7514  115A                     u3743:	
  7515  115A  07AF               	addwf	??___ftge+2,f
  7516  115B                     u3744:	
  7517  115B  082D               	movf	??___ftge,w
  7518  115C  00AA               	movwf	___ftge@ff2
  7519  115D  082E               	movf	??___ftge+1,w
  7520  115E  00AB               	movwf	___ftge@ff2+1
  7521  115F  082F               	movf	??___ftge+2,w
  7522  1160  00AC               	movwf	___ftge@ff2+2
  7523  1161                     l2644:	
  7524  1161  3080               	movlw	128
  7525  1162  06A9               	xorwf	___ftge@ff1+2,f
  7526  1163  3080               	movlw	128
  7527  1164  06AC               	xorwf	___ftge@ff2+2,f
  7528  1165  082C               	movf	___ftge@ff2+2,w
  7529  1166  0229               	subwf	___ftge@ff1+2,w
  7530  1167  1D03               	skipz
  7531  1168  0008               	return
  7532  1169  082B               	movf	___ftge@ff2+1,w
  7533  116A  0228               	subwf	___ftge@ff1+1,w
  7534  116B  1D03               	skipz
  7535  116C  0008               	return
  7536  116D  082A               	movf	___ftge@ff2,w
  7537  116E  0227               	subwf	___ftge@ff1,w
  7538  116F  0008               	return
  7539  1170                     __end_of___ftge:	
  7540                           
  7541                           	psect	text20
  7542  1DED                     __ptext20:	
  7543 ;; *************** function _LCD_puts *****************
  7544 ;; Defined at:
  7545 ;;		line 133 in file "lcd.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  a               1    wreg     PTR unsigned char 
  7548 ;;		 -> main@current_str(45), 
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;  a               1   11[COMMON] PTR unsigned char 
  7551 ;;		 -> main@current_str(45), 
  7552 ;;  i               2    9[COMMON] int 
  7553 ;; Return value:  Size  Location     Type
  7554 ;;		None               void
  7555 ;; Registers used:
  7556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7562 ;;      Params:         0       0       0       0       0
  7563 ;;      Locals:         3       0       0       0       0
  7564 ;;      Temps:          1       0       0       0       0
  7565 ;;      Totals:         4       0       0       0       0
  7566 ;;Total ram usage:        4 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    2
  7569 ;; This function calls:
  7570 ;;		_LCD_putc
  7571 ;; This function is called by:
  7572 ;;		_main
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           
  7577                           ;psect for function _LCD_puts
  7578  1DED                     _LCD_puts:	
  7579                           
  7580                           ;incstack = 0
  7581                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7582                           ;LCD_puts@a stored from wreg
  7583  1DED  00FB               	movwf	LCD_puts@a
  7584                           
  7585                           ;lcd.c: 135: for ( int i = 0; a[i] != '\0'; ++i ) {
  7586  1DEE  01F9               	clrf	LCD_puts@i
  7587  1DEF  01FA               	clrf	LCD_puts@i+1
  7588  1DF0                     l3120:	
  7589  1DF0  0879               	movf	LCD_puts@i,w
  7590  1DF1  077B               	addwf	LCD_puts@a,w
  7591  1DF2  00F8               	movwf	??_LCD_puts
  7592  1DF3  0878               	movf	??_LCD_puts,w
  7593  1DF4  0084               	movwf	4
  7594  1DF5  1783               	bsf	3,7	;select IRP bank2
  7595  1DF6  0880               	movf	0,f
  7596  1DF7  1903               	btfsc	3,2
  7597  1DF8  0008               	return
  7598                           
  7599                           ;lcd.c: 136: LCD_putc(a[i]);
  7600  1DF9  0879               	movf	LCD_puts@i,w
  7601  1DFA  077B               	addwf	LCD_puts@a,w
  7602  1DFB  00F8               	movwf	??_LCD_puts
  7603  1DFC  0878               	movf	??_LCD_puts,w
  7604  1DFD  0084               	movwf	4
  7605  1DFE  1783               	bsf	3,7	;select IRP bank2
  7606  1DFF  0800               	movf	0,w
  7607  1E00  160A  118A  22DF  160A  158A  	fcall	_LCD_putc
  7608  1E05  3001               	movlw	1
  7609  1E06  07F9               	addwf	LCD_puts@i,f
  7610  1E07  1803               	skipnc
  7611  1E08  0AFA               	incf	LCD_puts@i+1,f
  7612  1E09  3000               	movlw	0
  7613  1E0A  07FA               	addwf	LCD_puts@i+1,f
  7614  1E0B  2DF0               	goto	l3120
  7615  1E0C                     __end_of_LCD_puts:	
  7616                           
  7617                           	psect	text21
  7618  1E0C                     __ptext21:	
  7619 ;; *************** function _LCD_putrs *****************
  7620 ;; Defined at:
  7621 ;;		line 141 in file "lcd.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  a               1    wreg     PTR const unsigned char 
  7624 ;;		 -> STR_7(21), STR_6(21), STR_5(21), STR_2(21), 
  7625 ;;		 -> STR_1(21), 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  a               1   10[COMMON] PTR const unsigned char 
  7628 ;;		 -> STR_7(21), STR_6(21), STR_5(21), STR_2(21), 
  7629 ;;		 -> STR_1(21), 
  7630 ;;  i               2    8[COMMON] int 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;		None               void
  7633 ;; Registers used:
  7634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7640 ;;      Params:         0       0       0       0       0
  7641 ;;      Locals:         3       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0
  7643 ;;      Totals:         3       0       0       0       0
  7644 ;;Total ram usage:        3 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    2
  7647 ;; This function calls:
  7648 ;;		_LCD_putc
  7649 ;; This function is called by:
  7650 ;;		_main
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           
  7655                           ;psect for function _LCD_putrs
  7656  1E0C                     _LCD_putrs:	
  7657                           
  7658                           ;incstack = 0
  7659                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7660                           ;LCD_putrs@a stored from wreg
  7661  1E0C  00FA               	movwf	LCD_putrs@a
  7662                           
  7663                           ;lcd.c: 143: for ( int i = 0; a[i] != '\0'; ++i ) {
  7664  1E0D  01F8               	clrf	LCD_putrs@i
  7665  1E0E  01F9               	clrf	LCD_putrs@i+1
  7666  1E0F                     l2838:	
  7667  1E0F  0878               	movf	LCD_putrs@i,w
  7668  1E10  077A               	addwf	LCD_putrs@a,w
  7669  1E11  0084               	movwf	4
  7670  1E12  160A  118A  2000  160A  158A  	fcall	stringdir
  7671  1E17  3800               	iorlw	0
  7672  1E18  1903               	btfsc	3,2
  7673  1E19  0008               	return
  7674                           
  7675                           ;lcd.c: 144: LCD_putc(a[i]);
  7676  1E1A  0878               	movf	LCD_putrs@i,w
  7677  1E1B  077A               	addwf	LCD_putrs@a,w
  7678  1E1C  0084               	movwf	4
  7679  1E1D  160A  118A  2000  160A  158A  	fcall	stringdir
  7680  1E22  160A  118A  22DF  160A  158A  	fcall	_LCD_putc
  7681  1E27  3001               	movlw	1
  7682  1E28  07F8               	addwf	LCD_putrs@i,f
  7683  1E29  1803               	skipnc
  7684  1E2A  0AF9               	incf	LCD_putrs@i+1,f
  7685  1E2B  3000               	movlw	0
  7686  1E2C  07F9               	addwf	LCD_putrs@i+1,f
  7687  1E2D  2E0F               	goto	l2838
  7688  1E2E                     __end_of_LCD_putrs:	
  7689                           
  7690                           	psect	text22
  7691  12DF                     __ptext22:	
  7692 ;; *************** function _LCD_putc *****************
  7693 ;; Defined at:
  7694 ;;		line 116 in file "lcd.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;  c               1    wreg     unsigned char 
  7697 ;; Auto vars:     Size  Location     Type
  7698 ;;  c               1    7[COMMON] unsigned char 
  7699 ;; Return value:  Size  Location     Type
  7700 ;;		None               void
  7701 ;; Registers used:
  7702 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7708 ;;      Params:         0       0       0       0       0
  7709 ;;      Locals:         1       0       0       0       0
  7710 ;;      Temps:          3       0       0       0       0
  7711 ;;      Totals:         4       0       0       0       0
  7712 ;;Total ram usage:        4 bytes
  7713 ;; Hardware stack levels used:    1
  7714 ;; Hardware stack levels required when called:    1
  7715 ;; This function calls:
  7716 ;;		_LCD_Out
  7717 ;; This function is called by:
  7718 ;;		_LCD_puts
  7719 ;;		_LCD_putrs
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           
  7724                           ;psect for function _LCD_putc
  7725  12DF                     _LCD_putc:	
  7726                           
  7727                           ;incstack = 0
  7728                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7729                           ;LCD_putc@c stored from wreg
  7730  12DF  00F7               	movwf	LCD_putc@c
  7731                           
  7732                           ;lcd.c: 118: *(lcd.PORT) |= 1 << lcd.RS;
  7733  12E0  3001               	movlw	1
  7734  12E1  00F4               	movwf	??_LCD_putc
  7735  12E2  1683               	bsf	3,5	;RP0=1, select bank3
  7736  12E3  1703               	bsf	3,6	;RP1=1, select bank3
  7737  12E4  085B               	movf	(_lcd^(0+384)+2),w
  7738  12E5  3907               	andlw	7
  7739  12E6  3E01               	addlw	1
  7740  12E7  2AEA               	goto	u3274
  7741  12E8                     u3275:	
  7742  12E8  1003               	clrc
  7743  12E9  0DF4               	rlf	??_LCD_putc,f
  7744  12EA                     u3274:	
  7745  12EA  3EFF               	addlw	-1
  7746  12EB  1D03               	skipz
  7747  12EC  2AE8               	goto	u3275
  7748  12ED  0874               	movf	??_LCD_putc,w
  7749  12EE  00F5               	movwf	??_LCD_putc+1
  7750  12EF  0859               	movf	_lcd^(0+384),w
  7751  12F0  0084               	movwf	4
  7752  12F1  1783               	bsf	3,7
  7753  12F2  1C5A               	btfss	(_lcd+1)^(0+384),0
  7754  12F3  1383               	bcf	3,7
  7755  12F4  0875               	movf	??_LCD_putc+1,w
  7756  12F5  0480               	iorwf	0,f
  7757                           
  7758                           ;lcd.c: 119: LCD_Out((c & 0xF0) >> 4);
  7759  12F6  0877               	movf	LCD_putc@c,w
  7760  12F7  00F4               	movwf	??_LCD_putc
  7761  12F8  3004               	movlw	4
  7762  12F9                     u3285:	
  7763  12F9  1003               	clrc
  7764  12FA  0CF4               	rrf	??_LCD_putc,f
  7765  12FB  3EFF               	addlw	-1
  7766  12FC  1D03               	skipz
  7767  12FD  2AF9               	goto	u3285
  7768  12FE  0874               	movf	??_LCD_putc,w
  7769  12FF  390F               	andlw	15
  7770  1300  160A  118A  2430  160A  118A  	fcall	_LCD_Out
  7771                           
  7772                           ;lcd.c: 121: *(lcd.PORT) |= 1 << lcd.EN;
  7773  1305  3001               	movlw	1
  7774  1306  00F4               	movwf	??_LCD_putc
  7775  1307  1683               	bsf	3,5	;RP0=1, select bank3
  7776  1308  1703               	bsf	3,6	;RP1=1, select bank3
  7777  1309  0C5B               	rrf	(_lcd^(0+384)+2),w
  7778  130A  00F5               	movwf	??_LCD_putc+1
  7779  130B  0CF5               	rrf	??_LCD_putc+1,f
  7780  130C  0C75               	rrf	??_LCD_putc+1,w
  7781  130D  3907               	andlw	7
  7782  130E  3E01               	addlw	1
  7783  130F  2B12               	goto	u3294
  7784  1310                     u3295:	
  7785  1310  1003               	clrc
  7786  1311  0DF4               	rlf	??_LCD_putc,f
  7787  1312                     u3294:	
  7788  1312  3EFF               	addlw	-1
  7789  1313  1D03               	skipz
  7790  1314  2B10               	goto	u3295
  7791  1315  0874               	movf	??_LCD_putc,w
  7792  1316  00F6               	movwf	??_LCD_putc+2
  7793  1317  0859               	movf	_lcd^(0+384),w
  7794  1318  0084               	movwf	4
  7795  1319  1783               	bsf	3,7
  7796  131A  1C5A               	btfss	(_lcd+1)^(0+384),0
  7797  131B  1383               	bcf	3,7
  7798  131C  0876               	movf	??_LCD_putc+2,w
  7799  131D  0480               	iorwf	0,f
  7800                           
  7801                           ;lcd.c: 122: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7802  131E  301A               	movlw	26
  7803  131F  00F4               	movwf	??_LCD_putc
  7804  1320                     u4877:	
  7805  1320  0BF4               	decfsz	??_LCD_putc,f
  7806  1321  2B20               	goto	u4877
  7807  1322  0000               	nop
  7808                           
  7809                           ;lcd.c: 123: *(lcd.PORT) &= ~(1 << lcd.EN);
  7810  1323  3001               	movlw	1
  7811  1324  00F4               	movwf	??_LCD_putc
  7812  1325  1683               	bsf	3,5	;RP0=1, select bank3
  7813  1326  1703               	bsf	3,6	;RP1=1, select bank3
  7814  1327  0C5B               	rrf	(_lcd^(0+384)+2),w
  7815  1328  00F5               	movwf	??_LCD_putc+1
  7816  1329  0CF5               	rrf	??_LCD_putc+1,f
  7817  132A  0C75               	rrf	??_LCD_putc+1,w
  7818  132B  3907               	andlw	7
  7819  132C  3E01               	addlw	1
  7820  132D  2B30               	goto	u3304
  7821  132E                     u3305:	
  7822  132E  1003               	clrc
  7823  132F  0DF4               	rlf	??_LCD_putc,f
  7824  1330                     u3304:	
  7825  1330  3EFF               	addlw	-1
  7826  1331  1D03               	skipz
  7827  1332  2B2E               	goto	u3305
  7828  1333  0874               	movf	??_LCD_putc,w
  7829  1334  3AFF               	xorlw	255
  7830  1335  00F6               	movwf	??_LCD_putc+2
  7831  1336  0859               	movf	_lcd^(0+384),w
  7832  1337  0084               	movwf	4
  7833  1338  1783               	bsf	3,7
  7834  1339  1C5A               	btfss	(_lcd+1)^(0+384),0
  7835  133A  1383               	bcf	3,7
  7836  133B  0876               	movf	??_LCD_putc+2,w
  7837  133C  0580               	andwf	0,f
  7838                           
  7839                           ;lcd.c: 125: LCD_Out(c & 0x0F);
  7840  133D  0877               	movf	LCD_putc@c,w
  7841  133E  390F               	andlw	15
  7842  133F  160A  118A  2430  160A  118A  	fcall	_LCD_Out
  7843                           
  7844                           ;lcd.c: 127: *(lcd.PORT) |= 1 << lcd.EN;
  7845  1344  3001               	movlw	1
  7846  1345  00F4               	movwf	??_LCD_putc
  7847  1346  1683               	bsf	3,5	;RP0=1, select bank3
  7848  1347  1703               	bsf	3,6	;RP1=1, select bank3
  7849  1348  0C5B               	rrf	(_lcd^(0+384)+2),w
  7850  1349  00F5               	movwf	??_LCD_putc+1
  7851  134A  0CF5               	rrf	??_LCD_putc+1,f
  7852  134B  0C75               	rrf	??_LCD_putc+1,w
  7853  134C  3907               	andlw	7
  7854  134D  3E01               	addlw	1
  7855  134E  2B51               	goto	u3314
  7856  134F                     u3315:	
  7857  134F  1003               	clrc
  7858  1350  0DF4               	rlf	??_LCD_putc,f
  7859  1351                     u3314:	
  7860  1351  3EFF               	addlw	-1
  7861  1352  1D03               	skipz
  7862  1353  2B4F               	goto	u3315
  7863  1354  0874               	movf	??_LCD_putc,w
  7864  1355  00F6               	movwf	??_LCD_putc+2
  7865  1356  0859               	movf	_lcd^(0+384),w
  7866  1357  0084               	movwf	4
  7867  1358  1783               	bsf	3,7
  7868  1359  1C5A               	btfss	(_lcd+1)^(0+384),0
  7869  135A  1383               	bcf	3,7
  7870  135B  0876               	movf	??_LCD_putc+2,w
  7871  135C  0480               	iorwf	0,f
  7872                           
  7873                           ;lcd.c: 128: _delay((unsigned long)((40)*(8000000/4000000.0)));
  7874  135D  301A               	movlw	26
  7875  135E  00F4               	movwf	??_LCD_putc
  7876  135F                     u4887:	
  7877  135F  0BF4               	decfsz	??_LCD_putc,f
  7878  1360  2B5F               	goto	u4887
  7879  1361  0000               	nop
  7880                           
  7881                           ;lcd.c: 129: *(lcd.PORT) &= ~(1 << lcd.EN);
  7882  1362  3001               	movlw	1
  7883  1363  00F4               	movwf	??_LCD_putc
  7884  1364  1683               	bsf	3,5	;RP0=1, select bank3
  7885  1365  1703               	bsf	3,6	;RP1=1, select bank3
  7886  1366  0C5B               	rrf	(_lcd^(0+384)+2),w
  7887  1367  00F5               	movwf	??_LCD_putc+1
  7888  1368  0CF5               	rrf	??_LCD_putc+1,f
  7889  1369  0C75               	rrf	??_LCD_putc+1,w
  7890  136A  3907               	andlw	7
  7891  136B  3E01               	addlw	1
  7892  136C  2B6F               	goto	u3324
  7893  136D                     u3325:	
  7894  136D  1003               	clrc
  7895  136E  0DF4               	rlf	??_LCD_putc,f
  7896  136F                     u3324:	
  7897  136F  3EFF               	addlw	-1
  7898  1370  1D03               	skipz
  7899  1371  2B6D               	goto	u3325
  7900  1372  0874               	movf	??_LCD_putc,w
  7901  1373  3AFF               	xorlw	255
  7902  1374  00F6               	movwf	??_LCD_putc+2
  7903  1375  0859               	movf	_lcd^(0+384),w
  7904  1376  0084               	movwf	4
  7905  1377  1783               	bsf	3,7
  7906  1378  1C5A               	btfss	(_lcd+1)^(0+384),0
  7907  1379  1383               	bcf	3,7
  7908  137A  0876               	movf	??_LCD_putc+2,w
  7909  137B  0580               	andwf	0,f
  7910  137C  0008               	return
  7911  137D                     __end_of_LCD_putc:	
  7912                           
  7913                           	psect	text23
  7914  137D                     __ptext23:	
  7915 ;; *************** function _LCD_Init *****************
  7916 ;; Defined at:
  7917 ;;		line 61 in file "lcd.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;  display         5    8[COMMON] struct .
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;  cmd             1   13[COMMON] unsigned char 
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  1    wreg      unsigned char 
  7924 ;; Registers used:
  7925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7931 ;;      Params:         5       0       0       0       0
  7932 ;;      Locals:         1       0       0       0       0
  7933 ;;      Temps:          0       2       0       0       0
  7934 ;;      Totals:         6       2       0       0       0
  7935 ;;Total ram usage:        8 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    2
  7938 ;; This function calls:
  7939 ;;		_LCD_Write
  7940 ;; This function is called by:
  7941 ;;		_main
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           
  7946                           ;psect for function _LCD_Init
  7947  137D                     _LCD_Init:	
  7948                           
  7949                           ;lcd.c: 63: lcd = display;
  7950                           
  7951                           ;incstack = 0
  7952                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7953  137D  30D9               	movlw	_lcd& (0+255)
  7954  137E  0084               	movwf	4
  7955  137F  0878               	movf	LCD_Init@display,w
  7956  1380  1783               	bsf	3,7	;select IRP bank3
  7957  1381  0080               	movwf	0
  7958  1382  0A84               	incf	4,f
  7959  1383  0879               	movf	LCD_Init@display+1,w
  7960  1384  0080               	movwf	0
  7961  1385  0A84               	incf	4,f
  7962  1386  087A               	movf	LCD_Init@display+2,w
  7963  1387  0080               	movwf	0
  7964  1388  0A84               	incf	4,f
  7965  1389  087B               	movf	LCD_Init@display+3,w
  7966  138A  0080               	movwf	0
  7967  138B  0A84               	incf	4,f
  7968  138C  087C               	movf	LCD_Init@display+4,w
  7969  138D  0080               	movwf	0
  7970                           
  7971                           ;lcd.c: 69: if ( lcd.PORT == &PORTA ) {
  7972  138E  3000               	movlw	0
  7973  138F  1683               	bsf	3,5	;RP0=1, select bank3
  7974  1390  1703               	bsf	3,6	;RP1=1, select bank3
  7975  1391  065A               	xorwf	(_lcd+1)^(0+384),w
  7976  1392  1D03               	skipz
  7977  1393  2B96               	goto	u4025
  7978  1394  3005               	movlw	5
  7979  1395  0659               	xorwf	_lcd^(0+384),w
  7980  1396                     u4025:	
  7981  1396  1D03               	skipz
  7982  1397  2B9C               	goto	l2774
  7983                           
  7984                           ;lcd.c: 70: TRISA = 0x00;
  7985  1398  1683               	bsf	3,5	;RP0=1, select bank1
  7986  1399  1303               	bcf	3,6	;RP1=0, select bank1
  7987  139A  0185               	clrf	5	;volatile
  7988                           
  7989                           ;lcd.c: 71: }
  7990  139B  2BB7               	goto	l2782
  7991  139C                     l2774:	
  7992                           
  7993                           ;lcd.c: 72: else if ( lcd.PORT == &PORTB ) {
  7994  139C  3000               	movlw	0
  7995  139D  1683               	bsf	3,5	;RP0=1, select bank3
  7996  139E  1703               	bsf	3,6	;RP1=1, select bank3
  7997  139F  065A               	xorwf	(_lcd+1)^(0+384),w
  7998  13A0  1D03               	skipz
  7999  13A1  2BA4               	goto	u4035
  8000  13A2  3006               	movlw	6
  8001  13A3  0659               	xorwf	_lcd^(0+384),w
  8002  13A4                     u4035:	
  8003  13A4  1D03               	skipz
  8004  13A5  2BAA               	goto	l2778
  8005                           
  8006                           ;lcd.c: 73: TRISB = 0x00;
  8007  13A6  1683               	bsf	3,5	;RP0=1, select bank1
  8008  13A7  1303               	bcf	3,6	;RP1=0, select bank1
  8009  13A8  0186               	clrf	6	;volatile
  8010                           
  8011                           ;lcd.c: 74: }
  8012  13A9  2BB7               	goto	l2782
  8013  13AA                     l2778:	
  8014                           
  8015                           ;lcd.c: 75: else if ( lcd.PORT == &PORTC ) {
  8016  13AA  3000               	movlw	0
  8017  13AB  1683               	bsf	3,5	;RP0=1, select bank3
  8018  13AC  1703               	bsf	3,6	;RP1=1, select bank3
  8019  13AD  065A               	xorwf	(_lcd+1)^(0+384),w
  8020  13AE  1D03               	skipz
  8021  13AF  2BB2               	goto	u4045
  8022  13B0  3007               	movlw	7
  8023  13B1  0659               	xorwf	_lcd^(0+384),w
  8024  13B2                     u4045:	
  8025  13B2  1D03               	skipz
  8026  13B3  0008               	return
  8027                           
  8028                           ;lcd.c: 76: TRISC = 0x00;
  8029  13B4  1683               	bsf	3,5	;RP0=1, select bank1
  8030  13B5  1303               	bcf	3,6	;RP1=0, select bank1
  8031  13B6  0187               	clrf	7	;volatile
  8032  13B7                     l2782:	
  8033                           ;lcd.c: 86: else {
  8034                           ;lcd.c: 87: return 0;
  8035                           ;	Return value of _LCD_Init is never used
  8036                           
  8037                           ;lcd.c: 77: }
  8038                           
  8039                           
  8040                           ;lcd.c: 88: }
  8041                           ;lcd.c: 91: _delay((unsigned long)((20)*(8000000/4000.0)));
  8042  13B7  3034               	movlw	52
  8043  13B8  1283               	bcf	3,5	;RP0=0, select bank0
  8044  13B9  1303               	bcf	3,6	;RP1=0, select bank0
  8045  13BA  00A1               	movwf	??_LCD_Init+1
  8046  13BB  30F1               	movlw	241
  8047  13BC  00A0               	movwf	??_LCD_Init
  8048  13BD                     u4897:	
  8049  13BD  0BA0               	decfsz	??_LCD_Init,f
  8050  13BE  2BBD               	goto	u4897
  8051  13BF  0BA1               	decfsz	??_LCD_Init+1,f
  8052  13C0  2BBD               	goto	u4897
  8053  13C1  2BC2               	nop2
  8054                           
  8055                           ;lcd.c: 94: LCD_Write(0x03);
  8056  13C2  3003               	movlw	3
  8057  13C3  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8058                           
  8059                           ;lcd.c: 95: _delay((unsigned long)((5)*(8000000/4000.0)));
  8060  13C8  300D               	movlw	13
  8061  13C9  1283               	bcf	3,5	;RP0=0, select bank0
  8062  13CA  1303               	bcf	3,6	;RP1=0, select bank0
  8063  13CB  00A1               	movwf	??_LCD_Init+1
  8064  13CC  30FB               	movlw	251
  8065  13CD  00A0               	movwf	??_LCD_Init
  8066  13CE                     u4907:	
  8067  13CE  0BA0               	decfsz	??_LCD_Init,f
  8068  13CF  2BCE               	goto	u4907
  8069  13D0  0BA1               	decfsz	??_LCD_Init+1,f
  8070  13D1  2BCE               	goto	u4907
  8071  13D2  2BD3               	nop2
  8072                           
  8073                           ;lcd.c: 96: LCD_Write(0x03);
  8074  13D3  3003               	movlw	3
  8075  13D4  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8076                           
  8077                           ;lcd.c: 97: _delay((unsigned long)((16)*(8000000/4000.0)));
  8078  13D9  302A               	movlw	42
  8079  13DA  1283               	bcf	3,5	;RP0=0, select bank0
  8080  13DB  1303               	bcf	3,6	;RP1=0, select bank0
  8081  13DC  00A1               	movwf	??_LCD_Init+1
  8082  13DD  308D               	movlw	141
  8083  13DE  00A0               	movwf	??_LCD_Init
  8084  13DF                     u4917:	
  8085  13DF  0BA0               	decfsz	??_LCD_Init,f
  8086  13E0  2BDF               	goto	u4917
  8087  13E1  0BA1               	decfsz	??_LCD_Init+1,f
  8088  13E2  2BDF               	goto	u4917
  8089  13E3  2BE4               	nop2
  8090                           
  8091                           ;lcd.c: 98: LCD_Write(0x03);
  8092  13E4  3003               	movlw	3
  8093  13E5  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8094                           
  8095                           ;lcd.c: 101: LCD_Write(0x02);
  8096  13EA  3002               	movlw	2
  8097  13EB  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8098                           
  8099                           ;lcd.c: 104: do { LCD_Write( (0x28 & 0xF0) >> 4 ); LCD_Write( 0x28 & 0x0F); } while ( 0 
      +                          );
  8100  13F0  3002               	movlw	2
  8101  13F1  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8102  13F6  3008               	movlw	8
  8103  13F7  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8104                           
  8105                           ;lcd.c: 107: do { LCD_Write( (0x06 & 0xF0) >> 4 ); LCD_Write( 0x06 & 0x0F); } while ( 0 
      +                          );
  8106  13FC  3000               	movlw	0
  8107  13FD  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8108  1402  3006               	movlw	6
  8109  1403  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8110                           
  8111                           ;lcd.c: 109: do { unsigned char cmd = 0x08; if ( 1 == 1 ) { cmd |= 1 << 2; } if ( 0 == 1
      +                           ) { cmd |= 1 << 1; } if ( 0 == 1 ) { cmd |= 1; } do { LCD_Write( (cmd & 0xF0) >> 4 ); L
      +                          CD_Write( cmd & 0x0F); } while ( 0 ); } while ( 0 );
  8112  1408  3008               	movlw	8
  8113  1409  1283               	bcf	3,5	;RP0=0, select bank0
  8114  140A  1303               	bcf	3,6	;RP1=0, select bank0
  8115  140B  00A0               	movwf	??_LCD_Init
  8116  140C  0820               	movf	??_LCD_Init,w
  8117  140D  00FD               	movwf	LCD_Init@cmd
  8118  140E  157D               	bsf	LCD_Init@cmd,2
  8119  140F  087D               	movf	LCD_Init@cmd,w
  8120  1410  00A0               	movwf	??_LCD_Init
  8121  1411  3004               	movlw	4
  8122  1412                     u4055:	
  8123  1412  1003               	clrc
  8124  1413  0CA0               	rrf	??_LCD_Init,f
  8125  1414  3EFF               	addlw	-1
  8126  1415  1D03               	skipz
  8127  1416  2C12               	goto	u4055
  8128  1417  0820               	movf	??_LCD_Init,w
  8129  1418  390F               	andlw	15
  8130  1419  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8131  141E  087D               	movf	LCD_Init@cmd,w
  8132  141F  390F               	andlw	15
  8133  1420  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8134                           
  8135                           ;lcd.c: 111: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0 
      +                          );
  8136  1425  3000               	movlw	0
  8137  1426  160A  158A  26EA  160A  118A  	fcall	_LCD_Write
  8138  142B  3001               	movlw	1
  8139  142C  160A  158A  26EA   	fcall	_LCD_Write
  8140  142F  0008               	return
  8141  1430                     __end_of_LCD_Init:	
  8142                           ;lcd.c: 113: return 1;
  8143                           ;	Return value of _LCD_Init is never used
  8144                           
  8145                           
  8146                           	psect	text24
  8147  1EEA                     __ptext24:	
  8148 ;; *************** function _LCD_Write *****************
  8149 ;; Defined at:
  8150 ;;		line 50 in file "lcd.c"
  8151 ;; Parameters:    Size  Location     Type
  8152 ;;  c               1    wreg     unsigned char 
  8153 ;; Auto vars:     Size  Location     Type
  8154 ;;  c               1    7[COMMON] unsigned char 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;		None               void
  8157 ;; Registers used:
  8158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8164 ;;      Params:         0       0       0       0       0
  8165 ;;      Locals:         1       0       0       0       0
  8166 ;;      Temps:          3       0       0       0       0
  8167 ;;      Totals:         4       0       0       0       0
  8168 ;;Total ram usage:        4 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    1
  8171 ;; This function calls:
  8172 ;;		_LCD_Out
  8173 ;; This function is called by:
  8174 ;;		_main
  8175 ;;		_LCD_Init
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           
  8180                           ;psect for function _LCD_Write
  8181  1EEA                     _LCD_Write:	
  8182                           
  8183                           ;incstack = 0
  8184                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8185                           ;LCD_Write@c stored from wreg
  8186  1EEA  00F7               	movwf	LCD_Write@c
  8187                           
  8188                           ;lcd.c: 52: *(lcd.PORT) &= ~(1 << lcd.RS);
  8189  1EEB  3001               	movlw	1
  8190  1EEC  00F4               	movwf	??_LCD_Write
  8191  1EED  1683               	bsf	3,5	;RP0=1, select bank3
  8192  1EEE  1703               	bsf	3,6	;RP1=1, select bank3
  8193  1EEF  085B               	movf	(_lcd^(0+384)+2),w
  8194  1EF0  3907               	andlw	7
  8195  1EF1  3E01               	addlw	1
  8196  1EF2  2EF5               	goto	u3244
  8197  1EF3                     u3245:	
  8198  1EF3  1003               	clrc
  8199  1EF4  0DF4               	rlf	??_LCD_Write,f
  8200  1EF5                     u3244:	
  8201  1EF5  3EFF               	addlw	-1
  8202  1EF6  1D03               	skipz
  8203  1EF7  2EF3               	goto	u3245
  8204  1EF8  0874               	movf	??_LCD_Write,w
  8205  1EF9  3AFF               	xorlw	255
  8206  1EFA  00F5               	movwf	??_LCD_Write+1
  8207  1EFB  0859               	movf	_lcd^(0+384),w
  8208  1EFC  0084               	movwf	4
  8209  1EFD  1783               	bsf	3,7
  8210  1EFE  1C5A               	btfss	(_lcd+1)^(0+384),0
  8211  1EFF  1383               	bcf	3,7
  8212  1F00  0875               	movf	??_LCD_Write+1,w
  8213  1F01  0580               	andwf	0,f
  8214                           
  8215                           ;lcd.c: 53: LCD_Out(c);
  8216  1F02  0877               	movf	LCD_Write@c,w
  8217  1F03  160A  118A  2430  160A  158A  	fcall	_LCD_Out
  8218                           
  8219                           ;lcd.c: 55: *(lcd.PORT) |= 1 << lcd.EN;
  8220  1F08  3001               	movlw	1
  8221  1F09  00F4               	movwf	??_LCD_Write
  8222  1F0A  1683               	bsf	3,5	;RP0=1, select bank3
  8223  1F0B  1703               	bsf	3,6	;RP1=1, select bank3
  8224  1F0C  0C5B               	rrf	(_lcd^(0+384)+2),w
  8225  1F0D  00F5               	movwf	??_LCD_Write+1
  8226  1F0E  0CF5               	rrf	??_LCD_Write+1,f
  8227  1F0F  0C75               	rrf	??_LCD_Write+1,w
  8228  1F10  3907               	andlw	7
  8229  1F11  3E01               	addlw	1
  8230  1F12  2F15               	goto	u3254
  8231  1F13                     u3255:	
  8232  1F13  1003               	clrc
  8233  1F14  0DF4               	rlf	??_LCD_Write,f
  8234  1F15                     u3254:	
  8235  1F15  3EFF               	addlw	-1
  8236  1F16  1D03               	skipz
  8237  1F17  2F13               	goto	u3255
  8238  1F18  0874               	movf	??_LCD_Write,w
  8239  1F19  00F6               	movwf	??_LCD_Write+2
  8240  1F1A  0859               	movf	_lcd^(0+384),w
  8241  1F1B  0084               	movwf	4
  8242  1F1C  1783               	bsf	3,7
  8243  1F1D  1C5A               	btfss	(_lcd+1)^(0+384),0
  8244  1F1E  1383               	bcf	3,7
  8245  1F1F  0876               	movf	??_LCD_Write+2,w
  8246  1F20  0480               	iorwf	0,f
  8247                           
  8248                           ;lcd.c: 56: _delay((unsigned long)((4)*(8000000/4000.0)));
  8249  1F21  300B               	movlw	11
  8250  1F22  00F5               	movwf	??_LCD_Write+1
  8251  1F23  3062               	movlw	98
  8252  1F24  00F4               	movwf	??_LCD_Write
  8253  1F25                     u4927:	
  8254  1F25  0BF4               	decfsz	??_LCD_Write,f
  8255  1F26  2F25               	goto	u4927
  8256  1F27  0BF5               	decfsz	??_LCD_Write+1,f
  8257  1F28  2F25               	goto	u4927
  8258  1F29  0000               	nop
  8259                           
  8260                           ;lcd.c: 57: *(lcd.PORT) &= ~(1 << lcd.EN);
  8261  1F2A  3001               	movlw	1
  8262  1F2B  00F4               	movwf	??_LCD_Write
  8263  1F2C  1683               	bsf	3,5	;RP0=1, select bank3
  8264  1F2D  1703               	bsf	3,6	;RP1=1, select bank3
  8265  1F2E  0C5B               	rrf	(_lcd^(0+384)+2),w
  8266  1F2F  00F5               	movwf	??_LCD_Write+1
  8267  1F30  0CF5               	rrf	??_LCD_Write+1,f
  8268  1F31  0C75               	rrf	??_LCD_Write+1,w
  8269  1F32  3907               	andlw	7
  8270  1F33  3E01               	addlw	1
  8271  1F34  2F37               	goto	u3264
  8272  1F35                     u3265:	
  8273  1F35  1003               	clrc
  8274  1F36  0DF4               	rlf	??_LCD_Write,f
  8275  1F37                     u3264:	
  8276  1F37  3EFF               	addlw	-1
  8277  1F38  1D03               	skipz
  8278  1F39  2F35               	goto	u3265
  8279  1F3A  0874               	movf	??_LCD_Write,w
  8280  1F3B  3AFF               	xorlw	255
  8281  1F3C  00F6               	movwf	??_LCD_Write+2
  8282  1F3D  0859               	movf	_lcd^(0+384),w
  8283  1F3E  0084               	movwf	4
  8284  1F3F  1783               	bsf	3,7
  8285  1F40  1C5A               	btfss	(_lcd+1)^(0+384),0
  8286  1F41  1383               	bcf	3,7
  8287  1F42  0876               	movf	??_LCD_Write+2,w
  8288  1F43  0580               	andwf	0,f
  8289  1F44  0008               	return
  8290  1F45                     __end_of_LCD_Write:	
  8291                           
  8292                           	psect	text25
  8293  1430                     __ptext25:	
  8294 ;; *************** function _LCD_Out *****************
  8295 ;; Defined at:
  8296 ;;		line 18 in file "lcd.c"
  8297 ;; Parameters:    Size  Location     Type
  8298 ;;  c               1    wreg     unsigned char 
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;  c               1    3[COMMON] unsigned char 
  8301 ;; Return value:  Size  Location     Type
  8302 ;;		None               void
  8303 ;; Registers used:
  8304 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8305 ;; Tracked objects:
  8306 ;;		On entry : 0/0
  8307 ;;		On exit  : 0/0
  8308 ;;		Unchanged: 0/0
  8309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8310 ;;      Params:         0       0       0       0       0
  8311 ;;      Locals:         1       0       0       0       0
  8312 ;;      Temps:          3       0       0       0       0
  8313 ;;      Totals:         4       0       0       0       0
  8314 ;;Total ram usage:        4 bytes
  8315 ;; Hardware stack levels used:    1
  8316 ;; This function calls:
  8317 ;;		Nothing
  8318 ;; This function is called by:
  8319 ;;		_LCD_Write
  8320 ;;		_LCD_putc
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           
  8325                           ;psect for function _LCD_Out
  8326  1430                     _LCD_Out:	
  8327                           
  8328                           ;incstack = 0
  8329                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  8330                           ;LCD_Out@c stored from wreg
  8331  1430  00F3               	movwf	LCD_Out@c
  8332                           
  8333                           ;lcd.c: 20: if ( c & 1 ){
  8334  1431  1C73               	btfss	LCD_Out@c,0
  8335  1432  2C4A               	goto	l2176
  8336                           
  8337                           ;lcd.c: 21: *(lcd.PORT) |= 1 << lcd.D4;
  8338  1433  3001               	movlw	1
  8339  1434  00F0               	movwf	??_LCD_Out
  8340  1435  1683               	bsf	3,5	;RP0=1, select bank3
  8341  1436  1703               	bsf	3,6	;RP1=1, select bank3
  8342  1437  085C               	movf	(_lcd^(0+384)+3),w
  8343  1438  3907               	andlw	7
  8344  1439  3E01               	addlw	1
  8345  143A  2C3D               	goto	u2544
  8346  143B                     u2545:	
  8347  143B  1003               	clrc
  8348  143C  0DF0               	rlf	??_LCD_Out,f
  8349  143D                     u2544:	
  8350  143D  3EFF               	addlw	-1
  8351  143E  1D03               	skipz
  8352  143F  2C3B               	goto	u2545
  8353  1440  0870               	movf	??_LCD_Out,w
  8354  1441  00F1               	movwf	??_LCD_Out+1
  8355  1442  0859               	movf	_lcd^(0+384),w
  8356  1443  0084               	movwf	4
  8357  1444  1783               	bsf	3,7
  8358  1445  1C5A               	btfss	(_lcd+1)^(0+384),0
  8359  1446  1383               	bcf	3,7
  8360  1447  0871               	movf	??_LCD_Out+1,w
  8361  1448  0480               	iorwf	0,f
  8362                           
  8363                           ;lcd.c: 22: }
  8364  1449  2C61               	goto	l2178
  8365  144A                     l2176:	
  8366                           
  8367                           ;lcd.c: 23: else {
  8368                           ;lcd.c: 24: *(lcd.PORT) &= ~(1 << lcd.D4);
  8369  144A  3001               	movlw	1
  8370  144B  00F0               	movwf	??_LCD_Out
  8371  144C  1683               	bsf	3,5	;RP0=1, select bank3
  8372  144D  1703               	bsf	3,6	;RP1=1, select bank3
  8373  144E  085C               	movf	(_lcd^(0+384)+3),w
  8374  144F  3907               	andlw	7
  8375  1450  3E01               	addlw	1
  8376  1451  2C54               	goto	u2554
  8377  1452                     u2555:	
  8378  1452  1003               	clrc
  8379  1453  0DF0               	rlf	??_LCD_Out,f
  8380  1454                     u2554:	
  8381  1454  3EFF               	addlw	-1
  8382  1455  1D03               	skipz
  8383  1456  2C52               	goto	u2555
  8384  1457  0870               	movf	??_LCD_Out,w
  8385  1458  3AFF               	xorlw	255
  8386  1459  00F1               	movwf	??_LCD_Out+1
  8387  145A  0859               	movf	_lcd^(0+384),w
  8388  145B  0084               	movwf	4
  8389  145C  1783               	bsf	3,7
  8390  145D  1C5A               	btfss	(_lcd+1)^(0+384),0
  8391  145E  1383               	bcf	3,7
  8392  145F  0871               	movf	??_LCD_Out+1,w
  8393  1460  0580               	andwf	0,f
  8394  1461                     l2178:	
  8395                           
  8396                           ;lcd.c: 25: }
  8397                           ;lcd.c: 27: if ( c & 2 ) {
  8398  1461  1CF3               	btfss	LCD_Out@c,1
  8399  1462  2C7B               	goto	l2182
  8400                           
  8401                           ;lcd.c: 28: *(lcd.PORT) |= 1 << lcd.D5;
  8402  1463  3001               	movlw	1
  8403  1464  00F0               	movwf	??_LCD_Out
  8404  1465  0C5C               	rrf	(_lcd^(0+384)+3),w
  8405  1466  00F1               	movwf	??_LCD_Out+1
  8406  1467  0CF1               	rrf	??_LCD_Out+1,f
  8407  1468  0C71               	rrf	??_LCD_Out+1,w
  8408  1469  3907               	andlw	7
  8409  146A  3E01               	addlw	1
  8410  146B  2C6E               	goto	u2574
  8411  146C                     u2575:	
  8412  146C  1003               	clrc
  8413  146D  0DF0               	rlf	??_LCD_Out,f
  8414  146E                     u2574:	
  8415  146E  3EFF               	addlw	-1
  8416  146F  1D03               	skipz
  8417  1470  2C6C               	goto	u2575
  8418  1471  0870               	movf	??_LCD_Out,w
  8419  1472  00F2               	movwf	??_LCD_Out+2
  8420  1473  0859               	movf	_lcd^(0+384),w
  8421  1474  0084               	movwf	4
  8422  1475  1783               	bsf	3,7
  8423  1476  1C5A               	btfss	(_lcd+1)^(0+384),0
  8424  1477  1383               	bcf	3,7
  8425  1478  0872               	movf	??_LCD_Out+2,w
  8426  1479  0480               	iorwf	0,f
  8427                           
  8428                           ;lcd.c: 29: }
  8429  147A  2C93               	goto	l2184
  8430  147B                     l2182:	
  8431                           
  8432                           ;lcd.c: 30: else {
  8433                           ;lcd.c: 31: *(lcd.PORT) &= ~(1 << lcd.D5);
  8434  147B  3001               	movlw	1
  8435  147C  00F0               	movwf	??_LCD_Out
  8436  147D  0C5C               	rrf	(_lcd^(0+384)+3),w
  8437  147E  00F1               	movwf	??_LCD_Out+1
  8438  147F  0CF1               	rrf	??_LCD_Out+1,f
  8439  1480  0C71               	rrf	??_LCD_Out+1,w
  8440  1481  3907               	andlw	7
  8441  1482  3E01               	addlw	1
  8442  1483  2C86               	goto	u2584
  8443  1484                     u2585:	
  8444  1484  1003               	clrc
  8445  1485  0DF0               	rlf	??_LCD_Out,f
  8446  1486                     u2584:	
  8447  1486  3EFF               	addlw	-1
  8448  1487  1D03               	skipz
  8449  1488  2C84               	goto	u2585
  8450  1489  0870               	movf	??_LCD_Out,w
  8451  148A  3AFF               	xorlw	255
  8452  148B  00F2               	movwf	??_LCD_Out+2
  8453  148C  0859               	movf	_lcd^(0+384),w
  8454  148D  0084               	movwf	4
  8455  148E  1783               	bsf	3,7
  8456  148F  1C5A               	btfss	(_lcd+1)^(0+384),0
  8457  1490  1383               	bcf	3,7
  8458  1491  0872               	movf	??_LCD_Out+2,w
  8459  1492  0580               	andwf	0,f
  8460  1493                     l2184:	
  8461                           
  8462                           ;lcd.c: 32: }
  8463                           ;lcd.c: 34: if ( c & 4 ) {
  8464  1493  1D73               	btfss	LCD_Out@c,2
  8465  1494  2CAA               	goto	l2188
  8466                           
  8467                           ;lcd.c: 35: *(lcd.PORT) |= 1 << lcd.D6;
  8468  1495  3001               	movlw	1
  8469  1496  00F0               	movwf	??_LCD_Out
  8470  1497  085D               	movf	(_lcd^(0+384)+4),w
  8471  1498  3907               	andlw	7
  8472  1499  3E01               	addlw	1
  8473  149A  2C9D               	goto	u2604
  8474  149B                     u2605:	
  8475  149B  1003               	clrc
  8476  149C  0DF0               	rlf	??_LCD_Out,f
  8477  149D                     u2604:	
  8478  149D  3EFF               	addlw	-1
  8479  149E  1D03               	skipz
  8480  149F  2C9B               	goto	u2605
  8481  14A0  0870               	movf	??_LCD_Out,w
  8482  14A1  00F1               	movwf	??_LCD_Out+1
  8483  14A2  0859               	movf	_lcd^(0+384),w
  8484  14A3  0084               	movwf	4
  8485  14A4  1783               	bsf	3,7
  8486  14A5  1C5A               	btfss	(_lcd+1)^(0+384),0
  8487  14A6  1383               	bcf	3,7
  8488  14A7  0871               	movf	??_LCD_Out+1,w
  8489  14A8  0480               	iorwf	0,f
  8490                           
  8491                           ;lcd.c: 36: }
  8492  14A9  2CBF               	goto	l2190
  8493  14AA                     l2188:	
  8494                           
  8495                           ;lcd.c: 37: else {
  8496                           ;lcd.c: 38: *(lcd.PORT) &= ~(1 << lcd.D6);
  8497  14AA  3001               	movlw	1
  8498  14AB  00F0               	movwf	??_LCD_Out
  8499  14AC  085D               	movf	(_lcd^(0+384)+4),w
  8500  14AD  3907               	andlw	7
  8501  14AE  3E01               	addlw	1
  8502  14AF  2CB2               	goto	u2614
  8503  14B0                     u2615:	
  8504  14B0  1003               	clrc
  8505  14B1  0DF0               	rlf	??_LCD_Out,f
  8506  14B2                     u2614:	
  8507  14B2  3EFF               	addlw	-1
  8508  14B3  1D03               	skipz
  8509  14B4  2CB0               	goto	u2615
  8510  14B5  0870               	movf	??_LCD_Out,w
  8511  14B6  3AFF               	xorlw	255
  8512  14B7  00F1               	movwf	??_LCD_Out+1
  8513  14B8  0859               	movf	_lcd^(0+384),w
  8514  14B9  0084               	movwf	4
  8515  14BA  1783               	bsf	3,7
  8516  14BB  1C5A               	btfss	(_lcd+1)^(0+384),0
  8517  14BC  1383               	bcf	3,7
  8518  14BD  0871               	movf	??_LCD_Out+1,w
  8519  14BE  0580               	andwf	0,f
  8520  14BF                     l2190:	
  8521                           
  8522                           ;lcd.c: 39: }
  8523                           ;lcd.c: 41: if ( c & 8 ) {
  8524  14BF  1DF3               	btfss	LCD_Out@c,3
  8525  14C0  2CD9               	goto	l2194
  8526                           
  8527                           ;lcd.c: 42: *(lcd.PORT) |= 1 << lcd.D7;
  8528  14C1  3001               	movlw	1
  8529  14C2  00F0               	movwf	??_LCD_Out
  8530  14C3  0C5D               	rrf	(_lcd^(0+384)+4),w
  8531  14C4  00F1               	movwf	??_LCD_Out+1
  8532  14C5  0CF1               	rrf	??_LCD_Out+1,f
  8533  14C6  0C71               	rrf	??_LCD_Out+1,w
  8534  14C7  3907               	andlw	7
  8535  14C8  3E01               	addlw	1
  8536  14C9  2CCC               	goto	u2634
  8537  14CA                     u2635:	
  8538  14CA  1003               	clrc
  8539  14CB  0DF0               	rlf	??_LCD_Out,f
  8540  14CC                     u2634:	
  8541  14CC  3EFF               	addlw	-1
  8542  14CD  1D03               	skipz
  8543  14CE  2CCA               	goto	u2635
  8544  14CF  0870               	movf	??_LCD_Out,w
  8545  14D0  00F2               	movwf	??_LCD_Out+2
  8546  14D1  0859               	movf	_lcd^(0+384),w
  8547  14D2  0084               	movwf	4
  8548  14D3  1783               	bsf	3,7
  8549  14D4  1C5A               	btfss	(_lcd+1)^(0+384),0
  8550  14D5  1383               	bcf	3,7
  8551  14D6  0872               	movf	??_LCD_Out+2,w
  8552  14D7  0480               	iorwf	0,f
  8553                           
  8554                           ;lcd.c: 43: }
  8555  14D8  0008               	return
  8556  14D9                     l2194:	
  8557                           
  8558                           ;lcd.c: 44: else {
  8559                           ;lcd.c: 45: *(lcd.PORT) &= ~(1 << lcd.D7);
  8560  14D9  3001               	movlw	1
  8561  14DA  00F0               	movwf	??_LCD_Out
  8562  14DB  0C5D               	rrf	(_lcd^(0+384)+4),w
  8563  14DC  00F1               	movwf	??_LCD_Out+1
  8564  14DD  0CF1               	rrf	??_LCD_Out+1,f
  8565  14DE  0C71               	rrf	??_LCD_Out+1,w
  8566  14DF  3907               	andlw	7
  8567  14E0  3E01               	addlw	1
  8568  14E1  2CE4               	goto	u2644
  8569  14E2                     u2645:	
  8570  14E2  1003               	clrc
  8571  14E3  0DF0               	rlf	??_LCD_Out,f
  8572  14E4                     u2644:	
  8573  14E4  3EFF               	addlw	-1
  8574  14E5  1D03               	skipz
  8575  14E6  2CE2               	goto	u2645
  8576  14E7  0870               	movf	??_LCD_Out,w
  8577  14E8  3AFF               	xorlw	255
  8578  14E9  00F2               	movwf	??_LCD_Out+2
  8579  14EA  0859               	movf	_lcd^(0+384),w
  8580  14EB  0084               	movwf	4
  8581  14EC  1783               	bsf	3,7
  8582  14ED  1C5A               	btfss	(_lcd+1)^(0+384),0
  8583  14EE  1383               	bcf	3,7
  8584  14EF  0872               	movf	??_LCD_Out+2,w
  8585  14F0  0580               	andwf	0,f
  8586  14F1  0008               	return
  8587  14F2                     __end_of_LCD_Out:	
  8588                           
  8589                           	psect	text26
  8590  1D85                     __ptext26:	
  8591 ;; *************** function _IO_Init *****************
  8592 ;; Defined at:
  8593 ;;		line 185 in file "main.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;		None
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;		None
  8598 ;; Return value:  Size  Location     Type
  8599 ;;		None               void
  8600 ;; Registers used:
  8601 ;;		None
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8607 ;;      Params:         0       0       0       0       0
  8608 ;;      Locals:         0       0       0       0       0
  8609 ;;      Temps:          0       0       0       0       0
  8610 ;;      Totals:         0       0       0       0       0
  8611 ;;Total ram usage:        0 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; This function calls:
  8614 ;;		Nothing
  8615 ;; This function is called by:
  8616 ;;		_main
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           
  8621                           ;psect for function _IO_Init
  8622  1D85                     _IO_Init:	
  8623                           
  8624                           ;main.c: 188: OPTION_REGbits.nRBPU = 0;
  8625                           
  8626                           ;incstack = 0
  8627                           ; Regs used in _IO_Init: []
  8628  1D85  1683               	bsf	3,5	;RP0=1, select bank1
  8629  1D86  1303               	bcf	3,6	;RP1=0, select bank1
  8630  1D87  1381               	bcf	1,7	;volatile
  8631                           
  8632                           ;main.c: 190: TRISBbits.TRISB0 = 1;
  8633  1D88  1406               	bsf	6,0	;volatile
  8634                           
  8635                           ;main.c: 191: TRISBbits.TRISB1 = 1;
  8636  1D89  1486               	bsf	6,1	;volatile
  8637                           
  8638                           ;main.c: 192: TRISBbits.TRISB2 = 1;
  8639  1D8A  1506               	bsf	6,2	;volatile
  8640                           
  8641                           ;main.c: 193: TRISBbits.TRISB4 = 1;
  8642  1D8B  1606               	bsf	6,4	;volatile
  8643                           
  8644                           ;main.c: 196: TRISCbits.TRISC1 = 0;
  8645  1D8C  1087               	bcf	7,1	;volatile
  8646                           
  8647                           ;main.c: 197: TRISBbits.TRISB3 = 0;
  8648  1D8D  1186               	bcf	6,3	;volatile
  8649                           
  8650                           ;main.c: 199: PORTBbits.RB3 = 0;
  8651  1D8E  1283               	bcf	3,5	;RP0=0, select bank0
  8652  1D8F  1303               	bcf	3,6	;RP1=0, select bank0
  8653  1D90  1186               	bcf	6,3	;volatile
  8654                           
  8655                           ;main.c: 200: PORTCbits.RC1 = 1;
  8656  1D91  1487               	bsf	7,1	;volatile
  8657  1D92  0008               	return
  8658  1D93                     __end_of_IO_Init:	
  8659                           
  8660                           	psect	text27
  8661  11D8                     __ptext27:	
  8662 ;; *************** function _ADC_Read *****************
  8663 ;; Defined at:
  8664 ;;		line 32 in file "adc.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;  channel         1    wreg     unsigned char 
  8667 ;;  samples         2    0[BANK0 ] unsigned int 
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;  channel         1   14[BANK0 ] unsigned char 
  8670 ;;  i               2   12[BANK0 ] int 
  8671 ;;  ADCResult       4    8[BANK0 ] unsigned long 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;                  4    0[BANK0 ] unsigned long 
  8674 ;; Registers used:
  8675 ;;		wreg, status,2, status,0, pclath, cstack
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8681 ;;      Params:         0       4       0       0       0
  8682 ;;      Locals:         0       7       0       0       0
  8683 ;;      Temps:          0       4       0       0       0
  8684 ;;      Totals:         0      15       0       0       0
  8685 ;;Total ram usage:       15 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    1
  8688 ;; This function calls:
  8689 ;;		___lldiv
  8690 ;; This function is called by:
  8691 ;;		_main
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           
  8696                           ;psect for function _ADC_Read
  8697  11D8                     _ADC_Read:	
  8698                           
  8699                           ;incstack = 0
  8700                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+pclath+cstack]
  8701                           ;ADC_Read@channel stored from wreg
  8702  11D8  1283               	bcf	3,5	;RP0=0, select bank0
  8703  11D9  1303               	bcf	3,6	;RP1=0, select bank0
  8704  11DA  00AE               	movwf	ADC_Read@channel
  8705                           
  8706                           ;adc.c: 34: unsigned long ADCResult = 0;
  8707  11DB  3000               	movlw	0
  8708  11DC  00AB               	movwf	ADC_Read@ADCResult+3
  8709  11DD  3000               	movlw	0
  8710  11DE  00AA               	movwf	ADC_Read@ADCResult+2
  8711  11DF  3000               	movlw	0
  8712  11E0  00A9               	movwf	ADC_Read@ADCResult+1
  8713  11E1  3000               	movlw	0
  8714  11E2  00A8               	movwf	ADC_Read@ADCResult
  8715                           
  8716                           ;adc.c: 37: if ( samples < 1 ) {
  8717  11E3  0821               	movf	ADC_Read@samples+1,w
  8718  11E4  0420               	iorwf	ADC_Read@samples,w
  8719  11E5  1D03               	skipz
  8720  11E6  29EB               	goto	l340
  8721                           
  8722                           ;adc.c: 38: samples = 1;
  8723  11E7  3001               	movlw	1
  8724  11E8  00A0               	movwf	ADC_Read@samples
  8725  11E9  3000               	movlw	0
  8726  11EA  00A1               	movwf	ADC_Read@samples+1
  8727  11EB                     l340:	
  8728                           
  8729                           ;adc.c: 39: }
  8730                           ;adc.c: 42: if ( channel > 4 ) {
  8731  11EB  3005               	movlw	5
  8732  11EC  022E               	subwf	ADC_Read@channel,w
  8733  11ED  1803               	btfsc	3,0
  8734                           
  8735                           ;adc.c: 43: channel = 0;
  8736  11EE  01AE               	clrf	ADC_Read@channel
  8737                           
  8738                           ;adc.c: 44: }
  8739                           ;adc.c: 46: ADCON0bits.CHS = channel;
  8740  11EF  082E               	movf	ADC_Read@channel,w
  8741  11F0  00A4               	movwf	??_ADC_Read
  8742  11F1  0DA4               	rlf	??_ADC_Read,f
  8743  11F2  0DA4               	rlf	??_ADC_Read,f
  8744  11F3  0DA4               	rlf	??_ADC_Read,f
  8745  11F4  081F               	movf	31,w	;volatile
  8746  11F5  0624               	xorwf	??_ADC_Read,w
  8747  11F6  39C7               	andlw	-57
  8748  11F7  0624               	xorwf	??_ADC_Read,w
  8749  11F8  009F               	movwf	31	;volatile
  8750                           
  8751                           ;adc.c: 47: _delay((unsigned long)((15)*(8000000/4000000.0)));
  8752  11F9  3009               	movlw	9
  8753  11FA  00A4               	movwf	??_ADC_Read
  8754  11FB                     u4937:	
  8755  11FB  0BA4               	decfsz	??_ADC_Read,f
  8756  11FC  29FB               	goto	u4937
  8757  11FD  29FE               	nop2	;nop
  8758                           
  8759                           ;adc.c: 49: for ( int i = 0; i < samples; ++i ) {
  8760  11FE  1283               	bcf	3,5	;RP0=0, select bank0
  8761  11FF  1303               	bcf	3,6	;RP1=0, select bank0
  8762  1200  01AC               	clrf	ADC_Read@i
  8763  1201  01AD               	clrf	ADC_Read@i+1
  8764  1202                     l342:	
  8765  1202  0821               	movf	ADC_Read@samples+1,w
  8766  1203  022D               	subwf	ADC_Read@i+1,w
  8767  1204  1D03               	skipz
  8768  1205  2A08               	goto	u4115
  8769  1206  0820               	movf	ADC_Read@samples,w
  8770  1207  022C               	subwf	ADC_Read@i,w
  8771  1208                     u4115:	
  8772  1208  1803               	btfsc	3,0
  8773  1209  2A35               	goto	l2856
  8774                           
  8775                           ;adc.c: 51: ADCON0bits.GO = 1;
  8776  120A  151F               	bsf	31,2	;volatile
  8777  120B                     l344:	
  8778                           ;adc.c: 53: while (ADCON0bits.nDONE) continue;
  8779                           
  8780  120B  191F               	btfsc	31,2	;volatile
  8781  120C  2A0B               	goto	l344
  8782                           
  8783                           ;adc.c: 55: ADCResult += ( ADRESH << 8 ) + ADRESL ;
  8784  120D  1683               	bsf	3,5	;RP0=1, select bank1
  8785  120E  1303               	bcf	3,6	;RP1=0, select bank1
  8786  120F  081E               	movf	30,w	;volatile
  8787  1210  1283               	bcf	3,5	;RP0=0, select bank0
  8788  1211  1303               	bcf	3,6	;RP1=0, select bank0
  8789  1212  00A4               	movwf	??_ADC_Read
  8790  1213  081E               	movf	30,w	;volatile
  8791  1214  00A5               	movwf	??_ADC_Read+1
  8792  1215  3000               	movlw	0
  8793  1216  1BA5               	btfsc	??_ADC_Read+1,7
  8794  1217  30FF               	movlw	255
  8795  1218  00A6               	movwf	??_ADC_Read+2
  8796  1219  00A7               	movwf	??_ADC_Read+3
  8797  121A  0824               	movf	??_ADC_Read,w
  8798  121B  07A8               	addwf	ADC_Read@ADCResult,f
  8799  121C  0825               	movf	??_ADC_Read+1,w
  8800  121D  1103               	clrz
  8801  121E  1803               	skipnc
  8802  121F  3E01               	addlw	1
  8803  1220  1D03               	btfss	3,2
  8804  1221  07A9               	addwf	ADC_Read@ADCResult+1,f
  8805  1222  0826               	movf	??_ADC_Read+2,w
  8806  1223  1103               	clrz
  8807  1224  1803               	skipnc
  8808  1225  3E01               	addlw	1
  8809  1226  1D03               	btfss	3,2
  8810  1227  07AA               	addwf	ADC_Read@ADCResult+2,f
  8811  1228  0827               	movf	??_ADC_Read+3,w
  8812  1229  1103               	clrz
  8813  122A  1803               	skipnc
  8814  122B  3E01               	addlw	1
  8815  122C  1D03               	btfss	3,2
  8816  122D  07AB               	addwf	ADC_Read@ADCResult+3,f
  8817  122E  3001               	movlw	1
  8818  122F  07AC               	addwf	ADC_Read@i,f
  8819  1230  1803               	skipnc
  8820  1231  0AAD               	incf	ADC_Read@i+1,f
  8821  1232  3000               	movlw	0
  8822  1233  07AD               	addwf	ADC_Read@i+1,f
  8823  1234  2A02               	goto	l342
  8824  1235                     l2856:	
  8825                           
  8826                           ;adc.c: 57: }
  8827                           ;adc.c: 59: return ADCResult / samples;
  8828  1235  0820               	movf	ADC_Read@samples,w
  8829  1236  00F0               	movwf	___lldiv@divisor
  8830  1237  0821               	movf	ADC_Read@samples+1,w
  8831  1238  00F1               	movwf	___lldiv@divisor+1
  8832  1239  01F2               	clrf	___lldiv@divisor+2
  8833  123A  01F3               	clrf	___lldiv@divisor+3
  8834  123B  082B               	movf	ADC_Read@ADCResult+3,w
  8835  123C  00F7               	movwf	___lldiv@dividend+3
  8836  123D  082A               	movf	ADC_Read@ADCResult+2,w
  8837  123E  00F6               	movwf	___lldiv@dividend+2
  8838  123F  0829               	movf	ADC_Read@ADCResult+1,w
  8839  1240  00F5               	movwf	___lldiv@dividend+1
  8840  1241  0828               	movf	ADC_Read@ADCResult,w
  8841  1242  00F4               	movwf	___lldiv@dividend
  8842  1243  160A  158A  27A2   	fcall	___lldiv
  8843  1246  0873               	movf	?___lldiv+3,w
  8844  1247  1283               	bcf	3,5	;RP0=0, select bank0
  8845  1248  1303               	bcf	3,6	;RP1=0, select bank0
  8846  1249  00A3               	movwf	?_ADC_Read+3
  8847  124A  0872               	movf	?___lldiv+2,w
  8848  124B  00A2               	movwf	?_ADC_Read+2
  8849  124C  0871               	movf	?___lldiv+1,w
  8850  124D  00A1               	movwf	?_ADC_Read+1
  8851  124E  0870               	movf	?___lldiv,w
  8852  124F  00A0               	movwf	?_ADC_Read
  8853  1250  0008               	return
  8854  1251                     __end_of_ADC_Read:	
  8855                           
  8856                           	psect	text28
  8857  1FA2                     __ptext28:	
  8858 ;; *************** function ___lldiv *****************
  8859 ;; Defined at:
  8860 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/lldiv.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;  divisor         4    0[COMMON] unsigned long 
  8863 ;;  dividend        4    4[COMMON] unsigned long 
  8864 ;; Auto vars:     Size  Location     Type
  8865 ;;  quotient        4    9[COMMON] unsigned long 
  8866 ;;  counter         1   13[COMMON] unsigned char 
  8867 ;; Return value:  Size  Location     Type
  8868 ;;                  4    0[COMMON] unsigned long 
  8869 ;; Registers used:
  8870 ;;		wreg, status,2, status,0
  8871 ;; Tracked objects:
  8872 ;;		On entry : 0/0
  8873 ;;		On exit  : 0/0
  8874 ;;		Unchanged: 0/0
  8875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8876 ;;      Params:         8       0       0       0       0
  8877 ;;      Locals:         5       0       0       0       0
  8878 ;;      Temps:          1       0       0       0       0
  8879 ;;      Totals:        14       0       0       0       0
  8880 ;;Total ram usage:       14 bytes
  8881 ;; Hardware stack levels used:    1
  8882 ;; This function calls:
  8883 ;;		Nothing
  8884 ;; This function is called by:
  8885 ;;		_ADC_Read
  8886 ;;		_sprintf
  8887 ;; This function uses a non-reentrant model
  8888 ;;
  8889                           
  8890                           
  8891                           ;psect for function ___lldiv
  8892  1FA2                     ___lldiv:	
  8893                           
  8894                           ;incstack = 0
  8895                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8896  1FA2  3000               	movlw	0
  8897  1FA3  00FC               	movwf	___lldiv@quotient+3
  8898  1FA4  3000               	movlw	0
  8899  1FA5  00FB               	movwf	___lldiv@quotient+2
  8900  1FA6  3000               	movlw	0
  8901  1FA7  00FA               	movwf	___lldiv@quotient+1
  8902  1FA8  3000               	movlw	0
  8903  1FA9  00F9               	movwf	___lldiv@quotient
  8904  1FAA  0873               	movf	___lldiv@divisor+3,w
  8905  1FAB  0472               	iorwf	___lldiv@divisor+2,w
  8906  1FAC  0471               	iorwf	___lldiv@divisor+1,w
  8907  1FAD  0470               	iorwf	___lldiv@divisor,w
  8908  1FAE  1903               	skipnz
  8909  1FAF  2FF7               	goto	l2734
  8910  1FB0  01FD               	clrf	___lldiv@counter
  8911  1FB1  0AFD               	incf	___lldiv@counter,f
  8912  1FB2                     l2720:	
  8913  1FB2  1BF3               	btfsc	___lldiv@divisor+3,7
  8914  1FB3  2FC2               	goto	l2722
  8915  1FB4  3001               	movlw	1
  8916  1FB5  00F8               	movwf	??___lldiv
  8917  1FB6                     u3885:	
  8918  1FB6  1003               	clrc
  8919  1FB7  0DF0               	rlf	___lldiv@divisor,f
  8920  1FB8  0DF1               	rlf	___lldiv@divisor+1,f
  8921  1FB9  0DF2               	rlf	___lldiv@divisor+2,f
  8922  1FBA  0DF3               	rlf	___lldiv@divisor+3,f
  8923  1FBB  0BF8               	decfsz	??___lldiv,f
  8924  1FBC  2FB6               	goto	u3885
  8925  1FBD  3001               	movlw	1
  8926  1FBE  00F8               	movwf	??___lldiv
  8927  1FBF  0878               	movf	??___lldiv,w
  8928  1FC0  07FD               	addwf	___lldiv@counter,f
  8929  1FC1  2FB2               	goto	l2720
  8930  1FC2                     l2722:	
  8931  1FC2  3001               	movlw	1
  8932  1FC3  00F8               	movwf	??___lldiv
  8933  1FC4                     u3905:	
  8934  1FC4  1003               	clrc
  8935  1FC5  0DF9               	rlf	___lldiv@quotient,f
  8936  1FC6  0DFA               	rlf	___lldiv@quotient+1,f
  8937  1FC7  0DFB               	rlf	___lldiv@quotient+2,f
  8938  1FC8  0DFC               	rlf	___lldiv@quotient+3,f
  8939  1FC9  0BF8               	decfsz	??___lldiv,f
  8940  1FCA  2FC4               	goto	u3905
  8941  1FCB  0873               	movf	___lldiv@divisor+3,w
  8942  1FCC  0277               	subwf	___lldiv@dividend+3,w
  8943  1FCD  1D03               	skipz
  8944  1FCE  2FD9               	goto	u3915
  8945  1FCF  0872               	movf	___lldiv@divisor+2,w
  8946  1FD0  0276               	subwf	___lldiv@dividend+2,w
  8947  1FD1  1D03               	skipz
  8948  1FD2  2FD9               	goto	u3915
  8949  1FD3  0871               	movf	___lldiv@divisor+1,w
  8950  1FD4  0275               	subwf	___lldiv@dividend+1,w
  8951  1FD5  1D03               	skipz
  8952  1FD6  2FD9               	goto	u3915
  8953  1FD7  0870               	movf	___lldiv@divisor,w
  8954  1FD8  0274               	subwf	___lldiv@dividend,w
  8955  1FD9                     u3915:	
  8956  1FD9  1C03               	skipc
  8957  1FDA  2FEA               	goto	l2730
  8958  1FDB  0870               	movf	___lldiv@divisor,w
  8959  1FDC  02F4               	subwf	___lldiv@dividend,f
  8960  1FDD  0871               	movf	___lldiv@divisor+1,w
  8961  1FDE  1C03               	skipc
  8962  1FDF  0F71               	incfsz	___lldiv@divisor+1,w
  8963  1FE0  02F5               	subwf	___lldiv@dividend+1,f
  8964  1FE1  0872               	movf	___lldiv@divisor+2,w
  8965  1FE2  1C03               	skipc
  8966  1FE3  0F72               	incfsz	___lldiv@divisor+2,w
  8967  1FE4  02F6               	subwf	___lldiv@dividend+2,f
  8968  1FE5  0873               	movf	___lldiv@divisor+3,w
  8969  1FE6  1C03               	skipc
  8970  1FE7  0F73               	incfsz	___lldiv@divisor+3,w
  8971  1FE8  02F7               	subwf	___lldiv@dividend+3,f
  8972  1FE9  1479               	bsf	___lldiv@quotient,0
  8973  1FEA                     l2730:	
  8974  1FEA  3001               	movlw	1
  8975  1FEB                     u3925:	
  8976  1FEB  1003               	clrc
  8977  1FEC  0CF3               	rrf	___lldiv@divisor+3,f
  8978  1FED  0CF2               	rrf	___lldiv@divisor+2,f
  8979  1FEE  0CF1               	rrf	___lldiv@divisor+1,f
  8980  1FEF  0CF0               	rrf	___lldiv@divisor,f
  8981  1FF0  3EFF               	addlw	-1
  8982  1FF1  1D03               	skipz
  8983  1FF2  2FEB               	goto	u3925
  8984  1FF3  3001               	movlw	1
  8985  1FF4  02FD               	subwf	___lldiv@counter,f
  8986  1FF5  1D03               	btfss	3,2
  8987  1FF6  2FC2               	goto	l2722
  8988  1FF7                     l2734:	
  8989  1FF7  087C               	movf	___lldiv@quotient+3,w
  8990  1FF8  00F3               	movwf	?___lldiv+3
  8991  1FF9  087B               	movf	___lldiv@quotient+2,w
  8992  1FFA  00F2               	movwf	?___lldiv+2
  8993  1FFB  087A               	movf	___lldiv@quotient+1,w
  8994  1FFC  00F1               	movwf	?___lldiv+1
  8995  1FFD  0879               	movf	___lldiv@quotient,w
  8996  1FFE  00F0               	movwf	?___lldiv
  8997  1FFF  0008               	return
  8998  2000                     __end_of___lldiv:	
  8999                           
  9000                           	psect	text29
  9001  1DCE                     __ptext29:	
  9002 ;; *************** function _ADC_Init *****************
  9003 ;; Defined at:
  9004 ;;		line 14 in file "adc.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;		None
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;		None
  9009 ;; Return value:  Size  Location     Type
  9010 ;;		None               void
  9011 ;; Registers used:
  9012 ;;		wreg, status,2, status,0
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9018 ;;      Params:         0       0       0       0       0
  9019 ;;      Locals:         0       0       0       0       0
  9020 ;;      Temps:          1       0       0       0       0
  9021 ;;      Totals:         1       0       0       0       0
  9022 ;;Total ram usage:        1 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; This function calls:
  9025 ;;		Nothing
  9026 ;; This function is called by:
  9027 ;;		_main
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           
  9032                           ;psect for function _ADC_Init
  9033  1DCE                     _ADC_Init:	
  9034                           
  9035                           ;adc.c: 16: TRISA = 0xFF;
  9036                           
  9037                           ;incstack = 0
  9038                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  9039  1DCE  30FF               	movlw	255
  9040  1DCF  1683               	bsf	3,5	;RP0=1, select bank1
  9041  1DD0  1303               	bcf	3,6	;RP1=0, select bank1
  9042  1DD1  0085               	movwf	5	;volatile
  9043                           
  9044                           ;adc.c: 18: ADCON0bits.ADCS = 1;
  9045  1DD2  1283               	bcf	3,5	;RP0=0, select bank0
  9046  1DD3  1303               	bcf	3,6	;RP1=0, select bank0
  9047  1DD4  081F               	movf	31,w	;volatile
  9048  1DD5  393F               	andlw	-193
  9049  1DD6  3840               	iorlw	64
  9050  1DD7  009F               	movwf	31	;volatile
  9051                           
  9052                           ;adc.c: 19: ADCON1bits.ADCS2 = 1;
  9053  1DD8  1683               	bsf	3,5	;RP0=1, select bank1
  9054  1DD9  1303               	bcf	3,6	;RP1=0, select bank1
  9055  1DDA  171F               	bsf	31,6	;volatile
  9056                           
  9057                           ;adc.c: 21: ADCON1bits.PCFG = 2;
  9058  1DDB  081F               	movf	31,w	;volatile
  9059  1DDC  39F0               	andlw	-16
  9060  1DDD  3802               	iorlw	2
  9061  1DDE  009F               	movwf	31	;volatile
  9062                           
  9063                           ;adc.c: 23: ADCON1bits.ADFM = 1;
  9064  1DDF  179F               	bsf	31,7	;volatile
  9065                           
  9066                           ;adc.c: 25: ADCON0bits.CHS = 0;
  9067  1DE0  30C7               	movlw	-57
  9068  1DE1  1283               	bcf	3,5	;RP0=0, select bank0
  9069  1DE2  1303               	bcf	3,6	;RP1=0, select bank0
  9070  1DE3  059F               	andwf	31,f	;volatile
  9071                           
  9072                           ;adc.c: 26: _delay((unsigned long)((15)*(8000000/4000000.0)));
  9073  1DE4  3009               	movlw	9
  9074  1DE5  00F0               	movwf	??_ADC_Init
  9075  1DE6                     u4947:	
  9076  1DE6  0BF0               	decfsz	??_ADC_Init,f
  9077  1DE7  2DE6               	goto	u4947
  9078  1DE8  2DE9               	nop2	;nop
  9079                           
  9080                           ;adc.c: 28: ADCON0bits.ADON = 1;
  9081  1DE9  1283               	bcf	3,5	;RP0=0, select bank0
  9082  1DEA  1303               	bcf	3,6	;RP1=0, select bank0
  9083  1DEB  141F               	bsf	31,0	;volatile
  9084  1DEC  0008               	return
  9085  1DED                     __end_of_ADC_Init:	
  9086  007E                     btemp	set	126	;btemp
  9087  007E                     wtemp	set	126
  9088  007E                     wtemp0	set	126
  9089  0080                     wtemp1	set	128
  9090  0082                     wtemp2	set	130
  9091  0084                     wtemp3	set	132
  9092  0086                     wtemp4	set	134
  9093  0088                     wtemp5	set	136
  9094  007F                     wtemp6	set	127
  9095  007E                     ttemp	set	126
  9096  007E                     ttemp0	set	126
  9097  0081                     ttemp1	set	129
  9098  0084                     ttemp2	set	132
  9099  0087                     ttemp3	set	135
  9100  007F                     ttemp4	set	127
  9101  007E                     ltemp	set	126
  9102  007E                     ltemp0	set	126
  9103  0082                     ltemp1	set	130
  9104  0086                     ltemp2	set	134
  9105  0080                     ltemp3	set	128


Data Sizes:
    Strings     119
    Constant    118
    Data        35
    BSS         0
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      78
    BANK1            80     80      80
    BANK3            96     73      83
    BANK2            96      0      30

Pointer List with Targets:

    main$882	PTR unsigned char  size(1) Largest target is 45
		 -> main@current_str(BANK3[45]), 

    main$875	PTR unsigned char  size(1) Largest target is 45
		 -> main@current_str(BANK3[45]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[7]), STR_3(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 45
		 -> main@current_str(BANK3[45]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S454$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    LCD_putrs@a	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_7(CODE[21]), STR_6(CODE[21]), STR_5(CODE[21]), STR_2(CODE[21]), 
		 -> STR_1(CODE[21]), 

    LCD_puts@a	PTR unsigned char  size(1) Largest target is 45
		 -> main@current_str(BANK3[45]), 

    display.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    F1209.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    S19$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _sprintf->___lldiv
    _sprintf->__div_to_l_
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___ftneg->___bmul
    ___ftge->___bmul
    _LCD_puts->_LCD_putc
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out
    _ADC_Read->___lldiv

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___lltoft
    ___bmul->___awdiv
    ___lltoft->_ADC_Read
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___bmul
    ___ftge->___bmul

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               117   117      0   62448
                                             76 BANK0      2     2      0
                                             42 BANK1     38    38      0
                                              0 BANK3     73    73      0
                           _ADC_Init
                           _ADC_Read
                            _IO_Init
                           _LCD_Init
                          _LCD_Write
                          _LCD_putrs
                           _LCD_puts
                             ___bmul
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             50    46      4   46241
                                             72 BANK0      4     0      4
                                              0 BANK1     42    42      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    9778
                                             37 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              19    16      3    9580
                                             37 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    5011
                                             21 BANK0     16    10      6
                           _ADC_Read (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     794
                                             12 COMMON     1     1      0
                                              4 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1664
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1820
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     455
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     598
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3248
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2626
                                             15 BANK0      6     2      4
                           _ADC_Read (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     615
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     480
                                             46 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3898
                                             66 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3701
                                             53 BANK0     13     7      6
                           _ADC_Read (ARG)
                             ___bmul (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2405
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     197
                                              7 BANK0      3     0      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     896
                                              7 BANK0     12     6      6
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             4     4      0     387
                                              8 COMMON     4     4      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (1) _LCD_putrs                                            3     3      0     387
                                              8 COMMON     3     3      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             4     4      0     132
                                              4 COMMON     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     256
                                              8 COMMON     6     1      5
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Write                                            4     4      0     110
                                              4 COMMON     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (3) _LCD_Out                                              4     4      0      88
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _IO_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                            15    11      4     854
                                              0 BANK0     15    11      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     618
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
     ___lldiv
   _IO_Init
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
     _LCD_Out
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   _LCD_puts
     _LCD_putc
       _LCD_Out
   ___bmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   ___ftadd
     _ADC_Read (ARG)
       ___lldiv
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___ftmul (ARG)
       _ADC_Read (ARG)
         ___lldiv
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___ftpack (ARG)
     ___ftneg (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       _ADC_Read (ARG)
         ___lldiv
       ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
   ___ftge
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftmul
     _ADC_Read (ARG)
       ___lldiv
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       _ADC_Read (ARG)
         ___lldiv
       ___ftpack (ARG)
   ___ftneg
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lltoft
     _ADC_Read (ARG)
       ___lldiv
     ___ftpack (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       _ADC_Read (ARG)
         ___lldiv
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
       ___ftneg (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           _ADC_Read (ARG)
             ___lldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             _ADC_Read (ARG)
               ___lldiv
             ___ftpack (ARG)
     ___ftge
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       _ADC_Read (ARG)
         ___lldiv
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___ftpack (ARG)
     ___ftneg
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftsub
       ___ftadd
         _ADC_Read (ARG)
           ___lldiv
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             _ADC_Read (ARG)
               ___lldiv
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             _ADC_Read (ARG)
               ___lldiv
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               _ADC_Read (ARG)
                 ___lldiv
               ___ftpack (ARG)
       ___lltoft (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___ftpack (ARG)
     ___fttol
       ___ftmul (ARG)
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           _ADC_Read (ARG)
             ___lldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             _ADC_Read (ARG)
               ___lldiv
             ___ftpack (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       _ADC_Read (ARG)
         ___lldiv
       ___ftpack (ARG)
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         _ADC_Read (ARG)
           ___lldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           _ADC_Read (ARG)
             ___lldiv
           ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     49      53       9       86.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      1E      11       31.2%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     50      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4E      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     11D      12        0.0%
ABS                  0      0     11D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Jul 19 20:49:28 2015

                      pc 0002           ___bmul@product 0025              __CFG_CP$OFF 0000  
                     l40 0D18                       l41 0D06                       l52 0D51  
                     l47 0D39                       l48 0D35                       l49 0D36  
                     l92 0D71             ___awdiv@sign 0021                       fsr 0004  
    ___wmul@multiplicand 0072             ___ftadd@exp1 0061             ___ftadd@exp2 0060  
           ___ftadd@sign 005F                      l103 0F3A                      l104 0F66  
                    l340 11EB                      l342 1202                      l422 0503  
                    l344 120B                      l443 0729                      l700 17AB  
                    l428 0543                      l542 1E38                      l720 11A6  
                    l397 01AA                      l726 11BF                      l749 166D  
                    l775 003C             __CFG_CPD$OFF 0000          LCD_Init@display 0078  
                    _lcd 01D9                      fsr0 0004                      indf 0000  
           ___awmod@sign 0076             __CFG_FOSC$HS 0000              _sprintf$467 00A9  
            _sprintf$880 00A6             __CFG_LVP$OFF 0000          __end_of_LCD_Out 14F2  
                   l2202 080B                     l3010 052C                     l2220 1F51  
                   l2150 117F                     l2302 15EE                     l3102 07C8  
                   l3022 05A8                     l3006 050D                     l3110 07DE  
                   l3120 1DF0                     l2160 11AB                     l2152 118B  
                   l2312 1604                     l3040 05F6                     l3008 0513  
                   l2162 11B5                     l2154 1190                     l2146 1178  
                   l2330 1633                     l2306 15F5                     l2226 1F5C  
                   l2402 1587                     l3034 05D7                     l2332 163F  
                   l2324 161E                     l2252 1F9B                     l2244 1F88  
                   l2236 1F64                     l2500 0C5F                     l3060 0714  
                   l3028 05BB                     l3108 00D4                     l2190 14BF  
                   l2182 147B                     l2342 165D                     l2334 1644  
                   l2238 1F72                     l2406 1597                     l3070 0741  
                   l3054 0703                     l3062 0719                     l2184 1493  
                   l2176 144A                     l2352 1691                     l2344 1669  
                   l2336 1648                     l2248 1F93                     l2264 1EA7  
                   l2512 1D9F                     l3080 0771                     l3208 0EDA  
                   l3216 0DB1                     l3152 0D1E                     l3136 0CEE  
                   l2194 14D9                     l2178 1461                     l2362 16B4  
                   l2610 17DC                     l2522 0024                     l2290 1EE3  
                   l2282 1ED0                     l3074 075B                     l3226 0F54  
                   l3146 0D07                     l2188 14AA                     l2348 167F  
                   l2620 17F7                     l2276 1EB4                     l2268 1EAE  
                   l2372 150A                     l2460 09AD                     l2452 0923  
                   l3092 07AB                     l3236 0F69                     l3228 0F55  
                   l3164 0D3C                     l2710 12D6                     l2702 12BA  
                   l2278 1EC2                     l2286 1EDB                     l2198 0805  
                   l2390 155F                     l3094 07AF                     l3086 0788  
                   l2720 1FB2                     l2640 113A                     l2704 12C5  
                   l2616 17E9                     l2608 17CC                     l2544 007D  
                   l2536 005D                     l3096 07B3                     l3088 078C  
                   l3280 0FC9                     l3192 0D8C                     l2730 1FEA  
                   l2722 1FC2                     l2706 12C8                     l2626 1E30  
                   l2618 17F4                     l2562 00B6                     l2554 0099  
                   l2394 156F                     l2378 1520                     l2482 0B13  
                   l2644 1161                     l2564 00C1                     l2556 00A9  
                   l2476 0AA5                     l2734 1FF7                     l2750 1E87  
                   l2582 170E                     l2566 00C4                     l2494 0BF1  
                   l2486 0B32                     l2910 01D2                     l2902 01AC  
                   l3198 0D96                     l2744 1E59                     l2592 1755  
                   l2576 16EF                     l2920 022B                     l2904 01C2  
                   l2746 1E69                     l2754 1E94                     l2762 081A  
                   l2676 126B                     l2764 082C                     l2782 13B7  
                   l2774 139C                     l2838 1E0F                     l2694 129D  
                   l2856 1235                     l2696 12AD                     l2960 03B7  
                   l2952 0379                     l2944 030C                     l2936 0295  
                   l2778 13AA                     l2874 0106                     l2882 014A  
                   l2980 049F                     l2964 03D8                     l2948 0333  
                   l2868 00EE                     l2894 0163                     l2976 0422  
                   l2896 01A4                     l2994 04E1                     l2986 04A5  
                   STR_1 10D0                     STR_2 107C                     STR_3 10E5  
                   STR_4 10EC                     STR_5 10A6                     STR_6 1091  
                   STR_7 10BB                     u3015 1649                     u3045 165E  
                   u4005 081F                     u3125 152C                     u3215 1598  
                   u3135 153E                     u3304 1330                     u4025 1396  
                   u3305 132E                     u3225 15A0                     u3314 1351  
                   u4115 1208                     u4035 13A4                     u3315 134F  
                   u2515 11C6                     u2604 149D                     u3244 1EF5  
                   u3324 136F                     u2605 149B                     u3245 1EF3  
                   u4045 13B2                     u3325 136D                     u2445 1184  
                   u3165 1570                     u2614 14B2                     u3254 1F15  
                   u2615 14B0                     u3255 1F13                     u4055 1412  
                   u3175 1578                     u4215 0243                     u2544 143D  
                   u3264 1F37                     u2545 143B                     u3265 1F35  
                   u2465 119F                     u3505 009A                     u2705 1F67  
                   u2634 14CC                     u2554 1454                     u3274 12EA  
                   u2635 14CA                     u2555 1452                     u3275 12E8  
                   u2644 14E4                     u2645 14E2                     u3285 12F9  
                   u2485 11AE                     u3445 005F                     u2725 1F73  
                   u2805 1EB7                     u4325 04A8                     u2574 146E  
                   u3294 1312                     u2575 146C                     u3295 1310  
                   u3535 00B8                     u3455 0070                     u2735 1F7F  
                   u4415 05C4                     u4335 04D7                     u4255 033E  
                   u2584 1486                     u2585 1484                     u3721 112D  
                   u3625 17CD                     u3465 007E                     u2745 1F89  
                   u2825 1EC8                     u4505 0738                     u4425 05D1  
                   u4265 0384                     u3722 112E                     u3723 1133  
                   u2835 1ED1                     u4515 0752                     u3724 1134  
                   u4620 0CA9                     u3741 1154                     u4445 0665  
                   u3742 1155                     u4630 0CBF                     u3743 115A  
                   u3815 129E                     u3655 17EB                     u3575 1757  
                   u4455 06CB                     u4375 051C                     u4295 03B5  
                   u3744 115B                     u3905 1FC4                     u3585 1786  
                   u3915 1FD9                     u2955 161F                     u4555 077D  
                   u4395 054E                     u3925 1FEB                     u3845 12BC  
                   u3685 1E39                     u4565 079B                     u3695 1E40  
                   u2985 1634                     u3785 1272                     u4907 13CE  
                   u3955 1E5D                     u3885 1FB6                     u4917 13DF  
                   u4837 0CFB                     u4927 1F25                     u3975 1E77  
                   u4775 0DB8                     u4847 0D2A                     u4937 11FB  
                   u3985 1E88                     u4857 0D7B                     u4947 1DE6  
                   u4867 0F47                     u4877 1320                     u4887 135F  
                   u4897 13BD              main@current 01BD          __end_of_IO_Init 1D93  
           __CFG_WRT$OFF 0000                     _main 0C7E             ___ftpack@arg 0070  
           ___ftpack@exp 0073                     btemp 007E         __end_of_ADC_Init 1DED  
       __end_of_ADC_Read 1251            __CFG_BOREN$ON 0000                     ltemp 007E  
                   start 0000                     ttemp 007E                     wtemp 007E  
     __size_of_LCD_Write 005B              LCD_Init@cmd 007D        ___bmul@multiplier 0026  
           ___ftmul@cntr 0043             ___ftmul@sign 0044       __size_of_LCD_putrs 0022  
           ___fttol@exp1 005B             ___fttol@lval 0057         __end_of_LCD_Init 1430  
       __end_of_LCD_putc 137D         __end_of_LCD_puts 1E0C                    ?_main 0070  
        __end_of___awdiv 1FA2          __end_of___ftadd 16CE            __CFG_WDTE$OFF 0000  
        __end_of___awmod 1EEA          __end_of___ftneg 1D85          __end_of___lldiv 2000  
        __end_of___ftmul 15C5          ___awdiv@divisor 0077          __end_of___llmod 1E9D  
        __end_of___ftsub 1DCE          __end_of___fttol 12DF          ___awdiv@counter 0020  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
           ___lltoft@exp 0034          __end_of_dpowers 102E                    _scale 09DF  
        __end_of_isdigit 1DA1            ___ftpack@sign 0074                    main@i 01D7  
                  pclath 000A                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __end_of_sprintf 07E3          __initialization 07E3             __end_of_main 1000  
                 ??_main 00CA            ___fttol@sign1 0056                ??_LCD_Out 0070  
   __size_of__tdiv_to_l_ 00C3        __end_of_LCD_Write 1F45                ??_IO_Init 0070  
      __end_of_LCD_putrs 1E2E         ___llmod@dividend 0074                   ?_scale 0045  
                 _ADRESH 001E                   _ADRESL 009E         ___awdiv@dividend 0079  
              ADC_Read@i 002C         __end_of___ftpack 11D8         __end_of___lltoft 0843  
         __CFG_PWRTE$OFF 0000         __end_of__powers_ 107C                   ___bmul 0801  
                 ___ftge 1111                   ___wmul 1E2E                ??___awdiv 007B  
              ??___ftadd 005B                ??___awmod 0074                ??___ftneg 007D  
              ??___lldiv 0078                ??___ftmul 003B                ??___llmod 0078  
              ??___ftsub 007E                ??___fttol 0052          ADC_Read@channel 002E  
          main@screen_id 01D6                   _fround 0843         ___awdiv@quotient 0022  
        ___awmod@divisor 0070          ___awmod@counter 0075    ___ftmul@f3_as_product 0040  
              ??_isdigit 0070          ADC_Read@samples 0020                ?_ADC_Init 0070  
              ?_ADC_Read 0020                ??_sprintf 00A0    main@toggled_backlight 006D  
__end_of__initialization 07FC                ?_LCD_Init 0078               ___ftadd@f1 0055  
             ___ftadd@f2 0058               ___ftge@ff1 0027               ___ftge@ff2 002A  
              ?_LCD_putc 0070                ?_LCD_puts 0070               ___ftneg@f1 0027  
    ___bmul@multiplicand 0024               ___ftmul@f1 0035               ___ftmul@f2 0038  
             ___ftsub@f1 0065               ___ftsub@f2 0062               ___fttol@f1 004E  
         __pcstackCOMMON 0070             __pidataBANK2 10F3             __pidataBANK3 0005  
             ___lltoft@c 002F            __end_of_scale 0C7E                LCD_putc@c 0077  
              LCD_puts@a 007B                LCD_puts@i 0079               __div_to_l_ 16CE  
         _OPTION_REGbits 0081               ??_ADC_Init 0070               ??_ADC_Read 0024  
        __div_to_l_@exp1 0025          __div_to_l_@cntr 0024             sprintf@integ 00B6  
                ??_scale 0048          __div_to_l_@quot 0020             sprintf@width 00BF  
             ??_LCD_Init 0020               ??_LCD_putc 0074               ??_LCD_puts 0078  
          __div_to_l_@f1 0070            __div_to_l_@f2 0073               __pmaintext 0C7E  
                ?___bmul 0024                  ?___ftge 0027                  ?___wmul 0070  
                ?_fround 0045                ?___ftpack 0070                ?___lltoft 002F  
                _LCD_Out 1430                  _IO_Init 1D85               __stringtab 1000  
      __end_of__npowers_ 1055          __size_of___bmul 0013          __size_of___ftge 005F  
                ___awdiv 1F45                  ___ftadd 15C5                  ___awmod 1E9D  
                ___ftneg 1D7B                  ___lldiv 1FA2          __size_of___wmul 0023  
                ___ftmul 14F2                  ___llmod 1E51                  ___ftsub 1DB2  
                ___fttol 1251               _fround$877 0051               _fround$878 004E  
             ??___ftpack 0075          __size_of_fround 019C       main@toggled_screen 006C  
             ??___lltoft 0033                  __ptext1 00CD                  __ptext2 09DF  
                __ptext3 1D93                  __ptext4 0843                  __ptext5 14F2  
                __ptext6 0801                  __ptext7 1E9D                  __ptext8 1F45  
                __ptext9 000A              ?__div_to_l_ 0070                  _dpowers 1006  
                _isdigit 1D93         ___awmod@dividend 0072                  main@lcd 01CC  
                _sprintf 00CD                _LCD_Write 1EEA     end_of_initialization 07FC  
              _LCD_putrs 1E0C          ___lldiv@divisor 0070          ___lldiv@counter 007D  
         __tdiv_to_l_@f1 0070           __tdiv_to_l_@f2 0073            ??__tdiv_to_l_ 0076  
              _PORTBbits 0006                _PORTCbits 0007                _TRISBbits 0086  
              _TRISCbits 0087        __size_of_ADC_Init 001F        __size_of_ADC_Read 0079  
             ?_LCD_Write 0070               ?_LCD_putrs 0070         main@current_mult 00D0  
      __size_of_LCD_Init 00B3      __size_of__div_to_l_ 0132        __size_of_LCD_putc 009E  
            ___ftmul@exp 003F        __size_of_LCD_puts 001F           __end_of___bmul 0814  
         __end_of___ftge 1170           __end_of___wmul 1E51               LCD_Write@c 0077  
         __end_of_fround 09DF      start_initialization 07E3      __end_of__tdiv_to_l_ 00CD  
      ADC_Read@ADCResult 0028               LCD_putrs@a 007A               LCD_putrs@i 0078  
        ___llmod@divisor 0070          ___llmod@counter 0079                 ??___bmul 007C  
               ??___ftge 002D                 ??___wmul 0074               init_fetch0 1DA1  
          sprintf@vd_469 00B2              __pdataBANK2 0110              __pdataBANK3 01DE  
               ??_fround 0048               fround@prec 0054        __size_of___ftpack 0068  
               ?_LCD_Out 0070        __size_of___lltoft 002F                ___latbits 0002  
          __pcstackBANK0 0020            __pcstackBANK1 00A0            __pcstackBANK3 0190  
               LCD_Out@c 0073      __end_of__stringdata 10F3                 ?_IO_Init 0070  
            ??_LCD_Write 0074              ??_LCD_putrs 0078              sprintf@_val 00B9  
            sprintf@flag 00BD              sprintf@fval 00C3              sprintf@prec 00C7  
              __pnvBANK3 01D9                 ?___awdiv 0077                 ?___ftadd 0055  
               ?___awmod 0070                 ?___ftneg 0027                 ?___lldiv 0070  
               ?___ftmul 0035                 ?___llmod 0070                 ?___ftsub 0062  
              __npowers_ 102E                 ?___fttol 004E                __pstrings 1000  
            __tdiv_to_l_ 000A             ??__div_to_l_ 0076                 ?_isdigit 0070  
               _ADC_Init 1DCE                 _ADC_Read 11D8                _scale$879 004A  
               ?_sprintf 0068           __size_of_scale 029F        main@toggled_power 00EE  
               _LCD_Init 137D           ___wmul@product 0074                 _LCD_putc 12DF  
               _LCD_puts 1DED       __end_of__div_to_l_ 1800                main@F1211 0110  
              main@F1213 011F                main@F1209 01DE               _ADCON0bits 001F  
            __stringbase 1005               _ADCON1bits 009F              __stringdata 107C  
      ___wmul@multiplier 0070          main@current_sub 00DF          main@current_str 0190  
       __size_of_LCD_Out 00C2         __size_of_IO_Init 000E         __size_of___awdiv 005D  
       __size_of___ftadd 0109         __size_of___awmod 004D         __size_of___ftneg 000A  
       __size_of___lldiv 005E         __size_of___ftmul 00D3         __size_of___llmod 004C  
       __size_of___ftsub 001C         __size_of___fttol 008E                 ___ftpack 1170  
     __end_of__stringtab 1006                 ___lltoft 0814              _isdigit$667 0070  
      main@start_channel 00EF               sprintf@exp 00C1         __size_of_isdigit 000E  
               _main$881 01D2                 _main$882 01D5                 __ptext10 16CE  
               __ptext11 1E2E                 __ptext20 1DED                 __ptext12 0814  
               __ptext21 1E0C                 __ptext13 1E51                 __ptext22 12DF  
               __ptext14 1251                 __ptext23 137D                 __ptext15 1DB2  
               __ptext24 1EEA                 __ptext16 15C5                 __ptext25 1430  
               __ptext17 1170                 __ptext26 1D85                 __ptext18 1D7B  
               __ptext27 11D8                 __ptext19 1111                 __ptext28 1FA2  
               __ptext29 1DCE                 __powers_ 1055         __size_of_sprintf 0716  
          __size_of_main 0382                 init_ram0 1DA5                 isdigit@c 0071  
               scale@scl 004D                sprintf@ap 00AD         __tdiv_to_l_@exp1 0025  
              sprintf@vd 00AE         __tdiv_to_l_@cntr 0024                sprintf@sp 00C6  
       __tdiv_to_l_@quot 0020         ___lldiv@dividend 0074                stringcode 1000  
           ?__tdiv_to_l_ 0070                 sprintf@c 00C9                 sprintf@f 0068  
       ___lldiv@quotient 0079                 stringdir 1000                 stringtab 1000  
       main@stop_channel 01D1  
